<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Android Gradle Plugin 源码阅读与编译]]></title>
    <url>%2F2017%2F06%2F01%2FAndroid-Gradle-Plugin%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%8E%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x4E3A;&#x4E86;&#x89E3;&#x4E00;&#x4E9B;Andorid&#x7684;&#x6784;&#x5EFA;&#x6D41;&#x7A0B;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x9700;&#x8981;&#x9605;&#x8BFB;Android Gradle Plugin&#x7684;&#x76F8;&#x5173;&#x6E90;&#x7801;&#x7684;&#x3002;&#x81EA;&#x5DF1;&#x9605;&#x8BFB;Android Gradle Plugin&#x6E90;&#x7801;&#x4E3B;&#x8981;&#x7ECF;&#x5386;&#x4E86;&#x4E09;&#x4E2A;&#x65F6;&#x671F;&#xFF1A;1&#x3001;AOSP&#x4E0A;&#x6253;&#x5305;&#x6E90;&#x7801;&#x538B;&#x7F29;&#x5305;&#xFF0C;&#x7136;&#x540E;&#x4E0B;&#x8F7D;&#x4E0B;&#x6765;&#x770B;2&#x3001;&#x901A;&#x8FC7;&#x4F9D;&#x8D56;&#x76F8;&#x5173;&#x5E93;&#xFF0C;&#x7ED3;&#x5408;IntelliJ IDEA&#x7684;&#x5FEB;&#x6377;&#x952E;&#xFF1A;Command+&#x5DE6;&#x952E;&#x3001;Alt+Command+F7 &#x8DDF;&#x8E2A;&#x6E90;&#x7801;&#x8C03;&#x7528;&#x6765;&#x770B;3&#x3001;repo&#x4E0B;&#x8F7D;AOSP&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#x5206;&#x652F;&#x4E0A;&#x7684;&#x6E90;&#x7801;&#xFF0C;&#x5B8C;&#x6574;&#x9879;&#x76EE;&#x5BFC;&#x5165;IntelliJ IDEA&#x770B;&#x65B9;&#x5F0F;1&#xFF1A;AOSP&#x4E0A;&#x6253;&#x5305;&#x6E90;&#x7801;&#x4E3A;&#x538B;&#x7F29;&#x5305;AOSP&#x4E0A;&#x6253;&#x4E86;tag&#x7684;&#x7248;&#x672C;&#xFF0C;&#x8C8C;&#x4F3C;&#x53EA;&#x6709;&#x6574;&#x6570;&#x7684;&#x5927;&#x7248;&#x672C;&#xFF0C;&#x6CA1;&#x6709;&#x5C0F;&#x7248;&#x672C;&#xFF0C;&#x5373;&#x53EA;&#x6709;2.3.0&#x3001;2.2.0&#x3001;2.0.0&#x3001;1.5.0&#x7B49;&#xFF0C;&#x6CA1;&#x6709;2.3.2&#x7B49;&#x7248;&#x672C;&#xFF0C;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x3002;gradle_2.3.0 &#x6E90;&#x7801;gradle_2.2.0 &#x6E90;&#x7801;gradle_2.0.0 &#x6E90;&#x7801;gradle_1.5.0 &#x6E90;&#x7801;gradle_1.2.0 &#x6E90;&#x7801;gradle_1.1.0 &#x6E90;&#x7801;gradle_1.0.0 &#x6E90;&#x7801;&#x6253;&#x5F00;&#x4E0A;&#x9762;&#x81EA;&#x5DF1;&#x9700;&#x8981;&#x7684;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#x7684;&#x94FE;&#x63A5;&#xFF0C;&#x70B9;&#x51FB;&#x9875;&#x9762;&#x4E0A;&#x7684;tgz&#x94FE;&#x63A5;&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x4F1A;&#x4E0B;&#x8F7D;&#x4E0B;&#x6765;&#x4E00;&#x4E2A;&#x538B;&#x7F29;&#x5305;&#xFF0C;&#x89E3;&#x538B;&#x6B64;&#x538B;&#x7F29;&#x5305;&#xFF0C;&#x7136;&#x540E;&#x5BFC;&#x5165;Android Studio&#x6216;&#x8005;IntelliJ IDEA&#xFF0C;&#x5373;&#x53EF;&#x67E5;&#x770B;&#x3002;&#x4F46;&#x662F;&#x6709;&#x7F3A;&#x9677;&#xFF0C;&#x5BFC;&#x5165;&#x9879;&#x76EE;&#x540E;&#x7531;&#x4E8E;&#x7F3A;&#x5C11;&#x4E86;&#x5F88;&#x5927;&#x4E00;&#x90E8;&#x5206;&#x4F9D;&#x8D56;&#xFF0C;&#x5BFC;&#x81F4;&#x9879;&#x76EE;&#x5927;&#x7247;&#x7206;&#x7EA2;&#xFF0C;&#x52A0;&#x4E0A;&#x6CA1;&#x6709;&#x76F8;&#x5173;&#x7684;&#x9879;&#x76EE;&#x95F4;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#xFF0C;&#x7EDD;&#x5927;&#x90E8;&#x5206;&#x4EE3;&#x7801;&#x65E0;&#x6CD5;&#x8FDB;&#x884C;&#x8DF3;&#x8F6C;&#xFF0C;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x624B;&#x52A8;&#x641C;&#x7D22;&#x4EE3;&#x7801;&#xFF0C;&#x627E;&#x5230;&#x4EE3;&#x7801;&#x8C03;&#x7528;&#x5904;&#xFF0C;&#x6781;&#x5176;&#x75DB;&#x82E6;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x4E0D;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;&#x6B64;&#x65B9;&#x6CD5;&#x9605;&#x8BFB;&#x6E90;&#x7801;&#xFF0C;&#x540E;&#x671F;&#xFF0C;&#x81EA;&#x5DF1;&#x4E5F;&#x4E0D;&#x518D;&#x901A;&#x8FC7;&#x6B64;&#x65B9;&#x6CD5;&#x67E5;&#x770B;&#x6E90;&#x7801;&#x4E86;&#xFF0C;&#x592A;&#x86CB;&#x75BC;&#x3002;&#x65B9;&#x5F0F;2&#xFF1A;&#x901A;&#x8FC7;&#x4F9D;&#x8D56;&#x76F8;&#x5173;&#x5E93;&#x67E5;&#x770B;&#x6E90;&#x7801;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x6BD4;&#x8F83;&#x8F7B;&#x91CF;&#xFF0C;&#x5EFA;&#x8BAE;&#x521D;&#x5B66;&#x8005;&#x901A;&#x8FC7;&#x6B64;&#x65B9;&#x5F0F;&#x5B66;&#x4E60;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;Gradle&#x9879;&#x76EE;&#xFF0C;&#x5728;&#x5176;&#x4F9D;&#x8D56;&#x4E2D;&#x52A0;&#x5165;&#x4E24;&#x884C;&#x4F9D;&#x8D56;&#xFF0C;&#x5982;&#x6211;&#x8981;&#x67E5;&#x770B;gradle2.3.2&#x7684;&#x6E90;&#x7801;&#x53EA;&#x9700;&#x8981;&#x52A0;&#x5165;&#x4F9D;&#x8D56;12compile gradleApi()compile &apos;com.android.tools.build:gradle:2.3.2&apos;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x53EF;&#x80FD;&#x5E76;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x7684;android gradle plugin&#x7248;&#x672C;&#x90FD;&#x9644;&#x5E26;&#x6709;&#x6E90;&#x7801;&#x7684;jar&#xFF0C;&#x5982;&#x679C;&#x9047;&#x5230;&#x4E86;&#x4E00;&#x4E9B;&#x6CA1;&#x6709;&#x6E90;&#x7801;&#x7684;&#xFF0C;&#x5373;&#x6253;&#x5F00;&#x540E;&#x770B;&#x5230;&#x7684;&#x5185;&#x5BB9;&#x662F;&#x53CD;&#x7F16;&#x8BD1;&#x7684;class&#x6216;&#x8005;&#x662F;&#x6CA1;&#x6709;javadoc&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4F60;&#x6700;&#x597D;&#x6362;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#x3002;&#x6211;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x793A;&#x4F8B;&#x9879;&#x76EE;https://github.com/lizhangqu/AndroidGradlePluginCodeViewer&#xFF0C;&#x4F7F;&#x7528;IntelliJ IDEA&#x5BFC;&#x5165;&#x5373;&#x53EF;&#xFF0C;&#x5982;&#x56FE;&#x4E4B;&#x540E;&#xFF0C;&#x7ED3;&#x5408;Command+&#x5DE6;&#x952E;&#x6216;&#x8005;Alt+Command+F7&#x5C31;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x6E90;&#x7801;&#x5BF9;&#x5E94;&#x7684;&#x8C03;&#x7528;&#x5904;&#xFF0C;&#x8DDF;&#x8E2A;&#x67E5;&#x770B;&#x4E86;&#x3002;&#x65B9;&#x5F0F;3&#xFF1A;repo&#x4E0B;&#x8F7D;AOSP&#x5B8C;&#x6574;gradle&#x6E90;&#x7801;&#x5982;&#x679C;&#x4F60;&#x6709;&#x7F16;&#x8BD1;Android Gradle Plugin&#x7684;&#x9700;&#x6C42;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6B64;&#x65B9;&#x6CD5;&#x3002;&#x5F53;&#x7136;&#x7F3A;&#x70B9;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x9879;&#x76EE;&#x5341;&#x5206;&#x5DE8;&#x5927;&#xFF0C;&#x9700;&#x8981;&#x5360;&#x7528;&#x5927;&#x91CF;&#x7684;&#x786C;&#x76D8;&#x8D44;&#x6E90;&#xFF0C;&#x5982;&#x679C;&#x786C;&#x76D8;&#x8D44;&#x6E90;&#x4E0D;&#x8DB3;&#xFF0C;&#x5EFA;&#x8BAE;&#x8FD8;&#x662F;&#x4E0D;&#x8981;&#x5C1D;&#x8BD5;&#x4E86;&#xFF0C;&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A;gradle_2.3.0&#x5206;&#x652F;&#x4E0A;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5927;&#x6982;&#x91CA;&#x653E;&#x540E;&#x6709;30G&#x5DE6;&#x53F3;&#x3002;1234$ mkdir gradle_2.3.0$ cd gradle_2.3.0$ repo init -u https://android.googlesource.com/platform/manifest -b gradle_2.3.0$ repo sync&#x6E90;&#x7801;&#x540C;&#x6B65;&#x65F6;&#x95F4;&#x8F83;&#x957F;&#xFF0C;&#x5927;&#x6982;&#x9700;&#x8981;1-3&#x5C0F;&#x65F6;&#xFF0C;&#x8010;&#x5FC3;&#x7B49;&#x5F85;&#x3002;&#x56FD;&#x5185;&#x5899;&#x53EF;&#x80FD;&#x592A;&#x9AD8;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E2D;&#x56FD;&#x79D1;&#x5B66;&#x6280;&#x672F;&#x5927;&#x5B66;&#x7684;AOSP&#x6E90;&#x6216;&#x8005;&#x6E05;&#x534E;&#x5927;&#x5B66;&#x7684;AOSP&#x6E90;&#x6E05;&#x534E;&#x5927;&#x5B66;&#x7684;AOSP&#x6E90;&#x4E2D;&#x56FD;&#x79D1;&#x5B66;&#x6280;&#x672F;&#x5927;&#x5B66;&#x7684;AOSP&#x6E90;&#x5982;&#x679C;repo init &#x63D0;&#x793A;&#x65E0;&#x6CD5;&#x8FDE;&#x63A5;&#x5230; gerrit.googlesource.com&#xFF0C;&#x67E5;&#x770B;&#x5BF9;&#x5E94;&#x7684;&#x6E90;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x9875;&#x9762;&#x8FDB;&#x884C;&#x89E3;&#x51B3;&#x6E05;&#x534E;&#x5927;&#x5B66; Git Repo &#x955C;&#x50CF;&#x4F7F;&#x7528;&#x5E2E;&#x52A9;&#x4E2D;&#x56FD;&#x79D1;&#x5B66;&#x6280;&#x672F;&#x5927;&#x5B66; &#x9644;&#x5F55;_brillo&#x540C;&#x6B65;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x8FDB;&#x5165;gradle_2.3.0/tools&#x76EE;&#x5F55;&#xFF0C;&#x7528;gradlew&#x6267;&#x884C;&#x4E00;&#x4E9B;&#x6784;&#x5EFA;&#x524D;&#x7684;&#x521D;&#x59CB;&#x5316;&#x5DE5;&#x4F5C;12$ cd tools$ ./gradlew init&#x4E4B;&#x540E;&#x7528;IntelliJ IDEA&#x6253;&#x5F00;tools/base&#x76EE;&#x5F55;&#x5373;&#x53EF;&#x67E5;&#x770B;&#xFF0C;&#x8BE5;&#x76EE;&#x5F55;&#x4E0B;&#x6709;&#x4E00;&#x4E2A;.idea&#x76EE;&#x5F55;&#xFF0C;&#x5DF2;&#x7ECF;&#x662F;IntelliJ IDEA&#x9879;&#x76EE;&#x4E86;&#xFF0C;&#x76F4;&#x63A5;&#x6253;&#x5F00;&#x5373;&#x53EF;&#x5BFC;&#x5165;&#x8FC7;&#x7A0B;&#x6BD4;&#x8F83;&#x6F2B;&#x957F;&#xFF0C;&#x8010;&#x5FC3;&#x7B49;&#x5F85;&#x3002;&#x5BFC;&#x5165;&#x8FC7;&#x7A0B;&#x4F1A;&#x63D0;&#x793A;&#x662F;&#x5426;&#x5BFC;&#x5165;&#x6210;gradle&#x9879;&#x76EE;&#xFF0C;&#x5982;&#x56FE;&#xFF0C;&#x70B9;&#x51FB;Import Gradle Project&#x5373;&#x53EF;&#x7136;&#x540E;&#x52FE;&#x9009;use gradle wrapper&#x5BFC;&#x5165;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x5927;&#x6982;&#x5C31;&#x957F;&#x8FD9;&#x6837;&#x5B50;&#xFF0C;gradle plugin&#x7684;&#x6E90;&#x7801;&#x5728;tools/base/build-system&#x4E0B;&#x5047;&#x8BBE;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E3A;gradle_2.3.0/tools&#x76EE;&#x5F55;&#xFF0C;&#x8FDB;&#x884C;android gradle plugin&#x7684;&#x7F16;&#x8BD1;12345678910111213./gradlew :base:profile:assemble./gradlew :base:builder-model:assemble./gradlew :base:builder-test-api:assemble./gradlew :base:builder:assemble./gradlew :base:transform-api:assemble./gradlew :base:gradle-api:assemble./gradlew :base:gradle-core:assemble./gradlew :base:instant-run-instrumentation:assemble./gradlew :base:gradle:assemble./gradlew :base:gradle-experimental:assemble./gradlew :base:integration-test:assemble./gradlew :base:project-test-lib:assemble./gradlew :base:project-test:assemble&#x7F16;&#x8BD1;&#x4EA7;&#x7269;&#x4F4D;&#x4E8E;gradle_2.3.0/out/build&#x76EE;&#x5F55;&#x4E0B;&#x5047;&#x8BBE;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E3A;gradle_2.3.0/tools&#x76EE;&#x5F55;&#xFF0C;&#x5C06;android gradle plugin&#x90E8;&#x7F72;&#x5230;&#x672C;&#x5730;12345678910111213./gradlew :base:profile:publishLocal./gradlew :base:builder-model:publishLocal./gradlew :base:builder-test-api:publishLocal./gradlew :base:builder:publishLocal./gradlew :base:transform-api:publishLocal./gradlew :base:gradle-api:publishLocal./gradlew :base:gradle-core:publishLocal./gradlew :base:instant-run-instrumentation:publishLocal./gradlew :base:gradle:publishLocal./gradlew :base:gradle-experimental:publishLocal./gradlew :base:integration-test:publishLocal./gradlew :base:project-test-lib:publishLocal./gradlew :base:project-test:publishLocal&#x90E8;&#x7F72;&#x4EA7;&#x7269;&#x4F4D;&#x4E8E;gradle_2.3.0/out/repo&#x76EE;&#x5F55;&#x4E0B;&#x90A3;&#x4E48;&#x5982;&#x4F55;&#x5C06;&#x6211;&#x4EEC;&#x9879;&#x76EE;&#x4E2D;&#x7684;gradle&#x63D2;&#x4EF6;&#x66FF;&#x6362;&#x4E3A;&#x4F7F;&#x7528;&#x6784;&#x5EFA;&#x597D;&#x7684;&#x63D2;&#x4EF6;&#x5462;&#x5047;&#x8BBE;&#x73B0;&#x6709;&#x9879;&#x76EE;&#x4E2D;&#x7684;&#x4F9D;&#x8D56;&#x662F;&#x8FD9;&#x6837;&#x7684;12345678buildscript { repositories { mavenCentral() } dependencies { classpath &apos;com.android.tools.build:gradle:2.3.0&apos; }}&#x9700;&#x8981;&#x5C06;&#x5176;&#x6307;&#x5B9A;&#x5230;&#x672C;&#x5730;&#x7684;&#x90E8;&#x7F72;&#x4EA7;&#x7269;&#x6240;&#x5728;repo12345678buildscript { repositories { maven {url &apos;path/to/gradle_2.3.0/out/repo&apos; } } dependencies { classpath &apos;com.android.tools.build:gradle:2.3.0&apos; }}&#x5BF9;&#x6BD4;&#x603B;&#x7ED3;&#x65B9;&#x5F0F;1&#xFF0C;&#x7F3A;&#x70B9;&#x660E;&#x663E;&#xFF0C;&#x5927;&#x7247;&#x7206;&#x7EA2;&#xFF0C;&#x4E0D;&#x80FD;&#x826F;&#x597D;&#x7684;&#x8FDB;&#x884C;&#x4EE3;&#x7801;&#x8DF3;&#x8F6C;&#x65B9;&#x5F0F;2&#xFF0C;&#x4F18;&#x70B9;&#x662F;&#x5360;&#x7528;&#x8D44;&#x6E90;&#x5C11;&#xFF0C;&#x5FEB;&#x901F;&#xFF0C;&#x65B9;&#x4FBF;&#xFF0C;&#x56E0;&#x6B64;&#x4F18;&#x5148;&#x63A8;&#x8350;&#x6B64;&#x65B9;&#x5F0F;&#xFF0C;&#x7F3A;&#x70B9;&#x662F;&#x53EA;&#x80FD;&#x9605;&#x8BFB;&#xFF0C;&#x4E0D;&#x80FD;&#x7F16;&#x8BD1;&#x3001;debug&#x4E86;&#x89E3;&#x5176;&#x6574;&#x4E2A;&#x8BE6;&#x7EC6;&#x8FC7;&#x7A0B;&#x65B9;&#x5F0F;3&#xFF0C;&#x4F18;&#x70B9;&#x662F;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#x3001;debug&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x7F3A;&#x70B9;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x786C;&#x76D8;&#x8D44;&#x6E90;&#x5360;&#x7528;&#x8FC7;&#x5927;&#xFF0C;&#x6CA1;&#x6709;30G&#x7684;&#x7A7A;&#x4F59;&#x7A7A;&#x95F4;&#xFF0C;&#x4E0D;&#x9002;&#x5408;&#x5C1D;&#x8BD5;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5BF9;Mac&#x7528;&#x6237;&#x6765;&#x8BF4;&#xFF0C;SSD&#x53EF;&#x80FD;&#x8FC7;&#x5C0F;&#xFF0C;&#x6CA1;&#x6709;&#x8FD9;&#x4E48;&#x5927;&#x7684;&#x7A7A;&#x95F4;&#x3002;&#x6E90;&#x7801;&#x540C;&#x6B65;&#x65F6;&#x95F4;&#x8F83;&#x957F;&#xFF0C;&#x9700;&#x8981;&#x8017;&#x8D39;1-3&#x4E2A;&#x5C0F;&#x65F6;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5BF9;&#x4E8E;&#x521D;&#x5B66;&#x8005;&#x6765;&#x8BF4;&#xFF0C;&#x65B9;&#x5F0F;2&#x4E3A;&#x6700;&#x4F18;&#x9009;&#x62E9;&#x3002;&#x9898;&#x5916;&#x8BDD;&#xFF1A;instant run&#x6E90;&#x7801;&#x7F16;&#x8BD1;&#x53CA;&#x90E8;&#x7F72;&#x65E2;&#x7136;&#x90FD;&#x8BB2;&#x5230;&#x4E86;android gradle plugin&#x7684;&#x7F16;&#x8BD1;&#xFF0C;&#x800C;instant run&#x6E90;&#x7801;&#x521A;&#x597D;&#x4E5F;&#x5728;tools/base&#x4E0B;&#xFF0C;&#x987A;&#x5E26;&#x5C31;&#x8BB2;&#x8BB2;instant run&#x7684;&#x7F16;&#x8BD1;&#x5047;&#x8BBE;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E3A;gradle_2.3.0/tools&#x76EE;&#x5F55;&#x7F16;&#x8BD1;12345./gradlew :base:instant-run:instant-run-annotations:assemble./gradlew :base:instant-run:instant-run-common:assemble./gradlew :base:instant-run:instant-run-client:assemble./gradlew :base:instant-run:instant-run-runtime:assemble./gradlew :base:instant-run:instant-run-server:assemble&#x90E8;&#x7F72;12345./gradlew :base:instant-run:instant-run-annotations:publishLocal./gradlew :base:instant-run:instant-run-common:publishLocal./gradlew :base:instant-run:instant-run-client:publishLocal./gradlew :base:instant-run:instant-run-runtime:publishLocal./gradlew :base:instant-run:instant-run-server:publishLocal&#x53C2;&#x8003;&#x94FE;&#x63A5;http://tools.android.com/build/gradlepluginhttp://tools.android.com/buildhttp://source.android.com/source/downloading.htmlhttps://mirrors.tuna.tsinghua.edu.cn/help/AOSP/https://lug.ustc.edu.cn/wiki/mirrors/help/aosp]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gradle</tag>
        <tag>Instant Run</tag>
        <tag>AOSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CURL NDK 交叉编译]]></title>
    <url>%2F2017%2F05%2F24%2FCURL-NDK%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[&#x79FB;&#x690D;curl&#x5230;android&#xFF0C;&#x4E14;&#x652F;&#x6301;https&#x548C;http2.0&#x4F9D;&#x8D56;&#x524D;&#x4E24;&#x7BC7;&#x6587;&#x7AE0;libnghttp2 NDK &#x4EA4;&#x53C9;&#x7F16;&#x8BD1;openssl NDK &#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x521B;&#x5EFA;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x8FDB;&#x5165;12mkdir androidcd android&#x4E0B;&#x8F7D;&#x6E90;&#x7801;12wget https://curl.haxx.se/download/curl-7.53.1.tar.gztar xfz url-7.53.1.tar.gz&#x751F;&#x6210;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;1$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchain&#x5BFC;&#x51FA;&#x73AF;&#x5883;&#x53D8;&#x91CF;(armeabi)123456789101112131415161718export ANDROID_HOME=`pwd`export TOOLCHAIN=$ANDROID_HOME/toolchainexport PKG_CONFIG_LIBDIR=$TOOLCHAIN/lib/pkgconfigexport CROSS_SYSROOT=$TOOLCHAIN/sysrootexport PATH=$TOOLCHAIN/bin:$PATHexport TOOL=arm-linux-androideabiexport CC=$TOOLCHAIN/bin/${TOOL}-gccexport CXX=$TOOLCHAIN/bin/${TOOL}-g++export LINK=${CXX}export LD=$TOOLCHAIN/bin/${TOOL}-ldexport AR=$TOOLCHAIN/bin/${TOOL}-arexport RANLIB=$TOOLCHAIN/bin/${TOOL}-ranlibexport STRIP=$TOOLCHAIN/bin/${TOOL}-stripexport ARCH_FLAGS=&quot;-mthumb&quot;export ARCH_LINK=export CFLAGS=&quot;${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64&quot;export CXXFLAGS=&quot;${CFLAGS} -frtti -fexceptions&quot;export LDFLAGS=&quot;${ARCH_LINK}&quot;&#x7F16;&#x8BD1;&#x5E76;&#x5B89;&#x88C5;123456789101112131415161718192021cd curl-7.53.1./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \ --host=arm-linux-androideabi \ --with-ssl=$TOOLCHAIN/sysroot/usr/local \ --with-nghttp2=$TOOLCHAIN/sysroot/usr/local \ --enable-ipv6 \ --enable-static \ --enable-threaded-resolver \ --disable-dict \ --disable-gopher \ --disable-ldap --disable-ldaps \ --disable-manual \ --disable-pop3 --disable-smtp --disable-imap \ --disable-rtsp \ --disable-shared \ --disable-smb \ --disable-telnet \ --disable-verbosemake -j4make installconfigure&#x5B8C;&#x6210;&#x540E;&#x68C0;&#x67E5;&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x662F;&#x5426;enable ssl, enable https, enable http2.01234567891011121314151617181920212223242526272829303132333435Configured to build curl/libcurl: curl version: 7.53.1 Host setup: arm-unknown-linux-androideabi Install prefix: /Users/lizhangqu/Desktop/android/toolchain/sysroot/usr/local Compiler: /Users/lizhangqu/Desktop/android/toolchain/bin/arm-linux-androideabi-gcc SSL support: enabled (OpenSSL) SSH support: no (--with-libssh2) zlib support: enabled GSS-API support: no (--with-gssapi) TLS-SRP support: enabled resolver: POSIX threaded IPv6 support: enabled Unix sockets support: enabled IDN support: no (--with-{libidn2,winidn}) Build libcurl: Shared=no, Static=yes Built-in manual: no (--enable-manual) --libcurl option: enabled (--disable-libcurl-option) Verbose errors: no SSPI support: no (--enable-sspi) ca cert bundle: no ca cert path: no ca fallback: no LDAP support: no (--enable-ldap / --with-ldap-lib / --with-lber-lib) LDAPS support: no (--enable-ldaps) RTSP support: no (--enable-rtsp) RTMP support: no (--with-librtmp) metalink support: no (--with-libmetalink) PSL support: no (libpsl not found) HTTP2 support: enabled (nghttp2) Protocols: FILE FTP FTPS HTTP HTTPS TFTP SONAME bump: yes - WARNING: this library will be built with the SONAME number bumped due to (a detected) ABI breakage. See lib/README.curl_off_t for details on this.armeabi-v7a1234567891011121314151617181920212223$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchainexport TOOL=arm-linux-androideabiexport ARCH_FLAGS=&quot;-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16&quot;export ARCH_LINK=&quot;-march=armv7-a -Wl,--fix-cortex-a8&quot;./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \ --host=arm-linux-androideabi \ --with-ssl=$TOOLCHAIN/sysroot/usr/local \ --with-nghttp2=$TOOLCHAIN/sysroot/usr/local \ --enable-ipv6 \ --enable-static \ --enable-threaded-resolver \ --disable-dict \ --disable-gopher \ --disable-ldap --disable-ldaps \ --disable-manual \ --disable-pop3 --disable-smtp --disable-imap \ --disable-rtsp \ --disable-shared \ --disable-smb \ --disable-telnet \ --disable-verbosex861234567891011121314151617181920212223$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=x86 --install-dir=./toolchainexport TOOL=x86-linux-androidexport ARCH_FLAGS=&quot;-march=i686 -msse3 -mstackrealign -mfpmath=sse&quot;export ARCH_LINK=&quot;&quot;./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \ --host=x86-linux-androideabi \ --with-ssl=$TOOLCHAIN/sysroot/usr/local \ --with-nghttp2=$TOOLCHAIN/sysroot/usr/local \ --enable-ipv6 \ --enable-static \ --enable-threaded-resolver \ --disable-dict \ --disable-gopher \ --disable-ldap --disable-ldaps \ --disable-manual \ --disable-pop3 --disable-smtp --disable-imap \ --disable-rtsp \ --disable-shared \ --disable-smb \ --disable-telnet \ --disable-verbose]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>curl</tag>
        <tag>交叉编译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openssl NDK 交叉编译]]></title>
    <url>%2F2017%2F05%2F24%2Fopenssl-NDK%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[&#x79FB;&#x690D;openssl&#x5230;android&#x521B;&#x5EFA;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x8FDB;&#x5165;12mkdir androidcd android&#x4E0B;&#x8F7D;&#x6E90;&#x7801;12wget https://www.openssl.org/source/openssl-1.1.0e.tar.gztar xfz openssl-1.1.0e.tar.gz&#x751F;&#x6210;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;1$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchain&#x5BFC;&#x51FA;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#xFF08;armeabi&#xFF09;1234567891011121314151617export ANDROID_HOME=`pwd`export TOOLCHAIN=$ANDROID_HOME/toolchainexport CROSS_SYSROOT=$TOOLCHAIN/sysrootexport PATH=$TOOLCHAIN/bin:$PATHexport TOOL=arm-linux-androideabiexport CC=$TOOLCHAIN/bin/${TOOL}-gccexport CXX=$TOOLCHAIN/bin/${TOOL}-g++export LINK=${CXX}export LD=$TOOLCHAIN/bin/${TOOL}-ldexport AR=$TOOLCHAIN/bin/${TOOL}-arexport RANLIB=$TOOLCHAIN/bin/${TOOL}-ranlibexport STRIP=$TOOLCHAIN/bin/${TOOL}-stripexport ARCH_FLAGS=&quot;-mthumb&quot;export ARCH_LINK=export CFLAGS=&quot;${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64&quot;export CXXFLAGS=&quot;${CFLAGS} -frtti -fexceptions&quot;export LDFLAGS=&quot;${ARCH_LINK}&quot;&#x7F16;&#x8BD1;&#x5E76;&#x5B89;&#x88C5;1234567891011cd openssl-1.1.0e/./Configure android \ --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-zlib-include=$TOOLCHAIN/sysroot/usr/include \ --with-zlib-lib=$TOOLCHAIN/sysroot/usr/lib \ zlib \ no-asm \ no-shared \ no-unit-testmake -j4make installarmeabi-v7a12345678910111213$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchainexport TOOL=arm-linux-androideabiexport ARCH_FLAGS=&quot;-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16&quot;export ARCH_LINK=&quot;-march=armv7-a -Wl,--fix-cortex-a8&quot;./Configure android-armv7 \ --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-zlib-include=$TOOLCHAIN/sysroot/usr/include \ --with-zlib-lib=$TOOLCHAIN/sysroot/usr/lib \ zlib \ no-asm \ no-shared \ no-unit-testx8612345678910111213$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=x86 --install-dir=./toolchainexport TOOL=x86-linux-androidexport ARCH_FLAGS=&quot;-march=i686 -msse3 -mstackrealign -mfpmath=sse&quot;export ARCH_LINK=&quot;&quot;./Configure android-x86 \ --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-zlib-include=$TOOLCHAIN/sysroot/usr/include \ --with-zlib-lib=$TOOLCHAIN/sysroot/usr/lib \ zlib \ no-asm \ no-shared \ no-unit-test]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>交叉编译</tag>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[libnghttp2 NDK 交叉编译]]></title>
    <url>%2F2017%2F05%2F24%2Flibnghttp2-NDK%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[&#x79FB;&#x690D;nghttp2&#x5230;android&#x521B;&#x5EFA;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x8FDB;&#x5165;12mkdir androidcd androidclone&#x6E90;&#x7801;1git clone git@github.com:nghttp2/nghttp2.git&#x751F;&#x6210;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;1$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchain&#x5BFC;&#x51FA;&#x73AF;&#x5883;&#x53D8;&#x91CF;123456export CURRENT_HOME=`pwd`export TOOLCHAIN=$CURRENT_HOME/toolchainexport PATH=$TOOLCHAIN/bin:$PATHexport PKG_CONFIG_LIBDIR=$TOOLCHAIN/lib/pkgconfigexport CPPFLAGS=&quot;-fPIE -I$TOOLCHAIN/sysroot/usr/include&quot;export LDFLAGS=&quot;-fPIE -pie -I$TOOLCHAIN/sysroot/usr/lib&quot;&#x7F16;&#x8BD1;&#x5E76;&#x5B89;&#x88C5;123456789cd nghttp2autoreconf -i./configure --enable-lib-only \ --host=arm-linux-androideabi \ --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \ --disable-shared \ --prefix=&quot;$TOOLCHAIN/sysroot/usr/local&quot;makemake install]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>交叉编译</tag>
        <tag>nghttp2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio Library 模块中 Native 代码进行 debug 的一些坑]]></title>
    <url>%2F2017%2F05%2F11%2FAndroid-Studio-Library%E6%A8%A1%E5%9D%97%E4%B8%ADNative%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8Cdebug%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x5982;&#x679C;&#x9879;&#x76EE;&#x4E2D;&#x5B58;&#x5728;&#x591A;&#x4E2A;module&#xFF0C;&#x90A3;&#x4E48;&#x5728;application&#x6A21;&#x5757;&#x4E2D;&#x4F9D;&#x8D56;library&#x6A21;&#x5757;&#xFF0C;&#x5E76;&#x4E14;library&#x6A21;&#x5757;&#x4E2D;&#x6709;native&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5047;&#x8BBE;&#x4F60;&#x9700;&#x8981;debug library&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x8FD9;&#x4E9B;native&#x4EE3;&#x7801;&#xFF0C;&#x6B63;&#x5E38;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x90E8;&#x5206;native&#x4EE3;&#x7801;&#x662F;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x88AB;debug&#x7684;&#x3002;&#x5BFC;&#x81F4;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x6839;&#x672C;&#x539F;&#x56E0;&#x662F;&#x56E0;&#x4E3A;&#x5373;&#x4F7F;&#x5728;&#x8FD0;&#x884C;application&#x6A21;&#x5757;&#x7684;debug&#x6784;&#x5EFA;&#x65F6;&#xFF0C;&#x5176;&#x4F9D;&#x8D56;&#x7684;library&#x6A21;&#x5757;&#x5E76;&#x4E0D;&#x662F;&#x4EE5;debug&#x6784;&#x5EFA;&#xFF0C;&#x800C;&#x662F;&#x4EE5;release&#x6784;&#x5EFA;&#x3002;&#x9879;&#x76EE;&#x7ED3;&#x6784;&#x4F8B;&#x5B50;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#x89E3;&#x51B3;&#x4E0D;&#x80FD;debug&#x7684;&#x65B9;&#x5F0F;&#x6709;&#x4E24;&#x79CD;&#x3002;1&#x3001;&#x4E0D;&#x8FDB;&#x884C;StripSymbolDebugGralde&#x4E2D;&#x6709;&#x4E00;&#x4E2A;Task&#x53EB;transformNativeLibsWithStripDebugSymbolFor${BuildType}&#xFF0C;&#x5176;&#x5BF9;&#x5E94;&#x7684;&#x4EE3;&#x7801;&#x5728;com.android.build.gradle.internal.transforms.StripDebugSymbolTransform&#x4E2D;&#xFF0C;&#x7FFB;&#x770B;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#x5982;&#x4E0B;&#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031if (excludeMatchers.stream().anyMatch(m -&gt; m.matches(Paths.get(path)))) { FileUtils.mkdirs(strippedLib.getParentFile()); FileUtils.copyFile(input, strippedLib);} else { stripFile(input, strippedLib, abi);}private void stripFile(@NonNull File input, @NonNull File output, @Nullable Abi abi) throws IOException { FileUtils.mkdirs(output.getParentFile()); if (abi == null) { FileUtils.copyFile(input, output); return; } ProcessInfoBuilder builder = new ProcessInfoBuilder(); builder.setExecutable(stripExecutables.get(abi)); builder.addArgs(&quot;--strip-unneeded&quot;); builder.addArgs(&quot;-o&quot;); builder.addArgs(output.toString()); builder.addArgs(input.toString()); ILogger logger = new LoggerWrapper(project.getLogger()); ProcessResult result = new GradleProcessExecutor(project).execute( builder.createProcess(), new LoggedProcessOutputHandler(logger)); if (result.getExitValue() != 0) { logger.warning(&quot;Unable to strip library &apos;%s&apos;, packaging it as is.&quot;, input.getAbsolutePath()); FileUtils.copyFile(input, output); } }&#x5F53;&#x6EE1;&#x8DB3;excludeMatchers&#x4E2D;&#x7684;&#x6B63;&#x5219;&#x5339;&#x914D;&#x65F6;&#xFF0C;&#x8BE5;Task&#x6267;&#x884C;&#x7684;&#x662F;&#x76F4;&#x63A5;&#x62F7;&#x8D1D;so&#x6587;&#x4EF6;&#xFF0C;&#x800C;&#x4E0D;&#x6EE1;&#x8DB3;&#x65F6;&#xFF0C;&#x5219;&#x6267;&#x884C;&#x7684;&#x662F;strip&#x64CD;&#x4F5C;&#x3002;&#x800C;excludeMatchers&#x662F;&#x5728;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x88AB;&#x8D4B;&#x503C;&#x7684;123456789101112131415161718@NonNullprivate final Set&lt;PathMatcher&gt; excludeMatchers;public StripDebugSymbolTransform( @NonNull Project project, @NonNull NdkHandler ndkHandler, @NonNull Set&lt;String&gt; excludePattern) { this.excludeMatchers = excludePattern.stream() .map(StripDebugSymbolTransform::compileGlob) .collect(ImmutableCollectors.toImmutableSet()); checkArgument(ndkHandler.isConfigured()); for(Abi abi : ndkHandler.getSupportedAbis()) { stripExecutables.put(abi, ndkHandler.getStripExecutable(abi)); } this.project = project;}&#x67E5;&#x770B;&#x5176;&#x6784;&#x9020;&#x51FD;&#x6570;&#x88AB;&#x8C03;&#x7528;&#x7684;&#x5730;&#x65B9;123456789TransformManager transformManager = scope.getTransformManager();GlobalScope globalScope = scope.getGlobalScope();transformManager.addTransform( tasks, scope, new StripDebugSymbolTransform( globalScope.getProject(), globalScope.getNdkHandler(), globalScope.getExtension().getPackagingOptions().getDoNotStrip()));&#x4ECE;&#x4E0A;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5FFD;&#x7565;&#x5217;&#x8868;&#x662F;&#x4ECE;PackagingOptions&#x4E2D;&#x7684;DoNotStrip&#x4F20;&#x5165;&#x3002;&#x90A3;&#x4E48;&#x95EE;&#x9898;&#x5C31;&#x597D;&#x529E;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x5728;library&#x6A21;&#x5757;&#x548C;application&#x6A21;&#x5757;&#x4E2D;&#x52A0;&#x5165;&#x5FFD;&#x7565;strip&#x7684;&#x6B63;&#x5219;&#x5339;&#x914D;&#x5373;&#x53EF;&#xFF0C;&#x5982;&#x4E0B;12345678910111213android { //... packagingOptions { doNotStrip &quot;*/armeabi/*.so&quot; doNotStrip &quot;*/armeabi-v7a/*.so&quot; doNotStrip &quot;*/arm64-v8a/*.so&quot; doNotStrip &quot;*/x86/*.so&quot; doNotStrip &quot;*/x86_64/*.so&quot; doNotStrip &quot;*/mips/*.so&quot; doNotStrip &quot;*/mips64/*.so&quot; //... }}&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;library&#x6A21;&#x5757;&#x548C;application&#x6A21;&#x5757;&#x4E2D;&#x7684;gradle&#x90FD;&#x9700;&#x8981;&#x52A0;&#x5165;&#x3002;&#x4F46;&#x662F;&#x95EE;&#x9898;&#x53C8;&#x6765;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x53D1;&#x5E03;&#x5230;maven&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x662F;&#x4E0D;&#x9700;&#x8981;&#x6267;&#x884C;&#x8FD9;&#x4E2A;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x6700;&#x597D;&#x914D;&#x7F6E;&#x4E00;&#x4E2A;&#x5F00;&#x5173;&#xFF0C;&#x4E14;&#x8FD9;&#x4E2A;&#x5F00;&#x5173;&#x4E0D;&#x4F1A;&#x88AB;&#x63D0;&#x4EA4;&#x5230;git&#x4E2D;&#x53BB;&#xFF0C;&#x56E0;&#x6B64;local.properties&#x662F;&#x6700;&#x5408;&#x9002;&#x7684;1234567891011121314151617181920boolean isDebug() { boolean ret = false try { Properties properties = new Properties() File file = project.rootProject.file(&apos;local.properties&apos;) if (!file.exists()) { return false } properties.load(file.newDataInputStream()) String debugStr = properties.getProperty(&quot;debug&quot;) if (debugStr != null &amp;&amp; debugStr.length() &gt; 0) { ret = debugStr.toBoolean() } } catch (Throwable throwable) { throwable.printStackTrace() ret = false } project.logger.error(&quot;[${project.name}]Debug:${ret}&quot;) return ret}&#x7136;&#x540E;&#x5728;local.properties&#x4E2D;&#x52A0;&#x5165;debug=true&#xFF0C;&#x4FEE;&#x6539;packagingOptions&#x914D;&#x7F6E;&#x4E3A;123456789101112131415android { //... if (isDebug()) { packagingOptions { doNotStrip &quot;*/armeabi/*.so&quot; doNotStrip &quot;*/armeabi-v7a/*.so&quot; doNotStrip &quot;*/arm64-v8a/*.so&quot; doNotStrip &quot;*/x86/*.so&quot; doNotStrip &quot;*/x86_64/*.so&quot; doNotStrip &quot;*/mips/*.so&quot; doNotStrip &quot;*/mips64/*.so&quot; //... } }}2&#x3001;&#x8BA9;Library&#x6A21;&#x5757;&#x7684;BuildType&#x968F;Application&#x6A21;&#x5757;&#x7684;BulidType&#x800C;&#x6784;&#x5EFA;&#x9664;&#x4E86;&#x4EE5;&#x4E0A;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x5176;&#x5B9E;&#x8FD8;&#x6709;&#x4E00;&#x79CD;&#x65B9;&#x5F0F;&#xFF0C;&#x90A3;&#x5C31;&#x662F;&#x8BA9;Library&#x4E0D;&#x8FDB;&#x884C;&#x9ED8;&#x8BA4;&#x7684;release&#x6784;&#x5EFA;&#xFF0C;&#x800C;&#x662F;&#x968F;Application&#x7684;BuildType&#x800C;&#x6539;&#x53D8;&#xFF0C;&#x5F53;Application&#x7684;BuildType&#x4E3A;debug&#x65F6;&#xFF0C;Library&#x4E5F;&#x8FDB;&#x884C;debug&#x6784;&#x5EFA;&#xFF0C;&#x5F53;Application&#x7684;BuildType&#x4E3A;release&#x65F6;&#xFF0C;Library&#x5219;&#x8FDB;&#x884C;release&#x6784;&#x5EFA;&#xFF0C;&#x8981;&#x505A;&#x5230;&#x8FD9;&#x6837;&#xFF0C;&#x9700;&#x8981;&#x663E;&#x793A;&#x58F0;&#x660E;&#x4E00;&#x4E0B;compile&#x7684;configuration&#x3002;&#x67E5;&#x770B;Google&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#x600E;&#x4E48;&#x505A;&#xFF1A;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Library-Publicationapplication&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x4F9D;&#x8D56;&#x539F;&#x6765;&#x662F;&#x8FD9;&#x6837;&#x7684;1compile project(&apos;:library&apos;)&#x5C06;&#x5176;&#x4FEE;&#x6539;&#x4E3A;12releaseCompile project(path:&apos;:library&apos;,configuration:&apos;release&apos;)debugCompile project(path:&apos;:library&apos;,configuration:&apos;debug&apos;)&#x7136;&#x540E;&#x5728;library&#x6A21;&#x5757;&#x4E2D;&#x7684;gradle&#x4E2D;&#x52A0;&#x5165;&#x4E00;&#x884C;&#x914D;&#x7F6E;&#xFF0C;&#x8868;&#x793A;&#x4E0D;&#x4F7F;&#x7528;&#x9ED8;&#x8BA4;&#x7684;1234567android { //... defaultConfig { publishNonDefault true //... }}&#x914D;&#x7F6E;&#x5B8C;&#x6210;&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x6109;&#x5FEB;&#x7684;debug&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x6CA1;&#x5B8C;&#xFF0C;&#x5BF9;&#x7684;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x662F;&#x5426;&#x662F;debug&#xFF0C;&#x90A3;&#x4E48;&#x4EE5;&#x4E0A;&#x914D;&#x7F6E;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#x8FD9;&#x6837;123456if (isDebug()) { releaseCompile project(path:&apos;:library&apos;,configuration:&apos;release&apos;) debugCompile project(path:&apos;:library&apos;,configuration:&apos;debug&apos;)} else { compile project(&apos;:library&apos;)}123456789android { //... defaultConfig { if (isDebug()) { publishNonDefault true } //... }}&#x8FD9;&#x91CC;&#x4E4B;&#x6240;&#x4EE5;&#x52A0;&#x5165;debug&#x5224;&#x65AD;&#xFF0C;&#x662F;&#x56E0;&#x4E3A;&#x53D1;maven&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;publishNonDefault=true&#xFF0C;Maven&#x53D1;&#x5E03;&#x63D2;&#x4EF6;&#x5C06;&#x628A;&#x8FD9;&#x4E9B;&#x989D;&#x5916;&#x7684;variant&#x4F5C;&#x4E3A;&#x989D;&#x5916;&#x7684;&#x5305;&#x53D1;&#x5E03;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x5B83;&#x53D1;&#x5E03;&#x5230;&#x4E00;&#x4E2A;maven&#x4ED3;&#x5E93;&#x5E76;&#x4E0D;&#x662F;&#x771F;&#x6B63;&#x7684;&#x517C;&#x5BB9;&#x3002;&#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x53EA;&#x5411;&#x4E00;&#x4E2A;&#x4ED3;&#x5E93;&#x53D1;&#x5E03;&#x4E00;&#x4E2A;&#x5355;&#x4E00;&#x7684; variant&#x3002;&#x56E0;&#x6B64;&#x53D1;&#x5E03;maven&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5173;&#x95ED;&#x8FD9;&#x4E2A;&#x914D;&#x7F6E;&#x9879;&#x3002;&#x4F46;&#x662F;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x4ED6;&#x4EBA;&#x4E0D;&#x77E5;&#x9053;&#x8FD9;&#x4E2A;&#x60C5;&#x51B5;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x6700;&#x597D;&#x4E3B;&#x52A8;&#x505A;&#x4E00;&#x6B21;&#x68C0;&#x6D4B;&#xFF0C;&#x5728;&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x7684;build.gradle&#x52A0;&#x5165;&#x68C0;&#x6D4B;&#x4EE3;&#x7801;123456789101112allprojects.each {project -&gt; project.afterEvaluate { def uploadArchivesTask = project.tasks.findByName(&quot;uploadArchives&quot;) if (uploadArchivesTask) { uploadArchivesTask.doFirst { if (isDebug()) { throw new RuntimeException(&quot;uploadArchives must disable debug options in local.properties first!&quot;) } } } }}&#x4E00;&#x65E6;&#x8FD0;&#x884C;uploadArchives&#x8FD9;&#x4E2A;Task&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;&#x662F;debug&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x6254;&#x5F02;&#x5E38;&#xFF0C;&#x4E0D;&#x8BA9;&#x5176;&#x53D1;&#x5E03;&#x3002;]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android 在 NDK 层使用 OpenSSL 进行 RSA 加密]]></title>
    <url>%2F2017%2F04%2F09%2FAndroid%E5%9C%A8NDK%E5%B1%82%E4%BD%BF%E7%94%A8OpenSSL%E8%BF%9B%E8%A1%8CRSA%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x9700;&#x6C42;&#xFF1A;&#x9700;&#x8981;&#x5728;NDK&#x5C42;&#x5BF9;&#x4E00;&#x4E2A;Java&#x5C42;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8FDB;&#x884C;RSA&#x52A0;&#x5BC6;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x52A0;&#x5BC6;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;Base64&#x8FD4;&#x56DE;&#x5230;Java&#x5C42;&#x65B9;&#x6848;&#xFF1A;&#x9009;&#x62E9;&#x4F7F;&#x7528;OpenSSL&#x6765;&#x5B9E;&#x73B0;&#x3002;&#x7F16;&#x8BD1;libssl.a&#x548C;libcrypto.a&#x9759;&#x6001;&#x5E93;&#x5728;github&#x4E0A;&#x627E;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x9879;&#x76EE;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5C06;OpenSSL&#x7F16;&#x8BD1;&#x6210;Android&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x9879;&#x76EE;&#x5730;&#x5740;&#x4E3A;openssl_for_ios_and_android&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#x6709;&#x70B9;&#x5C0F;&#x95EE;&#x9898;&#xFF0C;&#x90E8;&#x5206;&#x7F16;&#x8BD1;&#x811A;&#x672C;&#x9700;&#x8981;&#x505A;&#x70B9;&#x6539;&#x52A8;&#xFF0C;&#x6539;&#x52A8;&#x540E;&#x7684;&#x9879;&#x76EE;&#x89C1;openssl_for_ios_and_android&#x4E3B;&#x8981;&#x505A;&#x4E86;3&#x4E2A;&#x6539;&#x52A8;:&#x5C06;&#x6700;&#x4F4E;&#x7248;&#x672C;&#x652F;&#x6301;&#x4ECE;Android 21&#x6539;&#x5230;&#x4E86;Android 14&#x4FEE;&#x590D;&#x4E00;&#x4E2A;armeabi-v7a&#x65E0;&#x6CD5;&#x7F16;&#x8BD1;&#x51FA;&#x6765;&#x7684;&#x95EE;&#x9898;&#x5347;&#x7EA7;&#x4E86;openssl&#x7684;&#x7248;&#x672C;&#x5230;openssl-1.1.0e&#x4E4B;&#x540E;&#x5C06;&#x9879;&#x76EE;clone&#x4E0B;&#x6765;&#xFF0C;&#x8FDB;&#x5165;&#x5230;tools&#x76EE;&#x5F55;&#xFF0C;&#x6267;&#x884C;build-openssl4android.sh&#x7F16;&#x8BD1;&#x811A;&#x672C;12./build-openssl4android.sh android-armeabi armeabi-v7a./build-openssl4android.sh android armeabi&#x8FD9;&#x91CC;&#x53EA;&#x7F16;&#x8BD1;&#x4E86;armeabi-va7&#x548C;armeabi&#x67B6;&#x6784;CPU&#x7684;so&#xFF0C;&#x5982;&#x679C;&#x6709;&#x9700;&#x8981;&#xFF0C;&#x8BF7;&#x81EA;&#x884C;&#x66F4;&#x6539;&#x547D;&#x4EE4;&#x53C2;&#x6570;&#x7F16;&#x8BD1;X86&#x7B49;&#x67B6;&#x6784;&#x7684;so&#x3002;&#x7ECF;&#x8FC7;&#x5F88;&#x957F;&#x65F6;&#x95F4;&#x7684;&#x7F16;&#x8BD1;&#x3002;&#x3002;&#x3002;&#x5927;&#x6982;&#x8981;10&#x6765;&#x5206;&#x949F;&#x5427;&#x3002;&#x3002;&#x3002;&#x5728;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x7684;output&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;android&#x76EE;&#x5F55;&#xFF0C;&#x91CC;&#x9762;&#x6709;openssl-armeabi&#x548C;openssl-armeabi-v7a&#x4E24;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x5305;&#x542B;&#x4E86;openssl&#x7684;&#x5934;&#x6587;&#x4EF6;&#x4EE5;&#x53CA;&#x7F16;&#x8BD1;&#x597D;&#x7684;.a&#x9759;&#x6001;&#x5E93;&#x5B9E;&#x73B0;JNI&#x51FD;&#x6570;&#x7F16;&#x8BD1;&#x597D;&#x540E;.a&#x9759;&#x6001;&#x5E93;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x521B;&#x5EFA;jni&#x9879;&#x76EE;&#x4E86;&#x8FDB;&#x5165;jni&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x521B;&#x5EFA;Application.mk&#x6587;&#x4EF6;12345678APP_ABI := armeabi armeabi-v7aAPP_PLATFORM := android-14APP_OPTIM := releaseAPP_STL := c++_staticAPP_THIN_ARCHIVE := trueAPP_CPPFLAGS := -fpic -fexceptions -frttiAPP_GNUSTL_FORCE_CPP_FEATURES := pic exceptions rtti&#x8FDB;&#x5165;jni&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x521B;&#x5EFA;Android.mk&#x6587;&#x4EF6;123456789101112131415161718192021222324252627282930LOCAL_PATH := $(call my-dir)#&#x5F15;&#x7528;libcrypto.ainclude $(CLEAR_VARS)LOCAL_MODULE := libcryptoLOCAL_SRC_FILES := $(LOCAL_PATH)/openssl/$(TARGET_ARCH_ABI)/lib/libcrypto.ainclude $(PREBUILT_STATIC_LIBRARY)#&#x5F15;&#x7528;libssl.ainclude $(CLEAR_VARS)LOCAL_MODULE := libsslLOCAL_SRC_FILES := $(LOCAL_PATH)/openssl/$(TARGET_ARCH_ABI)/lib/libssl.ainclude $(PREBUILT_STATIC_LIBRARY)include $(CLEAR_VARS)LOCAL_MODULE := testLOCAL_SRC_FILES := \native.cpp \LOCAL_C_INCLUDES :=$(LOCAL_PATH)/openssl/openssl-$(TARGET_ARCH_ABI)/includeTARGET_PLATFORM := android-14#&#x9759;&#x6001;&#x5E93;&#x4F9D;&#x8D56;LOCAL_STATIC_LIBRARIES := libssl libcryptoLOCAL_LDLIBS += -latomic -lz -lloginclude $(BUILD_SHARED_LIBRARY)&#x8FDB;&#x5165;jni&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x62F7;&#x8D1D;&#x7F16;&#x8BD1;&#x597D;&#x7684;openssl&#x6587;&#x4EF6;&#x63A5;&#x7740;&#x5C06;&#x7B2C;&#x4E00;&#x6B65;&#x7F16;&#x8BD1;&#x597D;&#x7684;&#x9759;&#x6001;&#x5E93;&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x62F7;&#x8D1D;&#xFF0C;&#x5C06;output&#x76EE;&#x5F55;&#x4E0B;android&#x6574;&#x4E2A;&#x76EE;&#x5F55;&#x8FDB;&#x884C;&#x62F7;&#x8D1D;&#xFF0C;&#x62F7;&#x8D1D;&#x5230;jni&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#xFF0C;&#x62F7;&#x8D1D;&#x5B8C;&#x6210;&#x540E;&#x5C06;android&#x76EE;&#x5F55;&#x91CD;&#x547D;&#x540D;&#x4E3A;openssl&#x8FDB;&#x5165;jni&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x521B;&#x5EFA;native.cpp&#xFF0C;&#x642D;&#x5EFA;&#x57FA;&#x7840;&#x7684;&#x7ED3;&#x6784;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &quot;jni.h&quot;template&lt;typename T, int N&gt;char (&amp;ArraySizeHelper(T (&amp;array)[N]))[N];#define NELEMS(x) (sizeof(ArraySizeHelper(x)))#ifndef CLASSNAME#define CLASSNAME &quot;com/fucknmb/Test&quot;#endifjstring native_rsa(JNIEnv *env, jobject thiz, jstring base64PublicKey, jstring content) { return NULL;}static const JNINativeMethod sMethods[] = { { const_cast&lt;char *&gt;(&quot;native_rsa&quot;), const_cast&lt;char *&gt;(&quot;(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;), reinterpret_cast&lt;void *&gt;(native_rsa) }};int registerNativeMethods(JNIEnv *env, const char *className, const JNINativeMethod *methods, const int numMethods) { jclass clazz = env-&gt;FindClass(className); if (!clazz) { return JNI_FALSE; } if (env-&gt;RegisterNatives(clazz, methods, numMethods) != 0) { env-&gt;DeleteLocalRef(clazz); return JNI_FALSE; } env-&gt;DeleteLocalRef(clazz); return JNI_TRUE;}jint JNI_OnLoad(JavaVM *vm, void *reserved) { JNIEnv *env; if (vm-&gt;GetEnv(reinterpret_cast&lt;void **&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) { return -1; } registerNativeMethods(env, CLASSNAME, sMethods, NELEMS(sMethods)); return JNI_VERSION_1_6;}&#x58F0;&#x660E;java&#x5C42;&#x51FD;&#x6570;&#x5728;Java&#x5C42;&#x521B;&#x5EFA;com/fucknmb/Test&#x7C7B;&#xFF0C;&#x58F0;&#x660E;&#x4E00;&#x4E2A;native&#x51FD;&#x6570;1234567891011package com.fucknmb;import java.util.List;public class Test { public static native final String native_rsa(String base64PublicKey, String content); static { System.loadLibrary(&quot;test&quot;); }}&#x5B9E;&#x73B0;native_rsa&#x51FD;&#x6570;native_rsa&#x51FD;&#x6570;&#x6709;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;base64&#x4E4B;&#x540E;&#x7684;&#x516C;&#x94A5;&#xFF08;&#x4E0D;&#x542B;&#x5934;&#x90E8;&#x548C;&#x5C3E;&#x90E8;&#xFF0C;&#x4EE5;&#x53CA;&#x6CA1;&#x6362;&#x884C;&#xFF09;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x662F;&#x5F85;&#x52A0;&#x5BC6;&#x7684;&#x660E;&#x6587;&#x5185;&#x5BB9;&#xFF0C;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587;&#x8FDB;&#x884C;base64&#x3002;&#x5BF9;&#x4E8E;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5C06;&#x5176;&#x8F6C;&#x4E3A;&#x516C;&#x94A5;&#x6587;&#x4EF6;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x8FFD;&#x52A0;&#x5934;&#x90E8;&#x548C;&#x5C3E;&#x90E8;&#xFF0C;&#x5176;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122/** * &#x6839;&#x636E;&#x516C;&#x94A5;base64&#x5B57;&#x7B26;&#x4E32;&#xFF08;&#x6CA1;&#x6362;&#x884C;&#xFF09;&#x751F;&#x6210;&#x516C;&#x94A5;&#x6587;&#x672C;&#x5185;&#x5BB9; * @param base64EncodedKey * @return */std::string generatePublicKey(std::string base64EncodedKey) { std::string publicKey = base64EncodedKey; size_t base64Length = 64;//&#x6BCF;64&#x4E2A;&#x5B57;&#x7B26;&#x4E00;&#x884C; size_t publicKeyLength = base64EncodedKey.size(); for (size_t i = base64Length; i &lt; publicKeyLength; i += base64Length) { //&#x6BCF;base64Length&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x6362;&#x884C; if (base64EncodedKey[i] != &apos;\n&apos;) { publicKey.insert(i, &quot;\n&quot;); } i++; } //&#x6700;&#x524D;&#x9762;&#x8FFD;&#x52A0;&#x516C;&#x94A5;begin&#x5B57;&#x7B26;&#x4E32; publicKey.insert(0, &quot;-----BEGIN PUBLIC KEY-----\n&quot;); //&#x6700;&#x524D;&#x9762;&#x8FFD;&#x52A0;&#x516C;&#x94A5;end&#x5B57;&#x7B26;&#x4E32; publicKey.append(&quot;\n-----END PUBLIC KEY-----&quot;); return publicKey;}openssl rsa&#x52A0;&#x5BC6;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5BF9;&#x5BC6;&#x6587;&#x8FDB;&#x884C;Base64&#xFF0C;openssl&#x540C;&#x6837;&#x63D0;&#x4F9B;&#x4E86;Base64&#x7B97;&#x6CD5;&#xFF0C;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;1234567891011121314151617181920212223/** * base64 encode * @param decoded_bytes * @return */std::string base64_encode(const std::string &amp;decoded_bytes) { BIO *bio, *b64; BUF_MEM *bufferPtr; b64 = BIO_new(BIO_f_base64()); //&#x4E0D;&#x6362;&#x884C; BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL); bio = BIO_new(BIO_s_mem()); bio = BIO_push(b64, bio); //encode BIO_write(bio, decoded_bytes.c_str(), (int) decoded_bytes.length()); BIO_flush(bio); BIO_get_mem_ptr(bio, &amp;bufferPtr); //&#x8FD9;&#x91CC;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x5FC5;&#x987B;&#x8D4B;&#x503C; std::string result(bufferPtr-&gt;data, bufferPtr-&gt;length); BIO_free_all(bio); return result;}&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x6709;&#x4E00;&#x70B9;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x5C31;&#x662F;&#x8FD9;&#x4E00;&#x884C;1std::string result(bufferPtr-&gt;data, bufferPtr-&gt;length);&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x8868;&#x793A;&#x957F;&#x5EA6;&#xFF0C;&#x4E0D;&#x80FD;&#x5C11;&#xFF0C;&#x5426;&#x5219;base64&#x540E;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;&#x4F1A;&#x51FA;&#x73B0;&#x5F02;&#x5E38;&#xFF0C;&#x5BFC;&#x81F4;decode&#x7684;&#x65F6;&#x5019;&#x672B;&#x5C3E;&#x4F1A;&#x51FA;&#x73B0;&#x4E00;&#x5927;&#x5806;&#x7684;&#x4E71;&#x7801;&#xFF0C;&#x800C;&#x7F51;&#x4E0A;&#x5927;&#x591A;&#x6570;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x662F;&#x7F3A;&#x5931;&#x8FD9;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x5C31;&#x662F;rsa&#x7684;&#x5B9E;&#x73B0;&#x4E86;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/** * &#x4F7F;&#x7528;&#x516C;&#x94A5;&#x5BF9;&#x660E;&#x6587;&#x52A0;&#x5BC6; * @param publicKey * @param from * @return */std::string encryptRSA(const std::string &amp;publicKey, const std::string &amp;from) { BIO *bio = NULL; RSA *rsa_public_key = NULL; //&#x4ECE;&#x5B57;&#x7B26;&#x4E32;&#x8BFB;&#x53D6;RSA&#x516C;&#x94A5;&#x4E32; if ((bio = BIO_new_mem_buf((void *) publicKey.c_str(), -1)) == NULL) { std::cout &lt;&lt; &quot;BIO_new_mem_buf failed!&quot; &lt;&lt; std::endl; return NULL; } //&#x8BFB;&#x53D6;&#x516C;&#x94A5; rsa_public_key = PEM_read_bio_RSA_PUBKEY(bio, NULL, NULL, NULL); //&#x5F02;&#x5E38;&#x5904;&#x7406; if (rsa_public_key == NULL) { //&#x8D44;&#x6E90;&#x91CA;&#x653E; BIO_free_all(bio); RSA_free(rsa_public_key); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return NULL; } //rsa&#x6A21;&#x7684;&#x4F4D;&#x6570; int rsa_size = RSA_size(rsa_public_key); //RSA_PKCS1_PADDING &#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6; &#x4E3A; 128 -11 //RSA_NO_PADDING &#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;&#x4E3A; 128 rsa_size = rsa_size - RSA_PKCS1_PADDING_SIZE; //&#x52A8;&#x6001;&#x5206;&#x914D;&#x5185;&#x5B58;&#xFF0C;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587; unsigned char *to = (unsigned char *) malloc(rsa_size + 1); //&#x586B;&#x5145;0 memset(to, 0, rsa_size + 1); //&#x660E;&#x6587;&#x957F;&#x5EA6; int flen = from.length(); //&#x52A0;&#x5BC6;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587;&#x957F;&#x5EA6;&#xFF0C;-1&#x8868;&#x793A;&#x5931;&#x8D25; int status = RSA_public_encrypt(flen, (const unsigned char *) from.c_str(), to, rsa_public_key, RSA_PKCS1_PADDING); //&#x5F02;&#x5E38;&#x5904;&#x7406; if (status &lt; 0) { //&#x8D44;&#x6E90;&#x91CA;&#x653E; free(to); BIO_free_all(bio); RSA_free(rsa_public_key); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return NULL; } //&#x8D4B;&#x503C;&#x5BC6;&#x6587; static std::string result((char *) to, status); //&#x8D44;&#x6E90;&#x91CA;&#x653E; free(to); BIO_free_all(bio); RSA_free(rsa_public_key); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return result;}&#x540C;&#x6837;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x4E5F;&#x6709;&#x51E0;&#x4E2A;&#x5730;&#x65B9;&#x9700;&#x8981;&#x6CE8;&#x610F;&#xFF1A;&#x7B2C;&#x4E00;&#x70B9;&#xFF1A;1static std::string result((char *) to, status);&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x8868;&#x793A;&#x5BC6;&#x6587;&#x957F;&#x5EA6;&#xFF0C;&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E2A;&#x503C;&#x4F1A;&#x662F;128&#xFF0C;&#x5982;&#x679C;&#x7B2C;&#x4E8C;&#x4E2A;&#x503C;&#x4E0D;&#x4F20;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587;&#x7ECF;&#x8FC7;string&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x540E;&#xFF0C;&#x4E22;&#x5931;&#x4E00;&#x90E8;&#x5206;&#x6570;&#x636E;&#xFF0C;&#x5BFC;&#x81F4;&#x6570;&#x636E;&#x7684;&#x4E0D;&#x6B63;&#x786E;&#x7B2C;&#x4E8C;&#x70B9;:1rsa_size = rsa_size - RSA_PKCS1_PADDING_SIZE;&#x5BF9;&#x4E8E;RSA_PKCS1_PADDING_SIZE&#xFF0C;&#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;&#x4E3A;&#x9700;&#x8981;&#x51CF;&#x53BB;11&#x7B2C;&#x4E09;&#x70B9;:123456//&#x660E;&#x6587;&#x957F;&#x5EA6;int flen = from.length();//&#x52A0;&#x5BC6;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587;&#x957F;&#x5EA6;&#xFF0C;-1&#x8868;&#x793A;&#x5931;&#x8D25;int status = RSA_public_encrypt(flen, (const unsigned char *) from.c_str(), to, rsa_public_key, RSA_PKCS1_PADDING);RSA_public_encrypt&#x51FD;&#x6570;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4F20;&#x7684;&#x662F;&#x660E;&#x6587;&#x957F;&#x5EA6;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;rsa_size&#xFF0C;&#x7F51;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x4EE3;&#x7801;&#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x90FD;&#x662F;&#x4F20;&#x9519;&#x7684;&#xFF0C;&#x4F20;&#x4E86;rsa_size&#xFF0C;&#x800C;&#x5B9E;&#x9645;&#x4E0A;&#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x53C2;&#x6570;&#x540D;&#x662F;flen&#xFF0C;&#x8868;&#x793A;from&#x5B57;&#x7B26;&#x4E32;&#x7684;length&#x3002;&#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x4F20;&#x4E86;&#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;&#xFF0C;&#x5C06;&#x76F4;&#x63A5;&#x5BFC;&#x81F4;java&#x5C42;&#x65E0;&#x6CD5;&#x6B63;&#x786E;&#x89E3;&#x5BC6;JNI&#x5C42;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x6570;&#x636E;&#x3002;&#x6700;&#x540E;&#x4E0D;&#x8981;&#x5FD8;&#x8BB0;&#x52A0;&#x5934;&#x6587;&#x4EF6;&#x7684;&#x5F15;&#x7528;1234567#include &lt;openssl/bio.h&gt;#include &lt;openssl/buffer.h&gt;#include &lt;openssl/evp.h&gt;#include &lt;openssl/rsa.h&gt;#include &lt;openssl/pem.h&gt;#include &lt;iostream&gt;using std::string;&#x9700;&#x8981;&#x7684;&#x51FD;&#x6570;&#x90FD;&#x6709;&#x4E86;&#xFF0C;&#x5B9E;&#x73B0;&#x4EE5;&#x4E0B;native_rsa&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x7EC4;&#x88C5;&#x4E00;&#x4E0B;&#x4EE5;&#x4E0A;&#x51FD;&#x6570;&#x5373;&#x53EF;123456789101112131415161718192021222324252627282930jstring native_rsa(JNIEnv *env, jobject thiz, jstring base64PublicKey, jstring content) { //jstring &#x8F6C; char* char *base64PublicKeyChars = (char *) env-&gt;GetStringUTFChars(base64PublicKey, NULL); //char* &#x8F6C; string string base64PublicKeyString = string(base64PublicKeyChars); //&#x751F;&#x6210;&#x516C;&#x94A5;&#x5B57;&#x7B26;&#x4E32; string generatedPublicKey = generatePublicKey(base64PublicKeyString); //&#x91CA;&#x653E; env-&gt;ReleaseStringUTFChars(base64PublicKey, base64PublicKeyChars); //jstring &#x8F6C; char* char *contentChars = (char *) env-&gt;GetStringUTFChars(content, NULL); //char* &#x8F6C; string string contentString = string(contentChars); //&#x91CA;&#x653E; env-&gt;ReleaseStringUTFChars(content, contentChars); //&#x8C03;&#x7528;RSA&#x52A0;&#x5BC6;&#x51FD;&#x6570;&#x52A0;&#x5BC6; string rsaResult = encryptRSA(generatedPublicKey, contentString); if (rsaResult.empty()) { return NULL; } //&#x5C06;&#x5BC6;&#x6587;&#x8FDB;&#x884C;base64 string base64RSA = base64_encode(rsaResult); if (base64RSA.empty()) { return NULL; } //string -&gt; char* -&gt; jstring &#x8FD4;&#x56DE; jstring result = env-&gt;NewStringUTF(base64RSA.c_str()); return result;}&#x79C1;&#x94A5;&#x89E3;&#x5BC6;&#x5982;&#x679C;&#x4F60;&#x8FD8;&#x9700;&#x8981;&#x7528;&#x7684;&#x79C1;&#x94A5;&#x89E3;&#x5BC6;&#x90E8;&#x5206;&#xFF0C;&#x53EF;&#x4EE5;&#x7EE7;&#x7EED;&#x5B9E;&#x73B0;base64&#x7684;decode&#x51FD;&#x6570;&#xFF0C;&#x4EE5;&#x53CA;rsa&#x7684;&#x79C1;&#x94A5;&#x4E32;&#x751F;&#x6210;&#x51FD;&#x6570;&#xFF0C;rsa&#x7684;&#x89E3;&#x5BC6;&#x51FD;&#x6570;base64 decode&#x51FD;&#x6570;&#x7684;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122232425262728/** * base64 decode * @param encoded_bytes * @return */std::string base64_decode(const std::string &amp;encoded_bytes) { BIO *bioMem, *b64; bioMem = BIO_new_mem_buf((void *) encoded_bytes.c_str(), -1); b64 = BIO_new(BIO_f_base64()); BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL); bioMem = BIO_push(b64, bioMem); //&#x83B7;&#x5F97;&#x89E3;&#x7801;&#x957F;&#x5EA6; size_t buffer_length = BIO_get_mem_data(bioMem, NULL); char *decode = (char *) malloc(buffer_length + 1); //&#x586B;&#x5145;0 memset(decode, 0, buffer_length + 1); BIO_read(bioMem, (void *) decode, (int) buffer_length); static std::string decoded_bytes(decode); BIO_free_all(bioMem); return decoded_bytes;}rsa&#x7684;&#x79C1;&#x94A5;&#x4E32;&#x751F;&#x6210;&#x51FD;&#x6570;&#x7684;&#x8BD5;&#x4E0B;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122/** * &#x6839;&#x636E;&#x79C1;&#x94A5;base64&#x5B57;&#x7B26;&#x4E32;&#xFF08;&#x6CA1;&#x6362;&#x884C;&#xFF09;&#x751F;&#x6210;&#x79C1;&#x94A5;&#x6587;&#x672C;&#x5185;&#x5BB9; * @param base64EncodedKey * @return */std::string generatePrivateKey(std::string base64EncodedKey) { std::string privateKey = base64EncodedKey; size_t base64Length = 64;//&#x6BCF;64&#x4E2A;&#x5B57;&#x7B26;&#x4E00;&#x884C; size_t privateKeyLength = base64EncodedKey.size(); for (size_t i = base64Length; i &lt; privateKeyLength; i += base64Length) { //&#x6BCF;base64Length&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x6362;&#x884C; if (base64EncodedKey[i] != &apos;\n&apos;) { privateKey.insert(i, &quot;\n&quot;); } i++; } //&#x6700;&#x524D;&#x9762;&#x8FFD;&#x52A0;&#x79C1;&#x94A5;begin&#x5B57;&#x7B26;&#x4E32; privateKey.insert(0, &quot;-----BEGIN PRIVATE KEY-----\n&quot;); //&#x6700;&#x540E;&#x9762;&#x8FFD;&#x52A0;&#x79C1;&#x94A5;end&#x5B57;&#x7B26;&#x4E32; privateKey.append(&quot;\n-----END PRIVATE KEY-----&quot;); return privateKey;}&#x79C1;&#x94A5;&#x89E3;&#x5BC6;&#x51FD;&#x6570;&#x7684;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/** * &#x4F7F;&#x7528;&#x79C1;&#x94A5;&#x5BF9;&#x5BC6;&#x6587;&#x89E3;&#x5BC6; * @param privetaKey * @param from * @return */std::string decryptRSA(const std::string &amp;privetaKey, const std::string &amp;from) { BIO *bio = NULL; RSA *rsa_private_key = NULL; //&#x4ECE;&#x5B57;&#x7B26;&#x4E32;&#x8BFB;&#x53D6;RSA&#x516C;&#x94A5;&#x4E32; if ((bio = BIO_new_mem_buf((void *) privetaKey.c_str(), -1)) == NULL) { std::cout &lt;&lt; &quot;BIO_new_mem_buf failed!&quot; &lt;&lt; std::endl; return NULL; } //&#x8BFB;&#x53D6;&#x79C1;&#x94A5; rsa_private_key = PEM_read_bio_RSAPrivateKey(bio, NULL, NULL, NULL); //&#x5F02;&#x5E38;&#x5904;&#x7406; if (rsa_private_key == NULL) { //&#x8D44;&#x6E90;&#x91CA;&#x653E; BIO_free_all(bio); RSA_free(rsa_private_key); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return NULL; } //rsa&#x6A21;&#x7684;&#x4F4D;&#x6570; int rsa_size = RSA_size(rsa_private_key); //&#x52A8;&#x6001;&#x5206;&#x914D;&#x5185;&#x5B58;&#xFF0C;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x89E3;&#x5BC6;&#x540E;&#x7684;&#x660E;&#x6587; unsigned char *to = (unsigned char *) malloc(rsa_size + 1); //&#x586B;&#x5145;0 memset(to, 0, rsa_size + 1); //&#x5BC6;&#x6587;&#x957F;&#x5EA6; int flen = from.length(); // RSA_NO_PADDING // RSA_PKCS1_PADDING //&#x89E3;&#x5BC6;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x89E3;&#x5BC6;&#x540E;&#x7684;&#x540D;&#x6587;&#x957F;&#x5EA6;&#xFF0C;-1&#x8868;&#x793A;&#x5931;&#x8D25; int status = RSA_private_decrypt(flen, (const unsigned char *) from.c_str(), to, rsa_private_key, RSA_PKCS1_PADDING); //&#x5F02;&#x5E38;&#x5904;&#x7406;&#x7387; if (status &lt; 0) { //&#x91CA;&#x653E;&#x8D44;&#x6E90; free(to); BIO_free_all(bio); RSA_free(rsa_private_key); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return NULL; } //&#x8D4B;&#x503C;&#x660E;&#x6587;&#xFF0C;&#x662F;&#x5426;&#x9700;&#x8981;&#x6307;&#x5B9A;to&#x7684;&#x957F;&#x5EA6;&#xFF1F; static std::string result((char *) to); //&#x91CA;&#x653E;&#x8D44;&#x6E90; free(to); BIO_free_all(bio); RSA_free(rsa_private_key); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return result;}&#x5982;&#x679C;&#x4F60;&#x8981;&#x89E3;&#x5BC6;&#x516C;&#x94A5;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x8FD9;&#x6837;&#x8C03;&#x7528;&#x5373;&#x53EF;&#x8FD4;&#x56DE;&#x660E;&#x6587;1234567891011121314//&#x516C;&#x94A5;&#x4E32;&#x548C;&#x79C1;&#x94A5;&#x4E32;string generatedPublicKey = generatePublicKey(base64PublicKey);string generatedPrivetKey = generatePrivateKey(base64PrivateKey); string content(&quot;just a test&quot;);//&#x52A0;&#x5BC6;string result = encryptRSA(generatedPublicKey, content);//encodestring base64RSA = base64_encode(result);//decodestring decodeBase64RSA = base64_decode(base64RSA);//&#x89E3;&#x5BC6;string origin = decryptRSA(generatedPrivetKey, decodeBase64RSA);&#x6700;&#x540E;&#x6CE8;&#x610F;&#x4E00;&#x4E0B;base64PublicKey&#x548C;base64PrivateKey&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x4E0D;&#x5305;&#x542B;&#x6362;&#x884C;&#x7684;&#xFF0C;&#x5C31;&#x662F;&#x79C1;&#x94A5;&#x548C;&#x516C;&#x94A5;&#x7684;encoded&#x4E4B;&#x540E;&#x7684;&#x5B57;&#x8282;&#x6570;&#x7EC4;base64&#x540E;&#x7684;&#x503C;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x8C03;&#x7528;generatePublicKey&#x548C;generatePrivateKey&#x8FFD;&#x52A0;&#x5934;&#x548C;&#x5C3E;&#x3002;RSA&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#x7684;&#x751F;&#x6210;&#x751F;&#x6210;&#x79C1;&#x94A5;1openssl genrsa -out rsa_private_key.pem 1024&#x8FD9;&#x6761;&#x547D;&#x4EE4;&#x8BA9;openssl&#x968F;&#x673A;&#x751F;&#x6210;&#x4E86;&#x4E00;&#x4EFD;&#x79C1;&#x94A5;&#xFF0C;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;&#x662F;1024&#x4F4D;&#x3002;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;&#x662F;&#x6307;&#x7406;&#x8BBA;&#x4E0A;&#x6700;&#x5927;&#x5141;&#x8BB8;&#x201D;&#x88AB;&#x52A0;&#x5BC6;&#x7684;&#x4FE1;&#x606F;&#x201C;&#x957F;&#x5EA6;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x660E;&#x6587;&#x7684;&#x957F;&#x5EA6;&#x9650;&#x5236;&#x3002;&#x968F;&#x7740;&#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x589E;&#x5927;&#xFF08;&#x6BD4;&#x65B9;&#x8BF4;2048&#xFF09;&#xFF0C;&#x5141;&#x8BB8;&#x7684;&#x660E;&#x6587;&#x957F;&#x5EA6;&#x4E5F;&#x4F1A;&#x589E;&#x52A0;&#xFF0C;&#x4F46;&#x540C;&#x65F6;&#x4E5F;&#x4F1A;&#x9020;&#x6210;&#x8BA1;&#x7B97;&#x590D;&#x6742;&#x5EA6;&#x7684;&#x6781;&#x901F;&#x589E;&#x957F;&#x3002;&#x4E00;&#x822C;&#x63A8;&#x8350;&#x7684;&#x957F;&#x5EA6;&#x5C31;&#x662F;1024&#x4F4D;&#xFF08;128&#x5B57;&#x8282;&#xFF0C;&#x4E4B;&#x524D;&#x7684;&#x4EE3;&#x7801;&#x7684;&#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;128&#x5C31;&#x662F;&#x8FD9;&#x4E48;&#x6765;&#x7684;&#xFF09;&#x3002;&#x751F;&#x6210;&#x516C;&#x94A5;1openssl rsa -in rsa_private_key.pem -out rsa_public_key.pem -pubout&#x5BC6;&#x94A5;&#x6587;&#x4EF6;&#x6700;&#x7EC8;&#x5C06;&#x6570;&#x636E;&#x901A;&#x8FC7;Base64&#x7F16;&#x7801;&#x8FDB;&#x884C;&#x5B58;&#x50A8;&#x3002;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x4E0A;&#x8FF0;&#x751F;&#x6210;&#x7684;&#x5BC6;&#x94A5;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x6BCF;&#x4E00;&#x884C;&#x7684;&#x957F;&#x5EA6;&#x90FD;&#x5F88;&#x89C4;&#x5F8B;&#x3002;&#x8FD9;&#x662F;&#x7531;&#x4E8E;RFC2045&#x4E2D;&#x89C4;&#x5B9A;&#xFF1A;The encoded output stream must be represented in lines of no more than 76 characters each&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;Base64&#x7F16;&#x7801;&#x7684;&#x6570;&#x636E;&#x6BCF;&#x884C;&#x6700;&#x591A;&#x4E0D;&#x8D85;&#x8FC7;76&#x5B57;&#x7B26;&#xFF0C;&#x5BF9;&#x4E8E;&#x8D85;&#x957F;&#x6570;&#x636E;&#x9700;&#x8981;&#x6309;&#x884C;&#x5206;&#x5272;&#x3002;&#x4E0A;&#x9762;&#x7684;generatePublicKey&#x548C;generatePrivateKey&#x51FD;&#x6570;&#x6211;&#x4EEC;&#x662F;&#x6309;64&#x4F4D;&#x4E00;&#x884C;&#x8FDB;&#x884C;&#x5206;&#x5272;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x6709;&#x9700;&#x8981;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x503C;&#x4FEE;&#x6539;&#x4E3A;76&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x751F;&#x6210;&#x79C1;&#x94A5;&#x6587;&#x4EF6;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#xFF0C;&#x9700;&#x8981;&#x8FDB;&#x884C;PKCS#8&#x7F16;&#x7801;&#xFF1A;1openssl pkcs8 -topk8 -in rsa_private_key.pem -out pkcs8_rsa_private_key.pem -nocrypt&#x7B2C;&#x4E8C;&#x6B65;&#x548C;&#x7B2C;&#x4E09;&#x6B65;&#x751F;&#x6210;&#x7684;&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#x5C31;&#x53EF;&#x4EE5;&#x7528;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x6709;&#x4E2A;&#x95EE;&#x9898;&#x9700;&#x8981;&#x6CE8;&#x610F;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x7684;&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#x662F;&#x7C7B;&#x4F3C;&#x4E0B;&#x9762;&#x8FD9;&#x79CD;&#x683C;&#x5F0F;&#x7684;12345678-----BEGIN PUBLIC KEY-----....-----END PUBLIC KEY----------BEGIN PRIVATE KEY-----....-----END PRIVATE KEY-----&#x90A3;&#x4E48;&#xFF0C;&#x4F60;&#x65E0;&#x9700;&#x8C03;&#x7528;generatePublicKey&#x6216;&#x8005;generatePrivateKey&#x51FD;&#x6570;&#xFF0C;&#x6B64;&#x65F6;&#x5DF2;&#x7ECF;&#x662F;&#x9700;&#x8981;&#x7684;&#x516C;&#x94A5;&#x4E32;&#x548C;&#x79C1;&#x94A5;&#x4E32;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x4F60;&#x7684;&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#x6CA1;&#x6709;&#x5934;&#x90E8;&#x548C;&#x5C3E;&#x90E8;&#xFF0C;&#x5E76;&#x4E14;&#x4E0D;&#x662F;&#x6362;&#x884C;&#x7684;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x8C03;&#x7528;&#x4E00;&#x4E0B;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x8FD9;&#x8FB9;Java&#x5C42;&#x4F20;&#x5165;&#x7684;&#x662F;&#x540E;&#x8005;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x8C03;&#x7528;generatePublicKey&#x6216;&#x8005;generatePrivateKey&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#x3002;Java&#x5C42;&#x8C03;&#x7528;&#x516C;&#x94A5;&#x52A0;&#x5BC6;&#x51FD;&#x6570;&#x90E8;&#x5206;12String base64PublicKey = &quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDP0tzYxBF5IGfNvuIHzAqvza/ZxfH8aEiPFA4nY/W3js+cG3JUU86Jkc7jUG9XfGdW6SJ38ANs5tyWqYkJyoUErB2PjQQQDmHhbgpBUSeOdwGr/LPtrTrotrNXwpRY9eodkcbcMlbT0gvdnohRSISCjJ2KmFcBMkeO9R2DWe6oIwIDAQAB&quot;;String result = com.fucknmb.Test.native_rsa(base64PublicKey,&quot;I am test&quot;);]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>OpenSSL</tag>
        <tag>RSA</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ IDEA 远程调试]]></title>
    <url>%2F2017%2F04%2F07%2FIntellij-IDEA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x5FEB;&#x901F;&#x5B9A;&#x4F4D;&#x7EBF;&#x4E0A;&#x95EE;&#x9898;&#xFF0C;&#x6240;&#x4EE5;&#x8FDC;&#x7A0B;&#x8C03;&#x8BD5;&#x670D;&#x52A1;&#x5668;&#x662F;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x5B9E;&#x7528;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x65B0;&#x5EFA;Remote ConfigurationEdit Configurations -&gt; +&#x53F7; -&gt; Remote -&gt; &#x586B;&#x5199;&#x8FDC;&#x7A0B;Host&#x548C;&#x7AEF;&#x53E3;&#x53F7;&#x5176;&#x4E2D;Host&#x586B;&#x5199;&#x7684;&#x662F;&#x8FDC;&#x7A0B;&#x670D;&#x52A1;&#x5668;&#x7684;IP&#x5730;&#x5740;&#xFF0C;8082&#x5C31;&#x662F;&#x8FDC;&#x7A0B;&#x8C03;&#x8BD5;&#x7684;&#x7AEF;&#x53E3;&#x670D;&#x52A1;&#x5668;&#x914D;&#x7F6E;&#x5C06;&#x7B2C;&#x4E00;&#x6B65;IntelliJ IDEA&#x914D;&#x7F6E;&#x4E2D;&#x7684;Command line arguments for running remote JVM&#x590D;&#x5236;&#x4E0B;&#x6765;&#xFF0C;&#x5728;&#x670D;&#x52A1;&#x5668;Tomcat&#x7684;bin&#x76EE;&#x5F55;&#x4E0B;&#x7684;setenv.sh&#x4E2D;&#x589E;&#x52A0;&#x5982;&#x4E0B;&#x914D;&#x7F6E;:1CATALINA_OPTS=&quot;${CATALINA_OPTS} -agentlib:jdwp=transport=dt_socket,server=y,address=8082,suspend=n &quot;&#x542F;&#x52A8;&#x8C03;&#x8BD5;&#x770B;&#x5230;Connected to target VM&#x7B49;&#x4FE1;&#x606F;&#x8F93;&#x51FA;&#x5C31;&#x8868;&#x793A;&#x8FDE;&#x63A5;&#x5230;&#x4E86;&#x8FDC;&#x7A0B;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x4E4B;&#x540E;&#x5C31;&#x662F;&#x6B63;&#x5E38;&#x7684;&#x8C03;&#x8BD5;&#x4E86;&#x9000;&#x51FA;&#x8C03;&#x8BD5;&#x70B9;&#x51FB;&#x4E0A;&#x56FE;&#x5DE6;&#x4FA7;&#x5DE5;&#x5177;&#x680F;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EA2;&#x8272;&#x7684;&#x53C9;&#x53C9;&#x9000;&#x51FA;&#x8C03;&#x8BD5;&#x5F39;&#x51FA;&#x786E;&#x8BA4;&#x6846;&#x65F6;&#x4E0D;&#x8981;&#x9009;&#x62E9;Terminate the process after disconnect,&#x7136;&#x540E;&#x70B9;&#x51FB;disconnect&#x65AD;&#x5F00;&#x8FDE;&#x63A5;&#xFF0C;&#x91CD;&#x8981;&#x7684;&#x4E8B;&#x518D;&#x8BF4;&#x4E00;&#x904D;&#xFF0C;&#x4E0D;&#x8981;&#x9009;&#x62E9;&#x65AD;&#x5F00;&#x8FDE;&#x63A5;&#x540E;&#x7EC8;&#x6B62;&#x7A0B;&#x5E8F;]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>远程调试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Empty-Application-Template-For-XCode8]]></title>
    <url>%2F2017%2F02%2F10%2FiOS-Empty-Application-Template-For-XCode8%2F</url>
    <content type="text"><![CDATA[clone Templategit clone git@github.com:lizhangqu/iOS-Empty-Application-Template-For-Xcode8.git&#x590D;&#x5236;&#x5230;XCode8&#x5B89;&#x88C5;&#x76EE;&#x5F55;&#x4E2D;{Xcode.app}/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/Project Templates/iOS/Application/&#x521B;&#x5EFA;Empty Application&#x6548;&#x679C;&#x5982;&#x4E0B;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>XCode8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编译时注解 5 步走]]></title>
    <url>%2F2017%2F02%2F07%2F%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A35%E6%AD%A5%E8%B5%B0%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x7B80;&#x5355;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#xFF0C;&#x7F16;&#x5199;&#x7F16;&#x8BD1;&#x65F6;&#x6CE8;&#x89E3;&#x7684;&#x51E0;&#x4E2A;&#x6B65;&#x9AA4;&#x3002;&#x65B0;&#x5EFA;Java Module&#x5F15;&#x5165;auto-service(&#x81EA;&#x52A8;&#x751F;&#x6210;services&#x4E0B;&#x6587;&#x4EF6;)&#x548C;javapoet&#xFF08;&#x751F;&#x6210;java&#x6587;&#x4EF6;&#xFF09;12compile &apos;com.google.auto.service:auto-service:1.0-rc2&apos;compile &apos;com.squareup:javapoet:1.8.0&apos;&#x7F16;&#x5199;&#x6CE8;&#x89E3;123456789101112@Target(ElementType.TYPE)@Retention(RetentionPolicy.SOURCE)@Inheritedpublic @interface Api { String scope(); String name(); String version();}&#x521B;&#x5EFA;AbstractProcessor&#x5B9E;&#x73B0;&#x7C7B;&#x91CD;&#x5199;getSupportedSourceVersion&#xFF0C;getSupportedAnnotationTypes&#x548C;process&#x65B9;&#x6CD5;&#x3002;&#x6CE8;&#x610F;&#x5728;&#x7C7B;&#x4E0A;&#x52A0;&#x5165;&#x6CE8;&#x89E3;AutoService&#xFF0C;&#x4FBF;&#x4F1A;&#x81EA;&#x52A8;&#x751F;&#x6210;META-INF&#x4E0B;&#x7684;services&#x6587;&#x4EF6;12345678910111213141516171819202122@AutoService(Processor.class)public class AnnotationProcessor extends AbstractProcessor { @Override public SourceVersion getSupportedSourceVersion() { return SourceVersion.latestSupported(); } @Override public Set&lt;String&gt; getSupportedAnnotationTypes() { Set&lt;String&gt; supportedAnnotationTypes = new HashSet&lt;&gt;(); supportedAnnotationTypes.add(Api.class.getCanonicalName()); return supportedAnnotationTypes; } @Override public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) { return false; }}&#x5B9E;&#x73B0;process&#x65B9;&#x6CD5;&#xFF0C;&#x6839;&#x636E;&#x6CE8;&#x89E3;&#x751F;&#x6210;&#x5BF9;&#x5E94;&#x4EE3;&#x7801;12345678910111213141516171819202122232425262728public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) { Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(Api.class); for (Element e : elements) { //&#x83B7;&#x5F97;&#x5BF9;&#x5E94;&#x7684;&#x6CE8;&#x89E3; Api api = e.getAnnotation(Api.class); System.out.println(&quot;*&quot;); //&#x4F7F;&#x7528;javapoet&#x5F00;&#x59CB;&#x751F;&#x6210;&#x4EE3;&#x7801; TypeSpec clazz = TypeSpec.classBuilder(api.name().toUpperCase() + &quot;Request&quot;) .addJavadoc(&quot;Generated request for network\n&quot;) .addSuperinterface(Serializable.class) .build(); JavaFile javaFile = JavaFile.builder(&quot;com.funcknmb.api&quot;, clazz) .build(); //&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#x5199;&#x5165;&#x6587;&#x4EF6; try { JavaFileObject fileObject = processingEnv.getFiler().createSourceFile(&quot;com.funcknmb.api.&quot; + api.name().toUpperCase() + &quot;Request&quot;); processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, &quot;Creating &quot; + fileObject.toUri()); Writer writer = fileObject.openWriter(); javaFile.writeTo(writer); writer.close(); } catch (IOException x) { processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, x.toString()); } } return false;}&#x603B;&#x7ED3;&#x7F16;&#x5199;&#x7684;&#x6CE8;&#x89E3;&#x4EE5;&#x53CA;process&#x7684;&#x5B9E;&#x73B0;&#x53EA;&#x662F;&#x505A;&#x4E2A;&#x6A21;&#x677F;&#xFF0C;&#x5177;&#x4F53;&#x60C5;&#x51B5;&#x89C6;&#x60C5;&#x51B5;&#x800C;&#x5B9A;&#x3002;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Annotation</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Https&Http2.0&HttpDNS 的那些事]]></title>
    <url>%2F2017%2F01%2F17%2FHttps%26Http2.0%26HttpDNS%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[&#x4EC5;&#x4EE5;&#x672C;&#x6587;&#x5907;&#x5FD8;2016&#x5E74;&#x7F51;&#x7EDC;&#x4F18;&#x5316;&#x8FC7;&#x7A0B;&#x4E2D;&#x9047;&#x5230;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x672C;&#x6587;&#x6240;&#x8BA8;&#x8BBA;&#x7684;&#x5185;&#x5BB9;&#x5168;&#x90E8;&#x57FA;&#x4E8E;OkHttp&#x6B64;&#x5F00;&#x6E90;&#x5E93;&#xFF0C;&#x7248;&#x672C;&#x53F7;&#x4E3A;3.2.0&#x5173;&#x4E8E;Https&#x53D1;&#x9001;HTTPS&#x8BF7;&#x6C42;&#x9996;&#x5148;&#x8981;&#x8FDB;&#x884C;SSL/TLS&#x63E1;&#x624B;&#xFF0C;&#x63E1;&#x624B;&#x8FC7;&#x7A0B;&#x5927;&#x81F4;&#x5982;&#x4E0B;&#xFF1A;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x8D77;&#x63E1;&#x624B;&#x8BF7;&#x6C42;&#xFF0C;&#x643A;&#x5E26;&#x968F;&#x673A;&#x6570;&#x3001;&#x652F;&#x6301;&#x7B97;&#x6CD5;&#x5217;&#x8868;&#x7B49;&#x53C2;&#x6570;&#x3002;&#x670D;&#x52A1;&#x7AEF;&#x6536;&#x5230;&#x8BF7;&#x6C42;&#xFF0C;&#x9009;&#x62E9;&#x5408;&#x9002;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x4E0B;&#x53D1;&#x516C;&#x94A5;&#x8BC1;&#x4E66;&#x548C;&#x968F;&#x673A;&#x6570;&#x3002;&#x5BA2;&#x6237;&#x7AEF;&#x5BF9;&#x670D;&#x52A1;&#x7AEF;&#x8BC1;&#x4E66;&#x8FDB;&#x884C;&#x6821;&#x9A8C;&#xFF0C;&#x5E76;&#x53D1;&#x9001;&#x968F;&#x673A;&#x6570;&#x4FE1;&#x606F;&#xFF0C;&#x8BE5;&#x4FE1;&#x606F;&#x4F7F;&#x7528;&#x516C;&#x94A5;&#x52A0;&#x5BC6;&#x3002;&#x670D;&#x52A1;&#x7AEF;&#x901A;&#x8FC7;&#x79C1;&#x94A5;&#x83B7;&#x53D6;&#x968F;&#x673A;&#x6570;&#x4FE1;&#x606F;&#x3002;&#x53CC;&#x65B9;&#x6839;&#x636E;&#x4EE5;&#x4E0A;&#x4EA4;&#x4E92;&#x7684;&#x4FE1;&#x606F;&#x751F;&#x6210;session ticket&#xFF0C;&#x7528;&#x4F5C;&#x8BE5;&#x8FDE;&#x63A5;&#x540E;&#x7EED;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x7684;&#x52A0;&#x5BC6;&#x5BC6;&#x94A5;&#x3002;&#x4E0A;&#x8FF0;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x7B2C;3&#x6B65;&#x4E2D;&#x5BA2;&#x6237;&#x7AEF;&#x9700;&#x8981;&#x9A8C;&#x8BC1;&#x670D;&#x52A1;&#x7AEF;&#x4E0B;&#x53D1;&#x7684;&#x8BC1;&#x4E66;&#xFF0C;&#x9A8C;&#x8BC1;&#x8FC7;&#x7A0B;&#x6709;&#x4EE5;&#x4E0B;&#x4E24;&#x4E2A;&#x8981;&#x70B9;&#xFF1A;&#x5BA2;&#x6237;&#x7AEF;&#x7528;&#x672C;&#x5730;&#x4FDD;&#x5B58;&#x7684;&#x6839;&#x8BC1;&#x4E66;&#x89E3;&#x5F00;&#x8BC1;&#x4E66;&#x94FE;&#xFF0C;&#x786E;&#x8BA4;&#x670D;&#x52A1;&#x7AEF;&#x4E0B;&#x53D1;&#x7684;&#x8BC1;&#x4E66;&#x662F;&#x7531;&#x53EF;&#x4FE1;&#x4EFB;&#x7684;&#x673A;&#x6784;&#x9881;&#x53D1;&#x7684;&#x3002;&#x5BA2;&#x6237;&#x7AEF;&#x9700;&#x8981;&#x68C0;&#x67E5;&#x8BC1;&#x4E66;&#x7684;domain&#x57DF;&#x548C;&#x6269;&#x5C55;&#x57DF;&#xFF0C;&#x770B;&#x662F;&#x5426;&#x5305;&#x542B;&#x672C;&#x6B21;&#x8BF7;&#x6C42;&#x7684;host&#x3002;&#x5982;&#x679C;&#x4E0A;&#x8FF0;&#x4E24;&#x70B9;&#x90FD;&#x6821;&#x9A8C;&#x901A;&#x8FC7;&#xFF0C;&#x5C31;&#x8BC1;&#x660E;&#x5F53;&#x524D;&#x7684;&#x670D;&#x52A1;&#x7AEF;&#x662F;&#x53EF;&#x4FE1;&#x4EFB;&#x7684;&#xFF0C;&#x5426;&#x5219;&#x5C31;&#x662F;&#x4E0D;&#x53EF;&#x4FE1;&#x4EFB;&#xFF0C;&#x5E94;&#x5F53;&#x4E2D;&#x65AD;&#x5F53;&#x524D;&#x8FDE;&#x63A5;&#x3002;&#x5173;&#x4E8E;Http/2.0HTTP/2 &#x8D44;&#x6599;&#x6C47;&#x603B;HTTP 2.0&#x7684;&#x90A3;&#x4E9B;&#x4E8B;&#x5173;&#x4E8E;HttpDNSHttpDNS&#x662F;&#x4F7F;&#x7528;HTTP&#x534F;&#x8BAE;&#x5411;DNS&#x670D;&#x52A1;&#x5668;&#x7684;80&#x7AEF;&#x53E3;&#x8FDB;&#x884C;&#x8BF7;&#x6C42;&#xFF0C;&#x4EE3;&#x66FF;&#x4F20;&#x7EDF;&#x7684;DNS&#x534F;&#x8BAE;&#x5411;DNS&#x670D;&#x52A1;&#x5668;&#x7684;53&#x7AEF;&#x53E3;&#x8FDB;&#x884C;&#x8BF7;&#x6C42;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x4F7F;&#x7528;Http&#x534F;&#x8BAE;&#x53BB;&#x8FDB;&#x884C;dns&#x89E3;&#x6790;&#x8BF7;&#x6C42;&#xFF0C;&#x5C06;&#x670D;&#x52A1;&#x5668;&#x8FD4;&#x56DE;&#x7684;&#x89E3;&#x6790;&#x7ED3;&#x679C;DnsList&#xFF0C;&#x5373;&#x57DF;&#x540D;&#x5BF9;&#x5E94;&#x7684;&#x670D;&#x52A1;&#x5668;ip&#x83B7;&#x5F97;&#xFF0C;&#x76F4;&#x63A5;&#x5411;&#x8BE5;ip&#x53D1;&#x8D77;&#x5BF9;&#x5E94;&#x7684;api&#x670D;&#x52A1;&#x8BF7;&#x6C42;&#xFF0C;&#x4EE3;&#x66FF;&#x4F7F;&#x7528;&#x57DF;&#x540D;&#x3002;HttpDNS&#x4E3B;&#x8981;&#x89E3;&#x51B3;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;&#x8FD0;&#x8425;&#x5546;&#x57DF;&#x540D;&#x52AB;&#x6301;DNS&#x89E3;&#x6790;0RTOkHttp&#x5BF9;Http/2.0&#x7684;&#x652F;&#x6301;OkHttp&#x5929;&#x7136;&#x652F;&#x6301;Http/2.0&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x8F83;&#x65B0;&#x7684;&#x7248;&#x672C;&#x4E2D;&#xFF0C;OkHttp&#x79FB;&#x9664;&#x4E86;&#x5BF9;NPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x7684;&#x652F;&#x6301;&#xFF0C;&#x8F6C;&#x800C;&#x53EA;&#x652F;&#x6301;ALPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x3002;&#x89C1;&#x63D0;&#x4EA4;&#x8BB0;&#x5F55; Remove NPN support from OkHttpNPN&#xFF08;Next Protocol Negotiation&#xFF0C;&#x4E0B;&#x4E00;&#x4EE3;&#x534F;&#x8BAE;&#x534F;&#x5546;&#xFF09;&#xFF0C;&#x662F;&#x4E00;&#x4E2A; TLS &#x6269;&#x5C55;&#xFF0C;&#x7531; Google &#x5728;&#x5F00;&#x53D1; SPDY &#x534F;&#x8BAE;&#x65F6;&#x63D0;&#x51FA;&#x3002;&#x968F;&#x7740; SPDY &#x88AB; HTTP/2 &#x53D6;&#x4EE3;&#xFF0C;NPN &#x4E5F;&#x88AB;&#x4FEE;&#x8BA2;&#x4E3A; ALPN&#xFF08;Application Layer Protocol Negotiation&#xFF0C;&#x5E94;&#x7528;&#x5C42;&#x534F;&#x8BAE;&#x534F;&#x5546;&#xFF09;&#x3002;&#x4E8C;&#x8005;&#x76EE;&#x6807;&#x4E00;&#x81F4;&#xFF0C;&#x4F46;&#x5B9E;&#x73B0;&#x7EC6;&#x8282;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x76F8;&#x4E92;&#x4E0D;&#x517C;&#x5BB9;&#x3002;&#x4EE5;&#x4E0B;&#x662F;&#x5B83;&#x4EEC;&#x4E3B;&#x8981;&#x5DEE;&#x522B;&#xFF1A;NPN &#x662F;&#x670D;&#x52A1;&#x7AEF;&#x53D1;&#x9001;&#x6240;&#x652F;&#x6301;&#x7684; HTTP &#x534F;&#x8BAE;&#x5217;&#x8868;&#xFF0C;&#x7531;&#x5BA2;&#x6237;&#x7AEF;&#x9009;&#x62E9;&#xFF1B;&#x800C; ALPN &#x662F;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x9001;&#x6240;&#x652F;&#x6301;&#x7684; HTTP &#x534F;&#x8BAE;&#x5217;&#x8868;&#xFF0C;&#x7531;&#x670D;&#x52A1;&#x7AEF;&#x9009;&#x62E9;&#xFF1B;NPN &#x7684;&#x534F;&#x5546;&#x7ED3;&#x679C;&#x662F;&#x5728; Change Cipher Spec &#x4E4B;&#x540E;&#x52A0;&#x5BC6;&#x53D1;&#x9001;&#x7ED9;&#x670D;&#x52A1;&#x7AEF;&#xFF1B;&#x800C; ALPN &#x7684;&#x534F;&#x5546;&#x7ED3;&#x679C;&#x662F;&#x901A;&#x8FC7; Server Hello &#x660E;&#x6587;&#x53D1;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF;&#xFF1B;&#x4F46;&#x662F;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#x573A;&#x666F;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x8FD8;&#x9700;&#x8981;&#x4F7F;&#x7528;NPN&#xFF1A;ALPN&#x53EA;&#x652F;&#x6301;Android 5.0&#x4EE5;&#x4E0A;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x5728;Android 5.0&#x4EE5;&#x4E0B;&#x652F;&#x6301;Http/2.0&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;NPN&#x7406;&#x8BBA;&#x4E0A;nginx&#x53EF;&#x4EE5;&#x5BF9;ALPN&#x548C;NPN&#x540C;&#x65F6;&#x652F;&#x6301;&#xFF0C;&#x4F46;&#x662F;&#x90E8;&#x5206;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x7684;&#x914D;&#x7F6E;&#x53EF;&#x80FD;&#x53EA;&#x652F;&#x6301;NPN&#xFF0C;&#x5E76;&#x4E14;&#x77ED;&#x65F6;&#x95F4;&#x5185;&#x4E0D;&#x4F1A;&#x652F;&#x6301;ALPN&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;NPN&#x5982;&#x679C;&#x8981;&#x68C0;&#x6D4B;&#x670D;&#x52A1;&#x5668;&#x662F;&#x5426;&#x652F;&#x6301;ALPN&#x6216;&#x8005;NPN&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6B64;&#x7F51;&#x7AD9;&#x8FDB;&#x884C;&#x68C0;&#x6D4B; https://www.ssllabs.com/ssltest/analyze.html&#x68C0;&#x6D4B;&#x6548;&#x679C;&#x5982;&#x4E0B;:&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528; https://tools.keycdn.com/http2-test &#x68C0;&#x6D4B;&#x662F;&#x5426;&#x652F;&#x6301;Http2.0&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x68C0;&#x6D4B;&#x53EA;&#x4F1A;&#x5F53;ALPN&#x652F;&#x6301;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x624D;&#x4F1A;&#x8BA4;&#x4E3A;&#x652F;&#x6301;Http2.0&#x6B64;&#x65F6;&#x7684;&#x68C0;&#x6D4B;&#x6548;&#x679C;&#x5982;&#x4E0B;:&#x51FA;&#x4E8E;&#x4EE5;&#x4E0A;&#x4E24;&#x4E2A;&#x539F;&#x56E0;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;Http/2.0&#x5C31;&#x65E0;&#x6CD5;&#x53D1;&#x6325;&#x4F5C;&#x7528;&#x4E86;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x6709;&#x5FC5;&#x8981;&#x5C06;OkHttp&#x8FD9;&#x90E8;&#x5206;&#x4EE3;&#x7801;&#x8FD8;&#x539F;&#xFF0C;&#x4E8E;&#x662F;&#x5BF9;OkHttp&#x8FDB;&#x884C;&#x4E86;&#x5B9A;&#x5236;&#xFF0C;&#x5B9A;&#x5236;&#x65B9;&#x5F0F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x6839;&#x636E;&#x5BF9;&#x5E94;&#x7684;&#x63D0;&#x4EA4;&#x8BB0;&#x5F55;&#xFF0C;&#x628A;&#x79FB;&#x9664;&#x7684;&#x4EE3;&#x7801;&#x8FDB;&#x884C;&#x8FD8;&#x539F;&#x5373;&#x53EF;&#x3002;&#x6539;&#x9020;&#x7684;&#x4EE3;&#x7801;&#x5168;&#x90E8;&#x4F4D;&#x4E8E;okhttp3.internal.Platform&#x8FD9;&#x4E2A;&#x7C7B;&#x4E2D;&#xFF0C;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x6539;&#x9020;&#x5F71;&#x54CD;&#x539F;&#x6709;&#x903B;&#x8F91;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x8FD9;&#x4E2A;&#x7C7B;&#x4E2D;&#x52A0;&#x5165;&#x4E00;&#x4E2A;enableNPN&#x7684;&#x5F00;&#x5173;&#xFF0C;&#x5F53;&#x5F00;&#x5173;&#x5173;&#x95ED;&#x65F6;&#xFF0C;&#x903B;&#x8F91;&#x4E0D;&#x53D1;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x5F53;&#x5F00;&#x5173;&#x6253;&#x5F00;&#x65F6;&#xFF0C;NPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x4F1A;&#x5728;ALPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x4E0D;&#x652F;&#x6301;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x751F;&#x6548;&#xFF0C;&#x4F18;&#x5148;&#x4F7F;&#x7528;ALPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x3002;&#x9ED8;&#x8BA4;&#x5F00;&#x5173;&#x5F00;&#x542F;&#x3002;1234567public class Platform { //...... //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start public static boolean enableNPN = true; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end //......}&#x63A5;&#x7740;&#x5728;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x4E2D;&#x52A0;&#x5165;&#x4E24;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF0C;&#x53C2;&#x8003;getAlpnSelectedProtocol&#x548C;setAlpnProtocols&#xFF0C;&#x52A0;&#x5165;getNpnSelectedProtocol&#x548C;setNpnProtocols&#x53D8;&#x91CF;123456789101112/** Android 2.3 or better. */private static class Android extends Platform { // Non-null on Android 5.0+. private final OptionalMethod&lt;Socket&gt; getAlpnSelectedProtocol; private final OptionalMethod&lt;Socket&gt; setAlpnProtocols; // &#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start // Non-null on Android 4.1+. private final OptionalMethod&lt;Socket&gt; getNpnSelectedProtocol; private final OptionalMethod&lt;Socket&gt; setNpnProtocols; // &#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end}&#x540C;&#x65F6;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x589E;&#x52A0;&#x8FD9;&#x4E24;&#x4E2A;&#x5165;&#x53C2;&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x8D4B;&#x503C;1234567891011121314public Android(Class&lt;?&gt; sslParametersClass, OptionalMethod&lt;Socket&gt; setUseSessionTickets, OptionalMethod&lt;Socket&gt; setHostname, OptionalMethod&lt;Socket&gt; getAlpnSelectedProtocol, OptionalMethod&lt;Socket&gt; setAlpnProtocols, OptionalMethod&lt;Socket&gt; getNpnSelectedProtocol, OptionalMethod&lt;Socket&gt; setNpnProtocols) { this.sslParametersClass = sslParametersClass; this.setUseSessionTickets = setUseSessionTickets; this.setHostname = setHostname; this.getAlpnSelectedProtocol = getAlpnSelectedProtocol; this.setAlpnProtocols = setAlpnProtocols; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start this.getNpnSelectedProtocol = getNpnSelectedProtocol; this.setNpnProtocols = setNpnProtocols; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end}&#x4FEE;&#x6539;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x4E2D;configureTlsExtensions&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x914D;&#x7F6E;SSLSocket&#x5BF9;&#x8C61;&#xFF0C;&#x5F00;&#x542F;&#x5176;NPN&#x76F8;&#x5173;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x6CE8;&#x610F;NPN&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;enableNPN&#x5F00;&#x5173;&#x7684;&#x6761;&#x4EF6;1234567891011121314151617181920212223public void configureTlsExtensions( SSLSocket sslSocket, String hostname, List&lt;Protocol&gt; protocols) { // Enable SNI and session tickets. if (hostname != null) { setUseSessionTickets.invokeOptionalWithoutCheckedException(sslSocket, true); setHostname.invokeOptionalWithoutCheckedException(sslSocket, hostname); } // Enable ALPN. if (setAlpnProtocols != null &amp;&amp; setAlpnProtocols.isSupported(sslSocket)) { Object[] parameters = {concatLengthPrefixed(protocols)}; setAlpnProtocols.invokeWithoutCheckedException(sslSocket, parameters); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start // Enbale NPN. if (enableNPN &amp;&amp; setNpnProtocols != null &amp;&amp; setNpnProtocols.isSupported(sslSocket)) { Object[] parameters = {concatLengthPrefixed(protocols)}; setNpnProtocols.invokeWithoutCheckedException(sslSocket, parameters); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end}&#x4FEE;&#x6539;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x4E2D;getSelectedProtocol&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD4;&#x56DE;&#x9009;&#x62E9;&#x7684;&#x534F;&#x8BAE;&#xFF0C;&#x6CE8;&#x610F;NPN&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;enableNPN&#x5F00;&#x5173;&#x7684;&#x6761;&#x4EF6;123456789101112131415161718192021222324252627282930@Override public String getSelectedProtocol(SSLSocket socket) { boolean alpnSupported = ((getAlpnSelectedProtocol != null) &amp;&amp; (getAlpnSelectedProtocol.isSupported(socket))); boolean npnSupported = ((getNpnSelectedProtocol != null) &amp;&amp; (getNpnSelectedProtocol.isSupported(socket))); if (!(alpnSupported || npnSupported)) { return null; } // if support alpn ,returen it. if (alpnSupported) { byte[] alpnResult = (byte[]) getAlpnSelectedProtocol.invokeWithoutCheckedException(socket); if (alpnResult != null) { return new String(alpnResult, Util.UTF_8); } } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start // don&apos;t support alpn,try npn. if (enableNPN &amp;&amp; npnSupported) { byte[] npnResult = (byte[]) getNpnSelectedProtocol.invokeWithoutCheckedException(socket); if (npnResult != null) { return new String(npnResult, Util.UTF_8); } } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end return null;}&#x800C;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x4F20;&#x5165;&#x7684;&#x5165;&#x53C2;&#x5219;&#x662F;&#x7531;Platform.findPlatform&#x51FD;&#x6570;&#x4E2D;&#x53CD;&#x5C04;&#x5F97;&#x5230;&#x7684;&#xFF0C;12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** Attempt to match the host runtime to a capable Platform implementation. */ private static Platform findPlatform() { // Attempt to find Android 2.3+ APIs. try { //.......some codes //alpn support OptionalMethod&lt;Socket&gt; getAlpnSelectedProtocol = null; OptionalMethod&lt;Socket&gt; setAlpnProtocols = null; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //npn support OptionalMethod&lt;Socket&gt; getNpnSelectedProtocol = null; OptionalMethod&lt;Socket&gt; setNpnProtocols = null ; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end // Attempt to find Android 5.0+ APIs. try { Class.forName(&quot;android.net.Network&quot;); // Arbitrary class added in Android 5.0. getAlpnSelectedProtocol = new OptionalMethod&lt;&gt;(byte[].class, &quot;getAlpnSelectedProtocol&quot;); setAlpnProtocols = new OptionalMethod&lt;&gt;(null, &quot;setAlpnProtocols&quot;, byte[].class); } catch (ClassNotFoundException ignored) { } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //to make NPN Support try { getNpnSelectedProtocol = new OptionalMethod&lt;Socket&gt;(byte[].class, &quot;getNpnSelectedProtocol&quot;); setNpnProtocols = new OptionalMethod&lt;Socket&gt;(null, &quot;setNpnProtocols&quot;, byte[].class); } catch (Exception e) { //ignore } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end //&#x4F20;&#x5165;getNpnSelectedProtocol&#x548C;setNpnProtocols return new Android(sslParametersClass, setUseSessionTickets, setHostname, getAlpnSelectedProtocol, setAlpnProtocols, getNpnSelectedProtocol, setNpnProtocols); } catch (ClassNotFoundException ignored) { // This isn&apos;t an Android runtime. } //...... // Probably an Oracle JDK like OpenJDK. return new Platform();}&#x68C0;&#x6D4B;&#x5BA2;&#x6237;&#x7AEF;&#x4F7F;&#x7528;&#x7684;Http&#x534F;&#x8BAE;&#x5982;&#x679C;&#x901A;&#x8FC7;&#x8089;&#x773C;&#x67E5;&#x770B;&#xFF0C;&#x57FA;&#x672C;&#x4E0A;&#x4E0D;&#x53EF;&#x80FD;&#x77E5;&#x9053;&#x5F53;&#x524D;&#x7684;&#x8BF7;&#x6C42;&#x662F;Http/2.0&#x8FD8;&#x662F;Http/1.1&#x6216;&#x8005;&#x8BF4;&#x662F;SPDY/3.1&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;nginx&#x7684;&#x65E5;&#x5FD7;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x662F;&#x4EC0;&#x4E48;&#x534F;&#x8BAE;&#xFF0C;&#x5982;&#x4E0B;:&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x7684;&#x76EE;&#x7684;&#x4E0D;&#x662F;&#x901A;&#x8FC7;nginx&#x65E5;&#x5FD7;&#x6765;&#x770B;&#xFF0C;&#x800C;&#x662F;&#x901A;&#x8FC7;logcat&#x65E5;&#x5FD7;&#x6765;&#x770B;&#xFF0C;&#x90A3;&#x4E48;OkHttp&#x4E2D;&#x6709;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x65B9;&#x6CD5;&#x6765;&#x83B7;&#x5F97;&#x5F53;&#x524D;&#x8BF7;&#x6C42;&#x7684;&#x534F;&#x8BAE;&#x5462;&#xFF0C;&#x5176;&#x5B9E;&#x662F;&#x6709;&#x7684;&#xFF0C;&#x5728;&#x62E6;&#x622A;&#x5668;&#x4E2D;&#x5C31;&#x53EF;&#x4EE5;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x5B98;&#x65B9;&#x7684;logging-interceptor&#x6A21;&#x5757;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x52A0;&#x5165;&#x534F;&#x8BAE;&#x7684;&#x65E5;&#x5FD7;&#x3002;&#x5176;&#x5B9E;&#x5728;HttpLoggingInterceptor&#x4E2D;&#xFF0C;&#x5DF2;&#x7ECF;&#x6709;&#x534F;&#x8BAE;&#x76F8;&#x5173;&#x7684;&#x65E5;&#x5FD7;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x8BE5;&#x65E5;&#x5FD7;&#x5E76;&#x4E0D;&#x51C6;&#x786E;&#xFF0C;&#x5373;&#x4F7F;&#x5728;Http/2.0&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD4;&#x56DE;&#x7684;&#x4E5F;&#x662F;Http/1.1,&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x66F4;&#x52A0;&#x51C6;&#x786E;&#x7684;&#x65B9;&#x5F0F;&#x6253;&#x5370;&#x8FD9;&#x4E2A;&#x534F;&#x8BAE;&#xFF0C;&#x5728;HttpLoggingInterceptor&#x5408;&#x9002;&#x7684;&#x5730;&#x65B9;(&#x8FD4;&#x56DE;response&#x7684;&#x5730;&#x65B9;)&#xFF0C;&#x52A0;&#x5165;&#x4E0B;&#x9762;&#x4E24;&#x884C;&#x4EE3;&#x7801;&#x5373;&#x53EF;&#xFF1A;12Protocol responseProtocol = response.protocol();logger.log(&quot;&lt;-- &quot; +&quot;responseProtocol:&quot;+responseProtocol);&#x6B64;&#x65F6;&#x4F1A;&#x5728;reponse&#x8FD4;&#x56DE;&#x7684;&#x65F6;&#x5019;&#x6253;&#x5370;&#x5BF9;&#x5E94;&#x7684;&#x534F;&#x8BAE;&#x65E5;&#x5FD7;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A;OkHttp&#x4F7F;&#x7528;HttpDNS&#x7684;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;Android&#x4F7F;&#x7528;OkHttp&#x652F;&#x6301;HttpDNS&#xFF08;&#x62E6;&#x622A;&#x5668;&#xFF09;Android OkHttp&#x5B9E;&#x73B0;HttpDns&#x7684;&#x6700;&#x4F73;&#x5B9E;&#x8DF5;&#xFF08;&#x975E;&#x62E6;&#x622A;&#x5668;,Dns&#x63A5;&#x53E3;&#xFF09;&#x8FD9;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x5404;&#x6709;&#x4F18;&#x7F3A;&#x70B9;&#xFF0C;&#x4F7F;&#x7528;Dns&#x63A5;&#x53E3;&#x65B9;&#x5F0F;&#x8FC7;&#x4E8E;&#x5E95;&#x5C42;&#xFF0C;&#x5F02;&#x5E38;&#x4E0D;&#x5BB9;&#x6613;&#x63A7;&#x5236;&#xFF0C;&#x4E0A;&#x5C42;&#x65E0;&#x611F;&#x77E5;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x5341;&#x5206;&#x7CBE;&#x786E;&#x7684;&#x63A7;&#x5236;&#x5F02;&#x5E38;&#xFF0C;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;&#x62E6;&#x622A;&#x5668;&#x65B9;&#x5F0F;&#xFF0C;&#x800C;&#x4F7F;&#x7528;&#x62E6;&#x622A;&#x5668;&#x65B9;&#x5F0F;&#x4E3B;&#x8981;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x4E24;&#x6B65;&#x64CD;&#x4F5C;&#x5BF9;url&#x4E2D;&#x7684;host&#x8FDB;&#x884C;&#x66FF;&#x6362;&#xFF0C;&#x5C06;&#x57DF;&#x540D;&#x66FF;&#x6362;&#x4E3A;ip&#x6DFB;&#x52A0;header&#x8BF7;&#x6C42;&#x5934;&#xFF0C;&#x503C;&#x4E3A;&#x66FF;&#x6362;&#x524D;&#x7684;&#x57DF;&#x540D;&#x5728;Http&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x4E0D;&#x5B58;&#x5728;&#x4EFB;&#x4F55;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x5728;Https&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x9700;&#x8981;&#x4FEE;&#x6539;OkHttp&#x7684;&#x76F8;&#x5173;&#x4EE3;&#x7801;&#xFF0C;&#x89E3;&#x51B3;&#x76F8;&#x5173;&#x95EE;&#x9898;&#xFF0C;&#x5177;&#x4F53;&#x95EE;&#x9898;&#x4E0B;&#x6587;&#x7EC6;&#x8BF4;&#x3002;Https&#x4E0B;&#x4F7F;&#x7528;HttpDNS&#x8BC1;&#x4E66;&#x6821;&#x9A8C;&#x95EE;&#x9898;&#x5728;okhttp3.internal.io.RealConnection&#x7C7B;&#x4E2D;&#x6709;&#x4E2A;&#x65B9;&#x6CD5;&#x53EB;connectTls&#xFF0C;&#x91CC;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263private void connectTls(int readTimeout, int writeTimeout, ConnectionSpecSelector connectionSpecSelector) throws IOException { if (route.requiresTunnel()) { createTunnel(readTimeout, writeTimeout); } Address address = route.address(); SSLSocketFactory sslSocketFactory = address.sslSocketFactory(); boolean success = false; SSLSocket sslSocket = null; try { // Create the wrapper over the connected socket. sslSocket = (SSLSocket) sslSocketFactory.createSocket( rawSocket, address.url().host(), address.url().port(), true /* autoClose */); // Configure the socket&apos;s ciphers, TLS versions, and extensions. ConnectionSpec connectionSpec = connectionSpecSelector.configureSecureSocket(sslSocket); if (connectionSpec.supportsTlsExtensions()) { Platform.get().configureTlsExtensions( sslSocket, address.url().host(), address.protocols()); } // Force handshake. This can throw! sslSocket.startHandshake(); Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession()); // Verify that the socket&apos;s certificates are acceptable for the target host. if (!address.hostnameVerifier().verify(address.url().host(), sslSocket.getSession())) { X509Certificate cert = (X509Certificate) unverifiedHandshake.peerCertificates().get(0); throw new SSLPeerUnverifiedException(&quot;Hostname &quot; + address.url().host() + &quot; not verified:&quot; + &quot;\n certificate: &quot; + CertificatePinner.pin(cert) + &quot;\n DN: &quot; + cert.getSubjectDN().getName() + &quot;\n subjectAltNames: &quot; + OkHostnameVerifier.allSubjectAltNames(cert)); } // Check that the certificate pinner is satisfied by the certificates presented. address.certificatePinner().check(address.url().host(), unverifiedHandshake.peerCertificates()); // Success! Save the handshake and the ALPN protocol. String maybeProtocol = connectionSpec.supportsTlsExtensions() ? Platform.get().getSelectedProtocol(sslSocket) : null; socket = sslSocket; source = Okio.buffer(Okio.source(socket)); sink = Okio.buffer(Okio.sink(socket)); handshake = unverifiedHandshake; protocol = maybeProtocol != null ? Protocol.get(maybeProtocol) : Protocol.HTTP_1_1; success = true; } catch (AssertionError e) { if (Util.isAndroidGetsocknameError(e)) throw new IOException(e); throw e; } finally { if (sslSocket != null) { Platform.get().afterHandshake(sslSocket); } if (!success) { closeQuietly(sslSocket); } } }&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x8C03;&#x7528;Platform.get().configureTlsExtensions()&#x914D;&#x7F6E;SSLSocket&#x5BF9;&#x8C61;&#xFF0C;&#x8FD8;&#x662F;address.hostnameVerifier().verify()&#x8FDB;&#x884C;&#x8BC1;&#x4E66;&#x6821;&#x9A8C;&#xFF0C;&#x4EE5;&#x53CA;address.certificatePinner().check()&#x4E2D;&#xFF0C;&#x4F20;&#x5165;&#x7684;host&#x90FD;&#x662F;address.url().host()&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x503C;&#x5374;&#x6070;&#x6070;&#x662F;&#x6211;&#x4EEC;&#x66FF;&#x6362;&#x4E86;url&#x4E2D;&#x7684;&#x57DF;&#x540D;&#x4E3A;ip&#x7684;host&#xFF0C;&#x6240;&#x4EE5;&#x6B64;&#x65F6;&#x62FF;&#x5230;&#x7684;&#x503C;&#x4E3A;ip&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#xFF0C;&#x5E26;&#x6765;&#x4E86;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;&#x5F53;&#x5BA2;&#x6237;&#x7AEF;&#x4F7F;&#x7528;HttpDNS&#x65F6;&#xFF0C;&#x8BF7;&#x6C42;URL&#x4E2D;&#x7684;host&#x4F1A;&#x88AB;&#x66FF;&#x6362;&#x6210;HttpDNS&#x89E3;&#x6790;&#x51FA;&#x6765;&#x7684;ip&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x8BC1;&#x4E66;&#x9A8C;&#x8BC1;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;domain&#x4E0D;&#x5339;&#x914D;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5BFC;&#x81F4;SSL/TLS&#x63E1;&#x624B;&#x4E0D;&#x6210;&#x529F;&#x3002;&#x5728;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x5B58;&#x5728;&#x591A;&#x5F20;&#x8BC1;&#x4E66;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4F1A;&#x5B58;&#x5728;&#x95EE;&#x9898;&#x800C;&#x5BF9;&#x4E8E;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x5B58;&#x5728;&#x591A;&#x5F20;&#x8BC1;&#x4E66;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x4F1A;&#x5B58;&#x5728;&#x95EE;&#x9898;&#x5462;&#xFF0C;&#x8FD9;&#x91CC;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;&#xFF0C;&#x53EB;SNISNI&#xFF08;Server Name Indication&#xFF09;&#x662F;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x4E00;&#x4E2A;&#x670D;&#x52A1;&#x5668;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x57DF;&#x540D;&#x548C;&#x8BC1;&#x4E66;&#x7684;SSL/TLS&#x6269;&#x5C55;&#x3002;&#x5B83;&#x7684;&#x5DE5;&#x4F5C;&#x539F;&#x7406;&#x5982;&#x4E0B;&#xFF1A;&#x5728;&#x8FDE;&#x63A5;&#x5230;&#x670D;&#x52A1;&#x5668;&#x5EFA;&#x7ACB;SSL&#x94FE;&#x63A5;&#x4E4B;&#x524D;&#x5148;&#x53D1;&#x9001;&#x8981;&#x8BBF;&#x95EE;&#x7AD9;&#x70B9;&#x7684;&#x57DF;&#x540D;&#xFF08;Hostname&#xFF09;&#x3002;&#x670D;&#x52A1;&#x5668;&#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x57DF;&#x540D;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5408;&#x9002;&#x7684;&#x8BC1;&#x4E66;&#x3002;&#x76EE;&#x524D;&#xFF0C;&#x5927;&#x591A;&#x6570;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x548C;&#x6D4F;&#x89C8;&#x5668;&#x90FD;&#x5DF2;&#x7ECF;&#x5F88;&#x597D;&#x5730;&#x652F;&#x6301;SNI&#x6269;&#x5C55;&#xFF0C;OpenSSL 0.9.8&#x4E5F;&#x5DF2;&#x7ECF;&#x5185;&#x7F6E;&#x8FD9;&#x4E00;&#x529F;&#x80FD;&#x3002;&#x4E0A;&#x8FF0;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5F53;&#x5BA2;&#x6237;&#x7AEF;&#x4F7F;&#x7528;HttpDNS&#x65F6;&#xFF0C;&#x8BF7;&#x6C42;URL&#x4E2D;&#x7684;Host&#x4F1A;&#x88AB;&#x66FF;&#x6362;&#x6210;HttpDNS&#x89E3;&#x6790;&#x51FA;&#x6765;&#x7684;IP&#xFF0C;&#x5BFC;&#x81F4;&#x670D;&#x52A1;&#x5668;&#x83B7;&#x53D6;&#x5230;&#x7684;&#x57DF;&#x540D;&#x4E3A;&#x89E3;&#x6790;&#x540E;&#x7684;IP&#xFF0C;&#x65E0;&#x6CD5;&#x627E;&#x5230;&#x5339;&#x914D;&#x7684;&#x8BC1;&#x4E66;&#xFF0C;&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x9ED8;&#x8BA4;&#x7684;&#x8BC1;&#x4E66;&#x6216;&#x8005;&#x4E0D;&#x8FD4;&#x56DE;&#xFF0C;&#x6240;&#x4EE5;&#x4F1A;&#x51FA;&#x73B0;SSL/TLS&#x63E1;&#x624B;&#x4E0D;&#x6210;&#x529F;&#x7684;&#x9519;&#x8BEF;&#x3002;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x4E00;&#x4E2A;&#x573A;&#x666F;&#x5C31;&#x662F;&#xFF1A;&#x6BD4;&#x5982;&#x5F53;&#x4F60;&#x9700;&#x8981;&#x901A;&#x8FC7;https&#x8BBF;&#x95EE;CDN&#x8D44;&#x6E90;&#x65F6;&#xFF0C;CDN&#x7684;&#x7AD9;&#x70B9;&#x5F80;&#x5F80;&#x670D;&#x52A1;&#x4E86;&#x5F88;&#x591A;&#x7684;&#x57DF;&#x540D;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x901A;&#x8FC7;SNI&#x6307;&#x5B9A;&#x5177;&#x4F53;&#x7684;&#x57DF;&#x540D;&#x8BC1;&#x4E66;&#x8FDB;&#x884C;&#x901A;&#x4FE1;&#x3002;&#x5176;&#x5B9E;OkHttp&#x662F;&#x652F;&#x6301;SNI&#x7684;&#xFF0C;&#x5728;Platform.configureTlsExtensions&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x8BBE;&#x7F6E;&#x4E86;SNI&#xFF0C;&#x53EA;&#x662F;&#x4F20;&#x5165;&#x7684;Host&#x53D8;&#x6210;&#x4E86;ip&#xFF0C;&#x6240;&#x4EE5;&#x5BFC;&#x81F4;&#x4E86;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;123456789public void configureTlsExtensions( SSLSocket sslSocket, String hostname, List&lt;Protocol&gt; protocols) { // Enable SNI and session tickets. if (hostname != null) { setUseSessionTickets.invokeOptionalWithoutCheckedException(sslSocket, true); setHostname.invokeOptionalWithoutCheckedException(sslSocket, hostname); } //......}&#x8FD9;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#x5F52;&#x6839;&#x5230;&#x5E95;&#x90FD;&#x662F;&#x66FF;&#x6362;&#x4E86;Host&#x6240;&#x9020;&#x6210;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD8;&#x662F;&#x9700;&#x8981;&#x5BF9;OkHttp&#x5F00;&#x5200;&#xFF0C;&#x4FEE;&#x6539;&#x6E90;&#x7801;&#x3002;&#x5728;okhttp3.internal.http.HttpEngine&#x4E2D;&#x627E;&#x5230;createAddress&#x65B9;&#x6CD5;&#xFF0C;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x5165;&#x53C2;&#xFF0C;&#x4F20;&#x5165;request.url().host()&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x4F20;&#x5165;request.header(&#x201C;host&#x201D;)123456789private static Address createAddress(OkHttpClient client, Request request) { //......some codes return new Address(request.url().host(), request.header(&quot;host&quot;), request.url().port(), client.dns(), client.socketFactory(), sslSocketFactory, hostnameVerifier, certificatePinner, client.proxyAuthenticator(), client.proxy(), client.protocols(), client.connectionSpecs(), client.proxySelector()); }&#x5728;Address&#x4E2D;&#x589E;&#x52A0;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x548C;&#x6210;&#x5458;&#x65B9;&#x6CD5;123456public final class Address { final String headerHost; public String host() { return headerHost; }}&#x5176;&#x4E2D;headerHost&#x7684;&#x503C;&#x901A;&#x8FC7;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x589E;&#x52A0;&#x7684;&#x53D8;&#x91CF;&#x5F97;&#x5230;12345678910public Address(String uriHost, String headerHost, int uriPort, Dns dns, SocketFactory socketFactory, SSLSocketFactory sslSocketFactory, HostnameVerifier hostnameVerifier, CertificatePinner certificatePinner, Authenticator proxyAuthenticator, Proxy proxy, List&lt;Protocol&gt; protocols, List&lt;ConnectionSpec&gt; connectionSpecs, ProxySelector proxySelector) { //.......some codes this.headerHost = headerHost; //.......some codes }&#x56DE;&#x5230;okhttp3.internal.io.RealConnection&#x4E2D;&#x7684;connectTls&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x5C06;&#x8BC1;&#x4E66;&#x9A8C;&#x8BC1;&#xFF0C;&#x8BBE;&#x7F6E;SNI&#x7684;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;&#x4FEE;&#x6539;&#x539F;&#x5219;&#x4E3A;&#xFF1A;&#x5F53;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#x5B58;&#x5728;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#xFF0C;&#x5F53;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#x4E0D;&#x5B58;&#x5728;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;url&#x4E2D;&#x7684;host&#xFF0C;&#x4F46;&#x662F;&#x8FDE;&#x63A5;&#x65F6;&#x4F7F;&#x7528;&#x7684;&#x4F9D;&#x7136;&#x662F;url&#x4E2D;&#x7684;host&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5B58;&#x5728;httpdns&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F7F;&#x7528;&#x7684;&#x662F;ip&#x76F4;&#x8FDE;&#x3002;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172private void connectTls(int readTimeout, int writeTimeout, ConnectionSpecSelector connectionSpecSelector) throws IOException { if (route.requiresTunnel()) { createTunnel(readTimeout, writeTimeout); } Address address = route.address(); SSLSocketFactory sslSocketFactory = address.sslSocketFactory(); boolean success = false; SSLSocket sslSocket = null; try { // Create the wrapper over the connected socket. sslSocket = (SSLSocket) sslSocketFactory.createSocket( rawSocket, address.url().host(), address.url().port(), true /* autoClose */); //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //&#x83B7;&#x53D6;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host String host = address.host(); if (host == null || host.length() == 0) { //&#x5982;&#x679C;&#x8BF7;&#x6C42;&#x4E2D;&#x7684;host&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x4F7F;&#x7528;url&#x4E2D;&#x7684;host host = address.url().host(); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end // Configure the socket&apos;s ciphers, TLS versions, and extensions. ConnectionSpec connectionSpec = connectionSpecSelector.configureSecureSocket(sslSocket); if (connectionSpec.supportsTlsExtensions()) { //&#x8BBE;&#x7F6E;SNI&#x65F6;&#x4F20;&#x5165;&#x7684;host&#x6B64;&#x65F6;&#x4E0D;&#x518D;&#x662F;ip Platform.get().configureTlsExtensions( sslSocket, host, address.protocols()); } // Force handshake. This can throw! sslSocket.startHandshake(); Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession()); // &#x6821;&#x9A8C;&#x65F6;&#x4F20;&#x5165;&#x7684;host&#x6B64;&#x65F6;&#x4E0D;&#x518D;&#x662F;ip // Verify that the socket&apos;s certificates are acceptable for the target host. if (!address.hostnameVerifier().verify(host, sslSocket.getSession())) { X509Certificate cert = (X509Certificate) unverifiedHandshake.peerCertificates().get(0); throw new SSLPeerUnverifiedException(&quot;Hostname &quot; + host + &quot; not verified:&quot; + &quot;\n certificate: &quot; + CertificatePinner.pin(cert) + &quot;\n DN: &quot; + cert.getSubjectDN().getName() + &quot;\n subjectAltNames: &quot; + OkHostnameVerifier.allSubjectAltNames(cert)); } // Check that the certificate pinner is satisfied by the certificates presented. address.certificatePinner().check(host, unverifiedHandshake.peerCertificates()); // Success! Save the handshake and the ALPN protocol. String maybeProtocol = connectionSpec.supportsTlsExtensions() ? Platform.get().getSelectedProtocol(sslSocket) : null; socket = sslSocket; source = Okio.buffer(Okio.source(socket)); sink = Okio.buffer(Okio.sink(socket)); handshake = unverifiedHandshake; protocol = maybeProtocol != null ? Protocol.get(maybeProtocol) : Protocol.HTTP_1_1; success = true; } catch (AssertionError e) { if (Util.isAndroidGetsocknameError(e)) throw new IOException(e); throw e; } finally { if (sslSocket != null) { Platform.get().afterHandshake(sslSocket); } if (!success) { closeQuietly(sslSocket); } } }&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x8FD8;&#x6709;&#x53E6;&#x4E00;&#x4E2A;&#x89E3;&#x51B3;&#x65B9;&#x5F0F;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;OkHttp&#x7684;Dns&#x63A5;&#x53E3;&#x5B9E;&#x73B0;HttpDns&#xFF0C;&#x4E8E;&#x662F;&#x6574;&#x4E2A;&#x4E16;&#x754C;&#x5E73;&#x9759;&#x4E86;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x8FD9;&#x4E48;&#x8BF4;&#x5462;&#xFF0C;&#x89C1;&#x4E0B;&#x6587;&#x3002;Http/2.0 &amp;&amp; SPDY/3.1 &#x4E0E;HttpDNS&#x5F53;&#x4F60;&#x5929;&#x771F;&#x7684;&#x4EE5;&#x4E3A;&#x8FD9;&#x6837;&#x89E3;&#x51B3;&#x4E86;&#x95EE;&#x9898;&#x4E4B;&#x540E;&#xFF0C;&#x90A3;&#x4F60;&#x5C31;&#x5927;&#x9519;&#x7279;&#x9519;&#x4E86;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x4E0A;&#x9762;&#x8BF4;&#x7684;&#xFF0C;&#x76F4;&#x63A5;&#x901A;&#x8FC7;OkHttp&#x7684;Dns&#x63A5;&#x53E3;&#x5B9E;&#x73B0;HttpDns&#x4E00;&#x4E86;&#x767E;&#x4E86;&#x7684;&#x539F;&#x56E0;&#x4E86;&#x3002;&#x5728;SPDY&#x548C;Http2.0&#x4E2D;&#xFF0C;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#x5DF2;&#x4E0D;&#x518D;&#x662F;Http1.1&#x65F6;&#x4EE3;&#x7684;host&#x4E86;&#xFF0C;&#x901A;&#x8FC7;&#x67E5;&#x770B;&#x534F;&#x8BAE;&#x6587;&#x6863; https://tools.ietf.org/html/draft-ietf-httpbis-http2-09#section-8.1.3&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5728;Http2.0&#x4E2D;&#x4F7F;&#x7528;:authority&#x8BF7;&#x6C42;&#x5934;&#x4EE3;&#x66FF;Http1.1&#x4E2D;&#x7684;host&#x9898;&#x5916;&#x8BDD;&#xFF0C;&#x5728;Http2.0&#x4E2D;&#xFF0C;&#x6240;&#x6709;&#x8BF7;&#x6C42;&#x5934;&#x5168;&#x90E8;&#x53D8;&#x6210;&#x5C0F;&#x5199;&#xFF0C;&#x5927;&#x5199;&#x7684;&#x8BF7;&#x6C42;&#x5934;&#x662F;&#x4E0D;&#x7B26;&#x5408;&#x89C4;&#x8303;&#x7684;&#x3002;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x5BFC;&#x81F4;&#x7684;&#x76F4;&#x63A5;&#x7ED3;&#x679C;&#x5C31;&#x662F;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x62FF;&#x5230;&#x7684;host&#x662F;ip&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x57DF;&#x540D;&#xFF0C;&#x5982;&#x679C;&#x670D;&#x52A1;&#x5668;&#x5BF9;host&#x8FDB;&#x884C;&#x6821;&#x9A8C;&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x80FD;&#x5C31;&#x4F1A;&#x51FA;&#x95EE;&#x9898;&#x3002;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x8BE5;&#x600E;&#x4E48;&#x89E3;&#x51B3;&#x5462;&#xFF1F;&#x540C;&#x6837;&#x9700;&#x8981;&#x5BF9;OkHttp&#x5F00;&#x5200;&#x3002;&#x4FEE;&#x6539;okhttp3.internal.http.Http2xStream&#x4E2D;&#x7684;spdy3HeadersList&#x4EE5;&#x53CA;http2HeadersList&#x65B9;&#x6CD5;&#xFF0C;&#x5C06;&#x5BF9;&#x5E94;&#x8BF7;&#x6C42;&#x5934;&#x7684;&#x503C;&#x8BBE;&#x4E3A;&#x57DF;&#x540D;&#x5373;&#x53EF;&#x3002;1234567891011121314151617181920212223242526272829303132333435363738394041424344public static List&lt;Header&gt; spdy3HeadersList(Request request) { Headers headers = request.headers(); //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //&#x5148;&#x53D6;header&#x4E2D;&#x7684;host String host = request.header(&quot;host&quot;); if (host == null || host.length() == 0) { //&#x6CA1;&#x6709;&#x5219;&#x4F7F;&#x7528;&#x539F;&#x59CB;&#x7684;request.url() host = Util.hostHeader(request.url(), false); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end List&lt;Header&gt; result = new ArrayList&lt;&gt;(headers.size() + 5); result.add(new Header(TARGET_METHOD, request.method())); result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url()))); result.add(new Header(VERSION, &quot;HTTP/1.1&quot;)); //&#x4FEE;&#x6539;&#x4E3A;host&#x53D8;&#x91CF; result.add(new Header(TARGET_HOST, host)); result.add(new Header(TARGET_SCHEME, request.url().scheme())); Set&lt;ByteString&gt; names = new LinkedHashSet&lt;&gt;(); for (int i = 0, size = headers.size(); i &lt; size; i++) { // header names must be lowercase. ByteString name = ByteString.encodeUtf8(headers.name(i).toLowerCase(Locale.US)); // Drop headers that are forbidden when layering HTTP over SPDY. if (SPDY_3_SKIPPED_REQUEST_HEADERS.contains(name)) continue; // If we haven&apos;t seen this name before, add the pair to the end of the list... String value = headers.value(i); if (names.add(name)) { result.add(new Header(name, value)); continue; } // ...otherwise concatenate the existing values and this value. for (int j = 0; j &lt; result.size(); j++) { if (result.get(j).name.equals(name)) { String concatenated = joinOnNull(result.get(j).value.utf8(), value); result.set(j, new Header(name, concatenated)); break; } } } return result; }1234567891011121314151617181920212223242526public static List&lt;Header&gt; http2HeadersList(Request request) { Headers headers = request.headers(); //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //&#x5148;&#x53D6;header&#x4E2D;&#x7684;host String host = request.header(&quot;host&quot;); if (host == null || host.length() == 0) { //&#x6CA1;&#x6709;&#x5219;&#x4F7F;&#x7528;&#x539F;&#x59CB;&#x7684;request.url() host = Util.hostHeader(request.url(), false); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end List&lt;Header&gt; result = new ArrayList&lt;&gt;(headers.size() + 4); result.add(new Header(TARGET_METHOD, request.method())); result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url()))); //&#x4FEE;&#x6539;&#x4E3A;host&#x53D8;&#x91CF; result.add(new Header(TARGET_AUTHORITY, host)); // Optional. result.add(new Header(TARGET_SCHEME, request.url().scheme())); for (int i = 0, size = headers.size(); i &lt; size; i++) { // header names must be lowercase. ByteString name = ByteString.encodeUtf8(headers.name(i).toLowerCase(Locale.US)); if (!HTTP_2_SKIPPED_REQUEST_HEADERS.contains(name)) { result.add(new Header(name, headers.value(i))); } } return result; }Content-Length&#x5728;Http2.0&#x4E0B;&#x7684;&#x5751;&#x5982;&#x679C;&#x4F7F;&#x7528;OkHttp&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;&#x4E86;&#x81EA;&#x5B9A;&#x4E49;&#x7684;RequestBody&#xFF0C;&#x5E76;&#x4E14;&#x4F7F;&#x7528;&#x4E86;application/octet-stream&#x8FD9;&#x79CD;&#x7C7B;&#x578B;&#xFF0C;&#x90A3;&#x4E48;&#x5728;Http2.0&#x4E0B;&#x5C31;&#x9700;&#x8981;&#x7279;&#x522B;&#x6CE8;&#x610F;&#x4E86;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718class ByteRequestBody extends RequestBody { final MediaType MEDIA_TYPE = MediaType.parse(&quot;application/octet-stream; charset=utf-8&quot;); byte[] bytes; public ByteRequestBody(byte[] bytes) { this.bytes = bytes; } @Override public MediaType contentType() { return MEDIA_TYPE; } @Override public void writeTo(BufferedSink sink) throws IOException { sink.write(bytes); } }&#x521D;&#x6B65;&#x770B;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x4F60;&#x4F1A;&#x53D1;&#x73B0;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x5B9E;&#x9645;&#x4E0A;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x662F;&#x6709;&#x95EE;&#x9898;&#x7684;&#xFF0C;&#x5C06;&#x76F4;&#x63A5;&#x5BFC;&#x81F4;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#x54CD;&#x5E94;&#x53D8;&#x6162;&#xFF0C;&#x52A0;&#x5FEB;&#x670D;&#x52A1;&#x5668;I/O&#x8BBE;&#x5907;&#x8017;&#x635F;&#x3002;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x4F1A;&#x5BFC;&#x81F4;&#x670D;&#x52A1;&#x5668;&#x5C06;&#x6240;&#x6709;&#x8BF7;&#x6C42;&#x8FDB;&#x884C;&#x786C;&#x76D8;buffer&#x5904;&#x7406;&#xFF0C;nginx&#x4F1A;&#x62A5;&#x4EE5;&#x4E0B;&#x8B66;&#x544A;2016/12/02 16:42:58 [warn] 20479#0: 77176 a client request body is buffered to a temporary file /home/www/tengine/data/client_body/0033902790, client: ...*, server: fucknmb.com, request: &#x201C;POST /apiName/apiVersion HTTP/2.0&#x201D;, host: &#x201C;fucknmb.com&#x201D;, referrer: &#x201C;https://fucknmb.com&#x201C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x5E76;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x6700;&#x7EC8;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x627E;&#x5230;&#x4E86;&#x89E3;&#x51B3;&#x65B9;&#x5F0F;&#xFF0C;&#x5C31;&#x662F;&#x8FD9;&#x4E48;&#x795E;&#x5947;&#x3002;&#x5F53;&#x4F7F;&#x7528;application/octet-stream&#x7C7B;&#x578B;&#x65F6;&#xFF0C;OkHttp&#x4F1A;&#x8FFD;&#x52A0;&#x8BF7;&#x6C42;&#x5934;Transfer-Encoding: chunked&#x8BF7;&#x6C42;&#x5934;&#xFF0C;&#x800C;&#x6B64;&#x65F6;&#x5982;&#x679C;&#x8BF7;&#x6C42;&#x5934;&#x91CC;&#x6709;Content-Length&#xFF0C;&#x5219;&#x95EE;&#x9898;&#x4E0D;&#x4F1A;&#x5B58;&#x5728;&#xFF0C;&#x9519;&#x5C31;&#x9519;&#x5728;&#x4E0A;&#x9762;&#x7684;&#x81EA;&#x5B9A;&#x4E49;RequestBody&#xFF0C;&#x6CA1;&#x6709;&#x91CD;&#x5199;contentLength()&#x65B9;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x91CD;&#x5199;&#xFF0C;OkHttp&#x4F1A;&#x9ED8;&#x8BA4;&#x8FD4;&#x56DE;-1&#xFF0C;&#x5728;&#x8FD4;&#x56DE;-1&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x662F;&#x4E0D;&#x4F1A;&#x8FFD;&#x52A0;Content-Length&#x8FD9;&#x4E2A;&#x8BF7;&#x6C42;&#x5934;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x539F;&#x56E0;&#x5728;&#x4E0E;&#x4F7F;&#x7528;&#x4E86;application/octet-stream&#x7C7B;&#x578B;&#xFF0C;&#x4F46;&#x6CA1;&#x6709;Content-Length&#xFF0C;&#x800C;&#x4E14;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x53EA;&#x6709;Http2.0&#x4E0B;&#x4F1A;&#x6709;&#x3002;Http/1.1&#x548C;SPDY/3.1&#x90FD;&#x4E0D;&#x4F1A;&#x6709;&#xFF0C;&#x521D;&#x6B65;&#x6000;&#x7591;&#x548C;Http/2.0&#x7684;&#x5E27;&#x4F20;&#x8F93;&#x6709;&#x5173;&#xFF0C;&#x90A3;&#x4E48;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x91CD;&#x5199;contentLength()&#x65B9;&#x6CD5;&#x5373;&#x53EF;&#x3002;&#x5982;&#x4E0B;1234567891011121314151617181920212223class ByteRequestBody extends RequestBody { final MediaType MEDIA_TYPE = MediaType.parse(&quot;application/octet-stream; charset=utf-8&quot;); byte[] bytes; public ByteRequestBody(byte[] bytes) { this.bytes = bytes; } //&#x8FD4;&#x56DE;&#x5B57;&#x8282;&#x957F;&#x5EA6; @Override public long contentLength() throws IOException { return bytes.length; } @Override public MediaType contentType() { return MEDIA_TYPE; } @Override public void writeTo(BufferedSink sink) throws IOException { sink.write(bytes); } }&#x5F53;&#x7136;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x4F7F;&#x7528;&#x81EA;&#x5B9A;&#x4E49;RequestBody&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5EFA;&#x8BAE;&#x7528;&#x4EE5;&#x4E0B;&#x65B9;&#x5F0F;&#x521B;&#x5EFA;RequestBody&#xFF0C;&#x907F;&#x514D;&#x6F0F;&#x6389;&#x9700;&#x8981;&#x91CD;&#x5199;&#x7684;&#x65B9;&#x6CD5;1RequestBody.create(MediaType.parse(&quot;application/octet-stream; charset=utf-8&quot;), bytes);&#x5176;&#x4ED6;&#x6CA1;&#x63D0;&#x5230;&#x7684;&#x5751;WebView&#x4E2D;&#x7684;HttpDns&#x573A;&#x666F;&#xFF0C;&#x53C2;&#x8003;WebView&#x4E1A;&#x52A1;&#x573A;&#x666F;&#x201C;IP&#x76F4;&#x8FDE;&#x201D;&#x65B9;&#x6848;&#x8BF4;&#x660E;&#xFF0C;&#x7531;&#x4E8E;WebView&#x62E6;&#x622A;&#x8BF7;&#x6C42;&#x5728;Andriod 5.0&#x4EE5;&#x4E0A;&#x548C;Android 5.0&#x4EE5;&#x4E0B;&#x7565;&#x6709;&#x533A;&#x522B;&#xFF0C;&#x5EFA;&#x8BAE;WebView&#x4E2D;&#x53EA;&#x5904;&#x7406;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x7684;HttpDns&#xFF0C;&#x5E76;&#x4E14;&#x5EFA;&#x8BAE;&#x5728;Android 5.0&#x4EE5;&#x4E0B;&#x4E0D;&#x8981;&#x8FDB;&#x884C;&#x62E6;&#x622A;&#x3002;Cookie&#x7684;&#x573A;&#x666F;&#xFF0C;&#x53C2;&#x8003;HTTPDNS&#x57DF;&#x540D;&#x89E3;&#x6790;&#x573A;&#x666F;&#x4E0B;&#x5982;&#x4F55;&#x4F7F;&#x7528;Cookie&#xFF1F;&#x5B58;&#x5728;&#x4EE3;&#x7406;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x4EE3;&#x7406;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x7531;&#x4E8E;&#x57DF;&#x540D;&#x88AB;&#x66FF;&#x6362;&#x6210;&#x4E86;ip&#xFF0C;&#x6216;&#x591A;&#x6216;&#x5C11;&#x4F1A;&#x5B58;&#x5728;&#x95EE;&#x9898;&#xFF0C;&#x5EFA;&#x8BAE;&#x68C0;&#x6D4B;&#x5230;&#x4EE3;&#x7406;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x76F4;&#x63A5;&#x5173;&#x95ED;HttpDns&#x670D;&#x52A1;&#x3002;&#x9644;&#x4E0A;Android&#x4E2D;&#x68C0;&#x6D4B;&#x662F;&#x5426;&#x5B58;&#x5728;&#x4EE3;&#x7406;&#x7684;&#x6838;&#x5FC3;&#x4EE3;&#x7801;1234567891011121314151617181920public static boolean detectIfProxyExist(Context ctx) { boolean IS_ICS_OR_LATER = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.ICE_CREAM_SANDWICH; String proxyHost; int proxyPort; try { if (IS_ICS_OR_LATER) { proxyHost = System.getProperty(&quot;http.proxyHost&quot;); String port = System.getProperty(&quot;http.proxyPort&quot;); proxyPort = Integer.parseInt(port != null ? port : &quot;-1&quot;); } else { proxyHost = android.net.Proxy.getHost(ctx); proxyPort = android.net.Proxy.getPort(ctx); } return proxyHost != null &amp;&amp; proxyPort != -1; } catch (Exception e) { e.printStackTrace(); } return false; }&#x53C2;&#x8003;&#x6587;&#x7AE0;HTTPS&#xFF08;&#x542B;SNI&#xFF09;&#x4E1A;&#x52A1;&#x573A;&#x666F;&#x201C;IP&#x76F4;&#x8FDE;&#x201D;&#x65B9;&#x6848;&#x8BF4;&#x660E;Http2.0&#x534F;&#x8BAE;&#x6587;&#x6863;&#x4E3A;&#x4EC0;&#x4E48;&#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x5C3D;&#x5FEB;&#x652F;&#x6301; ALPN&#xFF1F;]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Http/2.0</tag>
        <tag>HttpDNS</tag>
        <tag>OkHttp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gradle 函数复用的一点实践]]></title>
    <url>%2F2017%2F01%2F12%2FGradle%E5%87%BD%E6%95%B0%E5%A4%8D%E7%94%A8%E7%9A%84%E4%B8%80%E7%82%B9%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[&#x9605;&#x8BFB;&#x672C;&#x7BC7;&#x6587;&#x7AE0;&#x9700;&#x8981;1~2&#x5206;&#x949F;&#xFF0C;&#x6CA1;&#x6709;&#x6280;&#x672F;&#x542B;&#x91CF;&#xFF0C;&#x53EA;&#x662F;&#x8C08;&#x8C08;&#x7ECF;&#x9A8C;&#x3002;&#x524D;&#x6BB5;&#x65F6;&#x95F4;&#x5728;&#x641E;&#x7EC4;&#x4EF6;&#x5316;&#xFF0C;&#x5176;&#x4E2D;&#x9047;&#x5230;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5404;&#x4E2A;&#x6A21;&#x5757;&#x4E2D;&#x7684;gradle&#x6587;&#x4EF6;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x8F85;&#x52A9;&#x51FD;&#x6570;&#xFF0C;&#x6BD4;&#x5982;&#x7528;&#x4E8E;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x6784;&#x5EFA;&#x7684;&#x4EFB;&#x52A1;&#x662F;&#x5426;&#x5728;jenkins&#x4E0A;&#x6784;&#x5EFA;&#xFF0C;&#x5E76;&#x4E14;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x53EF;&#x80FD;&#x4F1A;&#x88AB;&#x591A;&#x6B21;&#x4F7F;&#x7528;&#x3002;&#x6700;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x53EA;&#x6709;&#x4E00;&#x4E2A;gradle&#x6587;&#x4EF6;&#x7528;&#x5230;&#x4E86;&#xFF0C;&#x5C31;&#x76F4;&#x63A5;&#x5728;&#x7528;&#x5230;&#x7684;gradle&#x6587;&#x4EF6;&#x4E2D;&#x7F16;&#x5199;&#x5BF9;&#x5E94;&#x7684;&#x51FD;&#x6570;&#x3002;&#x540E;&#x6765;&#x53D1;&#x73B0;&#xFF0C;&#x5F88;&#x591A;gradle&#x6587;&#x4EF6;&#x90FD;&#x4F1A;&#x7528;&#x5230;&#xFF0C;&#x4E00;&#x5F00;&#x59CB;&#x5E76;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x592A;&#x591A;&#xFF0C;&#x7528;&#x5230;&#x7684;&#x65F6;&#x5019;&#x5C31;copy&#x4E00;&#x4E0B;&#x5BF9;&#x5E94;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x4E45;&#x800C;&#x4E45;&#x4E4B;&#xFF0C;&#x53D1;&#x73B0;&#x5F88;&#x591A;&#x6587;&#x4EF6;&#x4E2D;&#x5B58;&#x5728;&#x7740;&#x76F8;&#x540C;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5341;&#x5206;&#x4E0D;&#x597D;&#x7EF4;&#x62A4;&#xFF0C;&#x7531;&#x4E8E;&#x73B0;&#x6709;&#x7684;&#x65B9;&#x6CD5;&#x5B9E;&#x5728;&#x662F;&#x592A;&#x8822;&#x4E86;&#x4EE5;&#x81F3;&#x4E8E;&#x81EA;&#x5DF1;&#x90FD;&#x770B;&#x4E0D;&#x4E0B;&#x53BB;&#x4E86;&#xFF0C;&#x4E8E;&#x662F;&#x4E0D;&#x5F97;&#x4E0D;&#x53BB;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x90A3;&#x4E48;&#x5728;gradle&#x4E2D;&#xFF0C;&#x6709;&#x6CA1;&#x6709;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x8BA9;&#x516C;&#x5171;&#x51FD;&#x6570;&#x590D;&#x7528;&#x5462;&#xFF1F;&#x7B54;&#x6848;&#x662F;&#x80AF;&#x5B9A;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x7684;&#x8BDD;&#x4E5F;&#x5C31;&#x6CA1;&#x6709;&#x6B64;&#x6587;&#x4E86;&#x3002;&#x6211;&#x4EEC;&#x56DE;&#x60F3;&#x4E00;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x5982;&#x4F55;&#x5C06;lib&#x5E93;&#x53D1;&#x5E03;&#x5230;maven&#x79C1;&#x670D;&#xFF0C;&#x4E00;&#x822C;&#x4F1A;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A;&#x5E94;&#x7528;maven&#x63D2;&#x4EF6;&#x5B9A;&#x4E49;lib&#x5E93;&#x5750;&#x6807;&#x5229;&#x7528;uploadArchives&#x8FD9;&#x4E2A;Task&#x53D1;&#x5E03;&#x5230;maven&#x79C1;&#x670D;&#x6700;&#x7B80;&#x5355;&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF0C;&#x5C06;lib&#x5E93;&#x53D1;&#x5E03;&#x5230;&#x4E86;&#x672C;&#x5730;&#x7684;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#x3002;12345678910111213141516apply plugin: &apos;maven&apos;ext { PUBLISH_GROUP_ID = &quot;com.fucknmb&quot; PUBLISH_ARTIFACT_ID = &quot;test&quot; PUBLISH_VERSION = &quot;0.0.1&quot;}uploadArchives { repositories { mavenDeployer { pom.groupId = PUBLISH_GROUP_ID pom.artifactId = PUBLISH_ARTIFACT_ID pom.version = PUBLISH_VERSION repository(url: uri(&apos;../repo&apos;)) } }}&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x5C06;groupId,artifactId&#x4EE5;&#x53CA;version&#x5B9A;&#x4E49;&#x5230;project.ext&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x76F4;&#x63A5;&#x901A;&#x8FC7;&#x53D8;&#x91CF;&#x540D;&#x6765;&#x8BBF;&#x95EE;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#xFF0C;&#x8FD9;&#x6837;&#x505A;&#x7684;&#x597D;&#x5904;&#x5C31;&#x662F;&#x4FBF;&#x4E8E;&#x7EDF;&#x4E00;&#x7BA1;&#x7406;&#x5404;&#x4E2A;&#x53D8;&#x91CF;&#x3002;&#x5176;&#x5B9E;&#x8FD9;&#x662F;&#x53D8;&#x91CF;&#x590D;&#x7528;&#x7684;&#x4E00;&#x79CD;&#x4F53;&#x73B0;&#xFF0C;&#x65E2;&#x7136;&#x53D8;&#x91CF;&#x53EF;&#x4EE5;&#x5982;&#x6B64;&#x590D;&#x7528;&#xFF0C;&#x90A3;&#x4E48;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x53D8;&#x91CF;&#x590D;&#x7528;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x6765;&#x590D;&#x7528;&#x51FD;&#x6570;&#x5462;&#xFF1F;&#x5047;&#x8BBE;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x73B0;&#x5728;&#x9700;&#x8981;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x7684;&#x6784;&#x5EFA;&#x73AF;&#x5883;&#x662F;&#x5426;&#x5728;jenkins&#x4E0A;&#xFF0C;&#x4E00;&#x822C;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5B58;&#x5728;JOB_NAME&#x548C;BUILD_NUMBER&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x6709;&#x5982;&#x4E0B;&#x51FD;&#x6570;&#xFF1A;12345678910111213141516/** * &#x662F;&#x5426;&#x5728;Jenkins&#x5E73;&#x53F0;&#x4E0A;&#x6253;&#x5305; * @return */boolean isJenkins() { Map&lt;String, String&gt; map = System.getenv() if (map == null){ return false } boolean hasBuildJob = map.containsKey(&quot;JOB_NAME&quot;) boolean hasBuildNumber = map.containsKey(&quot;BUILD_NUMBER&quot;) if (hasBuildJob &amp;&amp; hasBuildNumber) { return true } return false}&#x8FD9;&#x65F6;&#x5019;A&#x6A21;&#x5757;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x7528;&#x5230;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x4E8E;&#x662F;&#x6BEB;&#x4E0D;&#x72B9;&#x8C6B;&#x7684;&#x628A;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x62F7;&#x8D1D;&#x5230;&#x4E86;A&#x6A21;&#x5757;&#x4E0B;&#x7684;build.gradle&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;OK&#x5B8C;&#x4E8B;&#x3002;&#x8FC7;&#x4E86;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#xFF0C;B&#x6A21;&#x5757;&#x8FC7;&#x6765;&#x95EE;&#xFF0C;&#x6709;&#x6CA1;&#x6709;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5728;Jenkins&#x4E0A;&#xFF0C;OK&#xFF0C;&#x6709;&#xFF0C;&#x53C8;&#x62F7;&#x4E86;&#x4E00;&#x6B21;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x3002;&#x4E45;&#x800C;&#x4E45;&#x4E4B;&#xFF0C;&#x8FD9;&#x79CD;&#x76F8;&#x540C;&#x7684;&#x57FA;&#x7840;&#x51FD;&#x6570;&#xFF0C;&#x4F1A;&#x6563;&#x843D;&#x5728;&#x5404;&#x4E2A;gradle&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x975E;&#x5E38;&#x4E0D;&#x5229;&#x4E8E;&#x7EF4;&#x62A4;&#xFF0C;&#x540E;&#x671F;&#x8981;&#x4FEE;&#x6539;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x6539;&#x4E86;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x5FD8;&#x4E86;&#x90A3;&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x5FC5;&#x987B;&#x8981;&#x5BFB;&#x627E;&#x51FA;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x6765;&#x590D;&#x7528;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x3002;&#x53C2;&#x8003;&#x53D8;&#x91CF;&#x590D;&#x7528;&#xFF0C;&#x6211;&#x4EEC;&#x5728;ext&#x4E2D;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x3002;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;common_function.gradle&#x6587;&#x4EF6;&#xFF0C;&#x7528;&#x4E8E;&#x590D;&#x7528;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x3002;&#x76EE;&#x524D;&#x4E3A;&#x6B62;&#xFF0C;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x4E2D;&#x6682;&#x65F6;&#x8FD8;&#x53EA;&#x6709;isJenkins&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x628A;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x5BFC;&#x51FA;&#x3002;&#x5BFC;&#x51FA;&#x65B9;&#x5F0F;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF1A;1234//&#x5BFC;&#x51FA;&#x51FD;&#x6570;ext { isJenkins = this.&amp;isJenkins}&#x600E;&#x4E48;&#x6837;&#xFF0C;&#x662F;&#x4E0D;&#x662F;&#x6709;&#x70B9;js&#x4E2D;&#x7684;ES6&#x4E2D;&#x7684;export&#x7684;&#x611F;&#x89C9;&#x3002;&#x6CE8;&#x610F;&#x5BFC;&#x51FA;&#x7684;&#x65F6;&#x5019;&#x9700;&#x8981;&#x52A0;&#x4E0A;&amp;&#xFF0C;&#x6709;&#x70B9;&#x50CF;C++&#x4E2D;&#x7684;&#x53D6;&#x5730;&#x5740;&#x3002;&#x6574;&#x4E2A;&#x6587;&#x4EF6;&#x73B0;&#x5728;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A;1234567891011121314151617181920/** * &#x662F;&#x5426;&#x5728;Jenkins&#x5E73;&#x53F0;&#x4E0A;&#x6253;&#x5305; * @return */boolean isJenkins() { Map&lt;String, String&gt; map = System.getenv() if (map == null){ return false } boolean hasBuildJob = map.containsKey(&quot;JOB_NAME&quot;) boolean hasBuildNumber = map.containsKey(&quot;BUILD_NUMBER&quot;) if (hasBuildJob &amp;&amp; hasBuildNumber) { return true } return false}//&#x5BFC;&#x51FA;&#x51FD;&#x6570;ext { isJenkins = this.&amp;isJenkins}&#x76EE;&#x524D;&#x4E3A;&#x6B62;&#xFF0C;&#x516C;&#x5171;&#x51FD;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x4EE5;&#x53CA;&#x5BFC;&#x51FA;&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;&#x4E86;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x5F15;&#x7528;&#x4E86;&#x3002;&#x5F15;&#x7528;&#x5C31;&#x548C;&#x5E94;&#x7528;&#x63D2;&#x4EF6;&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002;&#x76F4;&#x63A5;&#x5E94;&#x7528;&#x8BE5;common_function.gradle&#x6587;&#x4EF6;&#x5373;&#x53EF;&#x3002;12//&#x516C;&#x5171;&#x51FD;&#x6570;apply from: &quot;${project.rootProject.file(&apos;common_function.gradle&apos;)}&quot;&#x4E4B;&#x540E;&#xFF0C;&#x4F60;&#x5C31;&#x53EF;&#x4EE5;&#x5728;&#x5BF9;&#x5E94;&#x5F15;&#x7528;&#x4E86;common_function.gradle&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x968F;&#x610F;&#x4F7F;&#x7528;isJenkins&#x51FD;&#x6570;&#x4E86;&#x3002;&#x6253;&#x4E2A;&#x6BD4;&#x65B9;&#xFF0C;&#x6709;&#x4E2A;&#x6700;&#x7B80;&#x5355;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x6BD4;&#x5982;&#x70ED;&#x4FEE;&#x590D;&#x53EF;&#x80FD;&#x8981;&#x8BB0;&#x5F55;&#x4E00;&#x4E9B;&#x6587;&#x4EF6;&#xFF0C;&#x4F46;&#x662F;&#x8BB0;&#x5F55;&#x7684;&#x7684;&#x540C;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x964D;&#x4F4E;&#x7F16;&#x8BD1;&#x901F;&#x5EA6;&#xFF0C;&#x800C;&#x5728;&#x672C;&#x5730;&#x6253;&#x5305;&#x7684;&#x65F6;&#x5019;&#x53C8;&#x6070;&#x6070;&#x4E0D;&#x9700;&#x8981;&#xFF0C;&#x4E8E;&#x662F;&#x672C;&#x5730;&#x6253;&#x5305;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x5E94;&#x7528;&#x8BE5;&#x63D2;&#x4EF6;&#x3002;&#x6539;&#x9020;&#x540E;&#x7684;&#x811A;&#x672C;&#x5982;&#x4E0B;&#xFF1A;123456789apply plugin: &apos;com.android.application&apos;//hotpatch&#x914D;&#x7F6E;&#xFF0C;&#x53EA;&#x6709;&#x5728;&#x6253;&#x5305;&#x5E73;&#x53F0;&#x4E0A;&#x65F6;&#x624D;&#x5E94;&#x7528;if (isJenkins()) { apply plugin: &quot;com.fucknmb.tinker&quot; tinker { //...&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x914D;&#x7F6E;&#x9879; }}&#x672C;&#x7BC7;&#x6587;&#x7AE0;&#x867D;&#x7136;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#xFF0C;&#x4F46;&#x662F;&#x638C;&#x63E1;&#x4E86;&#x7684;&#x8BDD;&#xFF0C;&#x5BF9;gradle&#x4EE3;&#x7801;&#x7684;&#x53EF;&#x7EF4;&#x62A4;&#x6027;&#x662F;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x63D0;&#x9AD8;&#x3002;]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello 区长]]></title>
    <url>%2F2017%2F01%2F12%2FHello-%E5%8C%BA%E9%95%BF%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
</search>