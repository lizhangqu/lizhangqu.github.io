<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Https&Http2.0&HttpDNS 的那些事]]></title>
      <url>%2F2017%2F01%2F17%2FHttps%26Http2.0%26HttpDNS%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
      <content type="text"><![CDATA[&#x4EC5;&#x4EE5;&#x672C;&#x6587;&#x5907;&#x5FD8;2016&#x5E74;&#x7F51;&#x7EDC;&#x4F18;&#x5316;&#x8FC7;&#x7A0B;&#x4E2D;&#x9047;&#x5230;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x672C;&#x6587;&#x6240;&#x8BA8;&#x8BBA;&#x7684;&#x5185;&#x5BB9;&#x5168;&#x90E8;&#x57FA;&#x4E8E;OkHttp&#x6B64;&#x5F00;&#x6E90;&#x5E93;&#xFF0C;&#x7248;&#x672C;&#x53F7;&#x4E3A;3.2.0&#x5173;&#x4E8E;Https&#x53D1;&#x9001;HTTPS&#x8BF7;&#x6C42;&#x9996;&#x5148;&#x8981;&#x8FDB;&#x884C;SSL/TLS&#x63E1;&#x624B;&#xFF0C;&#x63E1;&#x624B;&#x8FC7;&#x7A0B;&#x5927;&#x81F4;&#x5982;&#x4E0B;&#xFF1A;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x8D77;&#x63E1;&#x624B;&#x8BF7;&#x6C42;&#xFF0C;&#x643A;&#x5E26;&#x968F;&#x673A;&#x6570;&#x3001;&#x652F;&#x6301;&#x7B97;&#x6CD5;&#x5217;&#x8868;&#x7B49;&#x53C2;&#x6570;&#x3002;&#x670D;&#x52A1;&#x7AEF;&#x6536;&#x5230;&#x8BF7;&#x6C42;&#xFF0C;&#x9009;&#x62E9;&#x5408;&#x9002;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x4E0B;&#x53D1;&#x516C;&#x94A5;&#x8BC1;&#x4E66;&#x548C;&#x968F;&#x673A;&#x6570;&#x3002;&#x5BA2;&#x6237;&#x7AEF;&#x5BF9;&#x670D;&#x52A1;&#x7AEF;&#x8BC1;&#x4E66;&#x8FDB;&#x884C;&#x6821;&#x9A8C;&#xFF0C;&#x5E76;&#x53D1;&#x9001;&#x968F;&#x673A;&#x6570;&#x4FE1;&#x606F;&#xFF0C;&#x8BE5;&#x4FE1;&#x606F;&#x4F7F;&#x7528;&#x516C;&#x94A5;&#x52A0;&#x5BC6;&#x3002;&#x670D;&#x52A1;&#x7AEF;&#x901A;&#x8FC7;&#x79C1;&#x94A5;&#x83B7;&#x53D6;&#x968F;&#x673A;&#x6570;&#x4FE1;&#x606F;&#x3002;&#x53CC;&#x65B9;&#x6839;&#x636E;&#x4EE5;&#x4E0A;&#x4EA4;&#x4E92;&#x7684;&#x4FE1;&#x606F;&#x751F;&#x6210;session ticket&#xFF0C;&#x7528;&#x4F5C;&#x8BE5;&#x8FDE;&#x63A5;&#x540E;&#x7EED;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x7684;&#x52A0;&#x5BC6;&#x5BC6;&#x94A5;&#x3002;&#x4E0A;&#x8FF0;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x7B2C;3&#x6B65;&#x4E2D;&#x5BA2;&#x6237;&#x7AEF;&#x9700;&#x8981;&#x9A8C;&#x8BC1;&#x670D;&#x52A1;&#x7AEF;&#x4E0B;&#x53D1;&#x7684;&#x8BC1;&#x4E66;&#xFF0C;&#x9A8C;&#x8BC1;&#x8FC7;&#x7A0B;&#x6709;&#x4EE5;&#x4E0B;&#x4E24;&#x4E2A;&#x8981;&#x70B9;&#xFF1A;&#x5BA2;&#x6237;&#x7AEF;&#x7528;&#x672C;&#x5730;&#x4FDD;&#x5B58;&#x7684;&#x6839;&#x8BC1;&#x4E66;&#x89E3;&#x5F00;&#x8BC1;&#x4E66;&#x94FE;&#xFF0C;&#x786E;&#x8BA4;&#x670D;&#x52A1;&#x7AEF;&#x4E0B;&#x53D1;&#x7684;&#x8BC1;&#x4E66;&#x662F;&#x7531;&#x53EF;&#x4FE1;&#x4EFB;&#x7684;&#x673A;&#x6784;&#x9881;&#x53D1;&#x7684;&#x3002;&#x5BA2;&#x6237;&#x7AEF;&#x9700;&#x8981;&#x68C0;&#x67E5;&#x8BC1;&#x4E66;&#x7684;domain&#x57DF;&#x548C;&#x6269;&#x5C55;&#x57DF;&#xFF0C;&#x770B;&#x662F;&#x5426;&#x5305;&#x542B;&#x672C;&#x6B21;&#x8BF7;&#x6C42;&#x7684;host&#x3002;&#x5982;&#x679C;&#x4E0A;&#x8FF0;&#x4E24;&#x70B9;&#x90FD;&#x6821;&#x9A8C;&#x901A;&#x8FC7;&#xFF0C;&#x5C31;&#x8BC1;&#x660E;&#x5F53;&#x524D;&#x7684;&#x670D;&#x52A1;&#x7AEF;&#x662F;&#x53EF;&#x4FE1;&#x4EFB;&#x7684;&#xFF0C;&#x5426;&#x5219;&#x5C31;&#x662F;&#x4E0D;&#x53EF;&#x4FE1;&#x4EFB;&#xFF0C;&#x5E94;&#x5F53;&#x4E2D;&#x65AD;&#x5F53;&#x524D;&#x8FDE;&#x63A5;&#x3002;&#x5173;&#x4E8E;Http/2.0HTTP/2 &#x8D44;&#x6599;&#x6C47;&#x603B;&#x5173;&#x4E8E;HttpDNSHttpDNS&#x662F;&#x4F7F;&#x7528;HTTP&#x534F;&#x8BAE;&#x5411;DNS&#x670D;&#x52A1;&#x5668;&#x7684;80&#x7AEF;&#x53E3;&#x8FDB;&#x884C;&#x8BF7;&#x6C42;&#xFF0C;&#x4EE3;&#x66FF;&#x4F20;&#x7EDF;&#x7684;DNS&#x534F;&#x8BAE;&#x5411;DNS&#x670D;&#x52A1;&#x5668;&#x7684;53&#x7AEF;&#x53E3;&#x8FDB;&#x884C;&#x8BF7;&#x6C42;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x4F7F;&#x7528;Http&#x534F;&#x8BAE;&#x53BB;&#x8FDB;&#x884C;dns&#x89E3;&#x6790;&#x8BF7;&#x6C42;&#xFF0C;&#x5C06;&#x670D;&#x52A1;&#x5668;&#x8FD4;&#x56DE;&#x7684;&#x89E3;&#x6790;&#x7ED3;&#x679C;&#xFF0C;&#x5373;&#x57DF;&#x540D;&#x5BF9;&#x5E94;&#x7684;&#x670D;&#x52A1;&#x5668;ip&#x83B7;&#x5F97;&#xFF0C;&#x76F4;&#x63A5;&#x5411;&#x8BE5;ip&#x53D1;&#x8D77;&#x5BF9;&#x5E94;&#x7684;api&#x670D;&#x52A1;&#x8BF7;&#x6C42;&#xFF0C;&#x4EE3;&#x66FF;&#x4F7F;&#x7528;&#x57DF;&#x540D;&#x3002;HttpDNS&#x4E3B;&#x8981;&#x89E3;&#x51B3;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;&#x8FD0;&#x8425;&#x5546;&#x57DF;&#x540D;&#x52AB;&#x6301;DNS&#x89E3;&#x6790;0RTOkHttp&#x5BF9;Http/2.0&#x7684;&#x652F;&#x6301;OkHttp&#x5929;&#x7136;&#x652F;&#x6301;Http/2.0&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x8F83;&#x65B0;&#x7684;&#x7248;&#x672C;&#x4E2D;&#xFF0C;OkHttp&#x79FB;&#x9664;&#x4E86;&#x5BF9;NPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x7684;&#x652F;&#x6301;&#xFF0C;&#x8F6C;&#x800C;&#x53EA;&#x652F;&#x6301;ALPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x3002;&#x89C1;&#x63D0;&#x4EA4;&#x8BB0;&#x5F55; Remove NPN support from OkHttpNPN&#xFF08;Next Protocol Negotiation&#xFF0C;&#x4E0B;&#x4E00;&#x4EE3;&#x534F;&#x8BAE;&#x534F;&#x5546;&#xFF09;&#xFF0C;&#x662F;&#x4E00;&#x4E2A; TLS &#x6269;&#x5C55;&#xFF0C;&#x7531; Google &#x5728;&#x5F00;&#x53D1; SPDY &#x534F;&#x8BAE;&#x65F6;&#x63D0;&#x51FA;&#x3002;&#x968F;&#x7740; SPDY &#x88AB; HTTP/2 &#x53D6;&#x4EE3;&#xFF0C;NPN &#x4E5F;&#x88AB;&#x4FEE;&#x8BA2;&#x4E3A; ALPN&#xFF08;Application Layer Protocol Negotiation&#xFF0C;&#x5E94;&#x7528;&#x5C42;&#x534F;&#x8BAE;&#x534F;&#x5546;&#xFF09;&#x3002;&#x4E8C;&#x8005;&#x76EE;&#x6807;&#x4E00;&#x81F4;&#xFF0C;&#x4F46;&#x5B9E;&#x73B0;&#x7EC6;&#x8282;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x76F8;&#x4E92;&#x4E0D;&#x517C;&#x5BB9;&#x3002;&#x4EE5;&#x4E0B;&#x662F;&#x5B83;&#x4EEC;&#x4E3B;&#x8981;&#x5DEE;&#x522B;&#xFF1A;NPN &#x662F;&#x670D;&#x52A1;&#x7AEF;&#x53D1;&#x9001;&#x6240;&#x652F;&#x6301;&#x7684; HTTP &#x534F;&#x8BAE;&#x5217;&#x8868;&#xFF0C;&#x7531;&#x5BA2;&#x6237;&#x7AEF;&#x9009;&#x62E9;&#xFF1B;&#x800C; ALPN &#x662F;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x9001;&#x6240;&#x652F;&#x6301;&#x7684; HTTP &#x534F;&#x8BAE;&#x5217;&#x8868;&#xFF0C;&#x7531;&#x670D;&#x52A1;&#x7AEF;&#x9009;&#x62E9;&#xFF1B;NPN &#x7684;&#x534F;&#x5546;&#x7ED3;&#x679C;&#x662F;&#x5728; Change Cipher Spec &#x4E4B;&#x540E;&#x52A0;&#x5BC6;&#x53D1;&#x9001;&#x7ED9;&#x670D;&#x52A1;&#x7AEF;&#xFF1B;&#x800C; ALPN &#x7684;&#x534F;&#x5546;&#x7ED3;&#x679C;&#x662F;&#x901A;&#x8FC7; Server Hello &#x660E;&#x6587;&#x53D1;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF;&#xFF1B;&#x4F46;&#x662F;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#x573A;&#x666F;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x8FD8;&#x9700;&#x8981;&#x4F7F;&#x7528;NPN&#xFF1A;ALPN&#x53EA;&#x652F;&#x6301;Android 5.0&#x4EE5;&#x4E0A;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x5728;Android 5.0&#x4EE5;&#x4E0B;&#x652F;&#x6301;Http/2.0&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;NPN&#x7406;&#x8BBA;&#x4E0A;nginx&#x53EF;&#x4EE5;&#x5BF9;ALPN&#x548C;NPN&#x540C;&#x65F6;&#x652F;&#x6301;&#xFF0C;&#x4F46;&#x662F;&#x90E8;&#x5206;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x7684;&#x914D;&#x7F6E;&#x53EF;&#x80FD;&#x53EA;&#x652F;&#x6301;NPN&#xFF0C;&#x5E76;&#x4E14;&#x77ED;&#x65F6;&#x95F4;&#x5185;&#x4E0D;&#x4F1A;&#x652F;&#x6301;ALPN&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;NPN&#x5982;&#x679C;&#x8981;&#x68C0;&#x6D4B;&#x670D;&#x52A1;&#x5668;&#x662F;&#x5426;&#x652F;&#x6301;ALPN&#x6216;&#x8005;NPN&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6B64;&#x7F51;&#x7AD9;&#x8FDB;&#x884C;&#x68C0;&#x6D4B; https://www.ssllabs.com/ssltest/analyze.html&#x68C0;&#x6D4B;&#x6548;&#x679C;&#x5982;&#x4E0B;:&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528; https://tools.keycdn.com/http2-test &#x68C0;&#x6D4B;&#x662F;&#x5426;&#x652F;&#x6301;Http2.0&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x68C0;&#x6D4B;&#x53EA;&#x4F1A;&#x5F53;ALPN&#x652F;&#x6301;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x624D;&#x4F1A;&#x8BA4;&#x4E3A;&#x652F;&#x6301;Http2.0&#x6B64;&#x65F6;&#x7684;&#x68C0;&#x6D4B;&#x6548;&#x679C;&#x5982;&#x4E0B;:&#x51FA;&#x4E8E;&#x4EE5;&#x4E0A;&#x4E24;&#x4E2A;&#x539F;&#x56E0;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;Http/2.0&#x5C31;&#x65E0;&#x6CD5;&#x53D1;&#x6325;&#x4F5C;&#x7528;&#x4E86;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x6709;&#x5FC5;&#x8981;&#x5C06;OkHttp&#x8FD9;&#x90E8;&#x5206;&#x4EE3;&#x7801;&#x8FD8;&#x539F;&#xFF0C;&#x4E8E;&#x662F;&#x5BF9;OkHttp&#x8FDB;&#x884C;&#x4E86;&#x5B9A;&#x5236;&#xFF0C;&#x5B9A;&#x5236;&#x65B9;&#x5F0F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x6839;&#x636E;&#x5BF9;&#x5E94;&#x7684;&#x63D0;&#x4EA4;&#x8BB0;&#x5F55;&#xFF0C;&#x628A;&#x79FB;&#x9664;&#x7684;&#x4EE3;&#x7801;&#x8FDB;&#x884C;&#x8FD8;&#x539F;&#x5373;&#x53EF;&#x3002;&#x6539;&#x9020;&#x7684;&#x4EE3;&#x7801;&#x5168;&#x90E8;&#x4F4D;&#x4E8E;okhttp3.internal.Platform&#x8FD9;&#x4E2A;&#x7C7B;&#x4E2D;&#xFF0C;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x6539;&#x9020;&#x5F71;&#x54CD;&#x539F;&#x6709;&#x903B;&#x8F91;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x8FD9;&#x4E2A;&#x7C7B;&#x4E2D;&#x52A0;&#x5165;&#x4E00;&#x4E2A;enableNPN&#x7684;&#x5F00;&#x5173;&#xFF0C;&#x5F53;&#x5F00;&#x5173;&#x5173;&#x95ED;&#x65F6;&#xFF0C;&#x903B;&#x8F91;&#x4E0D;&#x53D1;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x5F53;&#x5F00;&#x5173;&#x6253;&#x5F00;&#x65F6;&#xFF0C;NPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x4F1A;&#x5728;ALPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x4E0D;&#x652F;&#x6301;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x751F;&#x6548;&#xFF0C;&#x4F18;&#x5148;&#x4F7F;&#x7528;ALPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x3002;&#x9ED8;&#x8BA4;&#x5F00;&#x5173;&#x5F00;&#x542F;&#x3002;1234567public class Platform { //...... //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start public static boolean enableNPN = true; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end //......}&#x63A5;&#x7740;&#x5728;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x4E2D;&#x52A0;&#x5165;&#x4E24;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF0C;&#x53C2;&#x8003;getAlpnSelectedProtocol&#x548C;setAlpnProtocols&#xFF0C;&#x52A0;&#x5165;getNpnSelectedProtocol&#x548C;setNpnProtocols&#x53D8;&#x91CF;123456789101112/** Android 2.3 or better. */private static class Android extends Platform { // Non-null on Android 5.0+. private final OptionalMethod&lt;Socket&gt; getAlpnSelectedProtocol; private final OptionalMethod&lt;Socket&gt; setAlpnProtocols; // &#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start // Non-null on Android 4.1+. private final OptionalMethod&lt;Socket&gt; getNpnSelectedProtocol; private final OptionalMethod&lt;Socket&gt; setNpnProtocols; // &#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end}&#x540C;&#x65F6;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x589E;&#x52A0;&#x8FD9;&#x4E24;&#x4E2A;&#x5165;&#x53C2;&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x8D4B;&#x503C;1234567891011121314public Android(Class&lt;?&gt; sslParametersClass, OptionalMethod&lt;Socket&gt; setUseSessionTickets, OptionalMethod&lt;Socket&gt; setHostname, OptionalMethod&lt;Socket&gt; getAlpnSelectedProtocol, OptionalMethod&lt;Socket&gt; setAlpnProtocols, OptionalMethod&lt;Socket&gt; getNpnSelectedProtocol, OptionalMethod&lt;Socket&gt; setNpnProtocols) { this.sslParametersClass = sslParametersClass; this.setUseSessionTickets = setUseSessionTickets; this.setHostname = setHostname; this.getAlpnSelectedProtocol = getAlpnSelectedProtocol; this.setAlpnProtocols = setAlpnProtocols; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start this.getNpnSelectedProtocol = getNpnSelectedProtocol; this.setNpnProtocols = setNpnProtocols; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end}&#x4FEE;&#x6539;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x4E2D;configureTlsExtensions&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x914D;&#x7F6E;SSLSocket&#x5BF9;&#x8C61;&#xFF0C;&#x5F00;&#x542F;&#x5176;NPN&#x76F8;&#x5173;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x6CE8;&#x610F;NPN&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;enableNPN&#x5F00;&#x5173;&#x7684;&#x6761;&#x4EF6;1234567891011121314151617181920212223public void configureTlsExtensions( SSLSocket sslSocket, String hostname, List&lt;Protocol&gt; protocols) { // Enable SNI and session tickets. if (hostname != null) { setUseSessionTickets.invokeOptionalWithoutCheckedException(sslSocket, true); setHostname.invokeOptionalWithoutCheckedException(sslSocket, hostname); } // Enable ALPN. if (setAlpnProtocols != null &amp;&amp; setAlpnProtocols.isSupported(sslSocket)) { Object[] parameters = {concatLengthPrefixed(protocols)}; setAlpnProtocols.invokeWithoutCheckedException(sslSocket, parameters); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start // Enbale NPN. if (enableNPN &amp;&amp; setNpnProtocols != null &amp;&amp; setNpnProtocols.isSupported(sslSocket)) { Object[] parameters = {concatLengthPrefixed(protocols)}; setNpnProtocols.invokeWithoutCheckedException(sslSocket, parameters); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end}&#x4FEE;&#x6539;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x4E2D;getSelectedProtocol&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD4;&#x56DE;&#x9009;&#x62E9;&#x7684;&#x534F;&#x8BAE;&#xFF0C;&#x6CE8;&#x610F;NPN&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;enableNPN&#x5F00;&#x5173;&#x7684;&#x6761;&#x4EF6;123456789101112131415161718192021222324252627282930@Override public String getSelectedProtocol(SSLSocket socket) { boolean alpnSupported = ((getAlpnSelectedProtocol != null) &amp;&amp; (getAlpnSelectedProtocol.isSupported(socket))); boolean npnSupported = ((getNpnSelectedProtocol != null) &amp;&amp; (getNpnSelectedProtocol.isSupported(socket))); if (!(alpnSupported || npnSupported)) { return null; } // if support alpn ,returen it. if (alpnSupported) { byte[] alpnResult = (byte[]) getAlpnSelectedProtocol.invokeWithoutCheckedException(socket); if (alpnResult != null) { return new String(alpnResult, Util.UTF_8); } } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start // don&apos;t support alpn,try npn. if (enableNPN &amp;&amp; npnSupported) { byte[] npnResult = (byte[]) getNpnSelectedProtocol.invokeWithoutCheckedException(socket); if (npnResult != null) { return new String(npnResult, Util.UTF_8); } } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end return null;}&#x800C;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x4F20;&#x5165;&#x7684;&#x5165;&#x53C2;&#x5219;&#x662F;&#x7531;Platform.findPlatform&#x51FD;&#x6570;&#x4E2D;&#x53CD;&#x5C04;&#x5F97;&#x5230;&#x7684;&#xFF0C;12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** Attempt to match the host runtime to a capable Platform implementation. */ private static Platform findPlatform() { // Attempt to find Android 2.3+ APIs. try { //.......some codes //alpn support OptionalMethod&lt;Socket&gt; getAlpnSelectedProtocol = null; OptionalMethod&lt;Socket&gt; setAlpnProtocols = null; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //npn support OptionalMethod&lt;Socket&gt; getNpnSelectedProtocol = null; OptionalMethod&lt;Socket&gt; setNpnProtocols = null ; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end // Attempt to find Android 5.0+ APIs. try { Class.forName(&quot;android.net.Network&quot;); // Arbitrary class added in Android 5.0. getAlpnSelectedProtocol = new OptionalMethod&lt;&gt;(byte[].class, &quot;getAlpnSelectedProtocol&quot;); setAlpnProtocols = new OptionalMethod&lt;&gt;(null, &quot;setAlpnProtocols&quot;, byte[].class); } catch (ClassNotFoundException ignored) { } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //to make NPN Support try { getNpnSelectedProtocol = new OptionalMethod&lt;Socket&gt;(byte[].class, &quot;getNpnSelectedProtocol&quot;); setNpnProtocols = new OptionalMethod&lt;Socket&gt;(null, &quot;setNpnProtocols&quot;, byte[].class); } catch (Exception e) { //ignore } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end //&#x4F20;&#x5165;getNpnSelectedProtocol&#x548C;setNpnProtocols return new Android(sslParametersClass, setUseSessionTickets, setHostname, getAlpnSelectedProtocol, setAlpnProtocols, getNpnSelectedProtocol, setNpnProtocols); } catch (ClassNotFoundException ignored) { // This isn&apos;t an Android runtime. } //...... // Probably an Oracle JDK like OpenJDK. return new Platform();}&#x68C0;&#x6D4B;&#x5BA2;&#x6237;&#x7AEF;&#x4F7F;&#x7528;&#x7684;Http&#x534F;&#x8BAE;&#x5982;&#x679C;&#x901A;&#x8FC7;&#x8089;&#x773C;&#x67E5;&#x770B;&#xFF0C;&#x57FA;&#x672C;&#x4E0A;&#x4E0D;&#x53EF;&#x80FD;&#x77E5;&#x9053;&#x5F53;&#x524D;&#x7684;&#x8BF7;&#x6C42;&#x662F;Http/2.0&#x8FD8;&#x662F;Http/1.1&#x6216;&#x8005;&#x8BF4;&#x662F;SPDY/3.1&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;nginx&#x7684;&#x65E5;&#x5FD7;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x662F;&#x4EC0;&#x4E48;&#x534F;&#x8BAE;&#xFF0C;&#x5982;&#x4E0B;:&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x7684;&#x76EE;&#x7684;&#x4E0D;&#x662F;&#x901A;&#x8FC7;nginx&#x65E5;&#x5FD7;&#x6765;&#x770B;&#xFF0C;&#x800C;&#x662F;&#x901A;&#x8FC7;logcat&#x65E5;&#x5FD7;&#x6765;&#x770B;&#xFF0C;&#x90A3;&#x4E48;OkHttp&#x4E2D;&#x6709;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x65B9;&#x6CD5;&#x6765;&#x83B7;&#x5F97;&#x5F53;&#x524D;&#x8BF7;&#x6C42;&#x7684;&#x534F;&#x8BAE;&#x5462;&#xFF0C;&#x5176;&#x5B9E;&#x662F;&#x6709;&#x7684;&#xFF0C;&#x5728;&#x62E6;&#x622A;&#x5668;&#x4E2D;&#x5C31;&#x53EF;&#x4EE5;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x5B98;&#x65B9;&#x7684;logging-interceptor&#x6A21;&#x5757;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x52A0;&#x5165;&#x534F;&#x8BAE;&#x7684;&#x65E5;&#x5FD7;&#x3002;&#x5176;&#x5B9E;&#x5728;HttpLoggingInterceptor&#x4E2D;&#xFF0C;&#x5DF2;&#x7ECF;&#x6709;&#x534F;&#x8BAE;&#x76F8;&#x5173;&#x7684;&#x65E5;&#x5FD7;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x8BE5;&#x65E5;&#x5FD7;&#x5E76;&#x4E0D;&#x51C6;&#x786E;&#xFF0C;&#x5373;&#x4F7F;&#x5728;Http/2.0&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD4;&#x56DE;&#x7684;&#x4E5F;&#x662F;Http/1.1,&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x66F4;&#x52A0;&#x51C6;&#x786E;&#x7684;&#x65B9;&#x5F0F;&#x6253;&#x5370;&#x8FD9;&#x4E2A;&#x534F;&#x8BAE;&#xFF0C;&#x5728;HttpLoggingInterceptor&#x5408;&#x9002;&#x7684;&#x5730;&#x65B9;(&#x8FD4;&#x56DE;response&#x7684;&#x5730;&#x65B9;)&#xFF0C;&#x52A0;&#x5165;&#x4E0B;&#x9762;&#x4E24;&#x884C;&#x4EE3;&#x7801;&#x5373;&#x53EF;&#xFF1A;12Protocol responseProtocol = response.protocol();logger.log(&quot;&lt;-- &quot; +&quot;responseProtocol:&quot;+responseProtocol);&#x6B64;&#x65F6;&#x4F1A;&#x5728;reponse&#x8FD4;&#x56DE;&#x7684;&#x65F6;&#x5019;&#x6253;&#x5370;&#x5BF9;&#x5E94;&#x7684;&#x534F;&#x8BAE;&#x65E5;&#x5FD7;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A;OkHttp&#x4F7F;&#x7528;HttpDNS&#x7684;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;Android&#x4F7F;&#x7528;OkHttp&#x652F;&#x6301;HttpDNSAndroid OkHttp&#x5B9E;&#x73B0;HttpDns&#x7684;&#x6700;&#x4F73;&#x5B9E;&#x8DF5;&#xFF08;&#x975E;&#x62E6;&#x622A;&#x5668;&#xFF09;&#x8FD9;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x5404;&#x6709;&#x4F18;&#x7F3A;&#x70B9;&#xFF0C;&#x4F7F;&#x7528;Dns&#x63A5;&#x53E3;&#x65B9;&#x5F0F;&#x8FC7;&#x4E8E;&#x5E95;&#x5C42;&#xFF0C;&#x5F02;&#x5E38;&#x4E0D;&#x5BB9;&#x6613;&#x63A7;&#x5236;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x5341;&#x5206;&#x7CBE;&#x786E;&#x7684;&#x63A7;&#x5236;&#x5F02;&#x5E38;&#xFF0C;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;&#x62E6;&#x622A;&#x5668;&#x65B9;&#x5F0F;&#xFF0C;&#x800C;&#x4F7F;&#x7528;&#x62E6;&#x622A;&#x5668;&#x65B9;&#x5F0F;&#x4E3B;&#x8981;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x4E24;&#x6B65;&#x64CD;&#x4F5C;&#x5BF9;url&#x4E2D;&#x7684;host&#x8FDB;&#x884C;&#x66FF;&#x6362;&#xFF0C;&#x5C06;&#x57DF;&#x540D;&#x66FF;&#x6362;&#x4E3A;ip&#x6DFB;&#x52A0;header&#x8BF7;&#x6C42;&#x5934;&#xFF0C;&#x503C;&#x4E3A;&#x66FF;&#x6362;&#x524D;&#x7684;&#x57DF;&#x540D;&#x5728;Http&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x4E0D;&#x5B58;&#x5728;&#x4EFB;&#x4F55;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x5728;Https&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x9700;&#x8981;&#x4FEE;&#x6539;OkHttp&#x7684;&#x76F8;&#x5173;&#x4EE3;&#x7801;&#xFF0C;&#x89E3;&#x51B3;&#x76F8;&#x5173;&#x95EE;&#x9898;&#xFF0C;&#x5177;&#x4F53;&#x95EE;&#x9898;&#x4E0B;&#x6587;&#x7EC6;&#x8BF4;&#x3002;Https&#x4E0B;&#x4F7F;&#x7528;HttpDNS&#x8BC1;&#x4E66;&#x6821;&#x9A8C;&#x95EE;&#x9898;&#x5728;okhttp3.internal.io.RealConnection&#x7C7B;&#x4E2D;&#x6709;&#x4E2A;&#x65B9;&#x6CD5;&#x53EB;connectTls&#xFF0C;&#x91CC;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263private void connectTls(int readTimeout, int writeTimeout, ConnectionSpecSelector connectionSpecSelector) throws IOException { if (route.requiresTunnel()) { createTunnel(readTimeout, writeTimeout); } Address address = route.address(); SSLSocketFactory sslSocketFactory = address.sslSocketFactory(); boolean success = false; SSLSocket sslSocket = null; try { // Create the wrapper over the connected socket. sslSocket = (SSLSocket) sslSocketFactory.createSocket( rawSocket, address.url().host(), address.url().port(), true /* autoClose */); // Configure the socket&apos;s ciphers, TLS versions, and extensions. ConnectionSpec connectionSpec = connectionSpecSelector.configureSecureSocket(sslSocket); if (connectionSpec.supportsTlsExtensions()) { Platform.get().configureTlsExtensions( sslSocket, address.url().host(), address.protocols()); } // Force handshake. This can throw! sslSocket.startHandshake(); Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession()); // Verify that the socket&apos;s certificates are acceptable for the target host. if (!address.hostnameVerifier().verify(address.url().host(), sslSocket.getSession())) { X509Certificate cert = (X509Certificate) unverifiedHandshake.peerCertificates().get(0); throw new SSLPeerUnverifiedException(&quot;Hostname &quot; + address.url().host() + &quot; not verified:&quot; + &quot;\n certificate: &quot; + CertificatePinner.pin(cert) + &quot;\n DN: &quot; + cert.getSubjectDN().getName() + &quot;\n subjectAltNames: &quot; + OkHostnameVerifier.allSubjectAltNames(cert)); } // Check that the certificate pinner is satisfied by the certificates presented. address.certificatePinner().check(address.url().host(), unverifiedHandshake.peerCertificates()); // Success! Save the handshake and the ALPN protocol. String maybeProtocol = connectionSpec.supportsTlsExtensions() ? Platform.get().getSelectedProtocol(sslSocket) : null; socket = sslSocket; source = Okio.buffer(Okio.source(socket)); sink = Okio.buffer(Okio.sink(socket)); handshake = unverifiedHandshake; protocol = maybeProtocol != null ? Protocol.get(maybeProtocol) : Protocol.HTTP_1_1; success = true; } catch (AssertionError e) { if (Util.isAndroidGetsocknameError(e)) throw new IOException(e); throw e; } finally { if (sslSocket != null) { Platform.get().afterHandshake(sslSocket); } if (!success) { closeQuietly(sslSocket); } } }&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x8C03;&#x7528;Platform.get().configureTlsExtensions()&#x914D;&#x7F6E;SSLSocket&#x5BF9;&#x8C61;&#xFF0C;&#x8FD8;&#x662F;address.hostnameVerifier().verify()&#x8FDB;&#x884C;&#x8BC1;&#x4E66;&#x6821;&#x9A8C;&#xFF0C;&#x4EE5;&#x53CA;address.certificatePinner().check()&#x4E2D;&#xFF0C;&#x4F20;&#x5165;&#x7684;host&#x90FD;&#x662F;address.url().host()&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x503C;&#x5374;&#x6070;&#x6070;&#x662F;&#x6211;&#x4EEC;&#x66FF;&#x6362;&#x4E86;url&#x4E2D;&#x7684;&#x57DF;&#x540D;&#x4E3A;ip&#x7684;host&#xFF0C;&#x6240;&#x4EE5;&#x6B64;&#x65F6;&#x62FF;&#x5230;&#x7684;&#x503C;&#x4E3A;ip&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#xFF0C;&#x5E26;&#x6765;&#x4E86;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;&#x5F53;&#x5BA2;&#x6237;&#x7AEF;&#x4F7F;&#x7528;HttpDNS&#x65F6;&#xFF0C;&#x8BF7;&#x6C42;URL&#x4E2D;&#x7684;host&#x4F1A;&#x88AB;&#x66FF;&#x6362;&#x6210;HttpDNS&#x89E3;&#x6790;&#x51FA;&#x6765;&#x7684;ip&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x8BC1;&#x4E66;&#x9A8C;&#x8BC1;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;domain&#x4E0D;&#x5339;&#x914D;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5BFC;&#x81F4;SSL/TLS&#x63E1;&#x624B;&#x4E0D;&#x6210;&#x529F;&#x3002;&#x5728;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x5B58;&#x5728;&#x591A;&#x5F20;&#x8BC1;&#x4E66;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4F1A;&#x5B58;&#x5728;&#x95EE;&#x9898;&#x800C;&#x5BF9;&#x4E8E;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x5B58;&#x5728;&#x591A;&#x5F20;&#x8BC1;&#x4E66;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x4F1A;&#x5B58;&#x5728;&#x95EE;&#x9898;&#x5462;&#xFF0C;&#x8FD9;&#x91CC;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;&#xFF0C;&#x53EB;SNISNI&#xFF08;Server Name Indication&#xFF09;&#x662F;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x4E00;&#x4E2A;&#x670D;&#x52A1;&#x5668;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x57DF;&#x540D;&#x548C;&#x8BC1;&#x4E66;&#x7684;SSL/TLS&#x6269;&#x5C55;&#x3002;&#x5B83;&#x7684;&#x5DE5;&#x4F5C;&#x539F;&#x7406;&#x5982;&#x4E0B;&#xFF1A;&#x5728;&#x8FDE;&#x63A5;&#x5230;&#x670D;&#x52A1;&#x5668;&#x5EFA;&#x7ACB;SSL&#x94FE;&#x63A5;&#x4E4B;&#x524D;&#x5148;&#x53D1;&#x9001;&#x8981;&#x8BBF;&#x95EE;&#x7AD9;&#x70B9;&#x7684;&#x57DF;&#x540D;&#xFF08;Hostname&#xFF09;&#x3002;&#x670D;&#x52A1;&#x5668;&#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x57DF;&#x540D;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5408;&#x9002;&#x7684;&#x8BC1;&#x4E66;&#x3002;&#x76EE;&#x524D;&#xFF0C;&#x5927;&#x591A;&#x6570;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x548C;&#x6D4F;&#x89C8;&#x5668;&#x90FD;&#x5DF2;&#x7ECF;&#x5F88;&#x597D;&#x5730;&#x652F;&#x6301;SNI&#x6269;&#x5C55;&#xFF0C;OpenSSL 0.9.8&#x4E5F;&#x5DF2;&#x7ECF;&#x5185;&#x7F6E;&#x8FD9;&#x4E00;&#x529F;&#x80FD;&#x3002;&#x4E0A;&#x8FF0;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5F53;&#x5BA2;&#x6237;&#x7AEF;&#x4F7F;&#x7528;HttpDNS&#x65F6;&#xFF0C;&#x8BF7;&#x6C42;URL&#x4E2D;&#x7684;Host&#x4F1A;&#x88AB;&#x66FF;&#x6362;&#x6210;HttpPDNS&#x89E3;&#x6790;&#x51FA;&#x6765;&#x7684;IP&#xFF0C;&#x5BFC;&#x81F4;&#x670D;&#x52A1;&#x5668;&#x83B7;&#x53D6;&#x5230;&#x7684;&#x57DF;&#x540D;&#x4E3A;&#x89E3;&#x6790;&#x540E;&#x7684;IP&#xFF0C;&#x65E0;&#x6CD5;&#x627E;&#x5230;&#x5339;&#x914D;&#x7684;&#x8BC1;&#x4E66;&#xFF0C;&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x9ED8;&#x8BA4;&#x7684;&#x8BC1;&#x4E66;&#x6216;&#x8005;&#x4E0D;&#x8FD4;&#x56DE;&#xFF0C;&#x6240;&#x4EE5;&#x4F1A;&#x51FA;&#x73B0;SSL/TLS&#x63E1;&#x624B;&#x4E0D;&#x6210;&#x529F;&#x7684;&#x9519;&#x8BEF;&#x3002;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x4E00;&#x4E2A;&#x573A;&#x666F;&#x5C31;&#x662F;&#xFF1A;&#x6BD4;&#x5982;&#x5F53;&#x4F60;&#x9700;&#x8981;&#x901A;&#x8FC7;https&#x8BBF;&#x95EE;CDN&#x8D44;&#x6E90;&#x65F6;&#xFF0C;CDN&#x7684;&#x7AD9;&#x70B9;&#x5F80;&#x5F80;&#x670D;&#x52A1;&#x4E86;&#x5F88;&#x591A;&#x7684;&#x57DF;&#x540D;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x901A;&#x8FC7;SNI&#x6307;&#x5B9A;&#x5177;&#x4F53;&#x7684;&#x57DF;&#x540D;&#x8BC1;&#x4E66;&#x8FDB;&#x884C;&#x901A;&#x4FE1;&#x3002;&#x5176;&#x5B9E;OkHttp&#x662F;&#x652F;&#x6301;SNI&#x7684;&#xFF0C;&#x5728;Platform.configureTlsExtensions&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x8BBE;&#x7F6E;&#x4E86;SNI&#xFF0C;&#x53EA;&#x662F;&#x4F20;&#x5165;&#x7684;Host&#x53D8;&#x6210;&#x4E86;ip&#xFF0C;&#x6240;&#x4EE5;&#x5BFC;&#x81F4;&#x4E86;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;123456789public void configureTlsExtensions( SSLSocket sslSocket, String hostname, List&lt;Protocol&gt; protocols) { // Enable SNI and session tickets. if (hostname != null) { setUseSessionTickets.invokeOptionalWithoutCheckedException(sslSocket, true); setHostname.invokeOptionalWithoutCheckedException(sslSocket, hostname); } //......}&#x8FD9;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#x5F52;&#x6839;&#x5230;&#x5E95;&#x90FD;&#x662F;&#x66FF;&#x6362;&#x4E86;Host&#x6240;&#x9020;&#x6210;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD8;&#x662F;&#x9700;&#x8981;&#x5BF9;OkHttp&#x5F00;&#x5200;&#xFF0C;&#x4FEE;&#x6539;&#x6E90;&#x7801;&#x3002;&#x5728;okhttp3.internal.http.HttpEngine&#x4E2D;&#x627E;&#x5230;createAddress&#x65B9;&#x6CD5;&#xFF0C;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x5165;&#x53C2;&#xFF0C;&#x4F20;&#x5165;request.url().host()&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x4F20;&#x5165;request.header(&#x201C;host&#x201D;)123456789private static Address createAddress(OkHttpClient client, Request request) { //......some codes return new Address(request.url().host(), request.header(&quot;host&quot;), request.url().port(), client.dns(), client.socketFactory(), sslSocketFactory, hostnameVerifier, certificatePinner, client.proxyAuthenticator(), client.proxy(), client.protocols(), client.connectionSpecs(), client.proxySelector()); }&#x5728;Address&#x4E2D;&#x589E;&#x52A0;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x548C;&#x6210;&#x5458;&#x65B9;&#x6CD5;123456public final class Address { final String headerHost; public String host() { return headerHost; }}&#x5176;&#x4E2D;headerHost&#x7684;&#x503C;&#x901A;&#x8FC7;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x589E;&#x52A0;&#x7684;&#x53D8;&#x91CF;&#x5F97;&#x5230;12345678910public Address(String uriHost, String headerHost, int uriPort, Dns dns, SocketFactory socketFactory, SSLSocketFactory sslSocketFactory, HostnameVerifier hostnameVerifier, CertificatePinner certificatePinner, Authenticator proxyAuthenticator, Proxy proxy, List&lt;Protocol&gt; protocols, List&lt;ConnectionSpec&gt; connectionSpecs, ProxySelector proxySelector) { //.......some codes this.headerHost = headerHost; //.......some codes }&#x56DE;&#x5230;okhttp3.internal.io.RealConnection&#x4E2D;&#x7684;connectTls&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x5C06;&#x8BC1;&#x4E66;&#x9A8C;&#x8BC1;&#xFF0C;&#x8BBE;&#x7F6E;SNI&#x7684;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;&#x4FEE;&#x6539;&#x539F;&#x5219;&#x4E3A;&#xFF1A;&#x5F53;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#x5B58;&#x5728;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#xFF0C;&#x5F53;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#x4E0D;&#x5B58;&#x5728;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;url&#x4E2D;&#x7684;host&#x3002;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172private void connectTls(int readTimeout, int writeTimeout, ConnectionSpecSelector connectionSpecSelector) throws IOException { if (route.requiresTunnel()) { createTunnel(readTimeout, writeTimeout); } Address address = route.address(); SSLSocketFactory sslSocketFactory = address.sslSocketFactory(); boolean success = false; SSLSocket sslSocket = null; try { // Create the wrapper over the connected socket. sslSocket = (SSLSocket) sslSocketFactory.createSocket( rawSocket, address.url().host(), address.url().port(), true /* autoClose */); //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //&#x83B7;&#x53D6;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host String host = address.host(); if (host == null || host.length() == 0) { //&#x5982;&#x679C;&#x8BF7;&#x6C42;&#x4E2D;&#x7684;host&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x4F7F;&#x7528;url&#x4E2D;&#x7684;host host = address.url().host(); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end // Configure the socket&apos;s ciphers, TLS versions, and extensions. ConnectionSpec connectionSpec = connectionSpecSelector.configureSecureSocket(sslSocket); if (connectionSpec.supportsTlsExtensions()) { //&#x8BBE;&#x7F6E;SNI&#x65F6;&#x4F20;&#x5165;&#x7684;host&#x6B64;&#x65F6;&#x4E0D;&#x518D;&#x662F;ip Platform.get().configureTlsExtensions( sslSocket, host, address.protocols()); } // Force handshake. This can throw! sslSocket.startHandshake(); Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession()); // &#x6821;&#x9A8C;&#x65F6;&#x4F20;&#x5165;&#x7684;host&#x6B64;&#x65F6;&#x4E0D;&#x518D;&#x662F;ip // Verify that the socket&apos;s certificates are acceptable for the target host. if (!address.hostnameVerifier().verify(host, sslSocket.getSession())) { X509Certificate cert = (X509Certificate) unverifiedHandshake.peerCertificates().get(0); throw new SSLPeerUnverifiedException(&quot;Hostname &quot; + host + &quot; not verified:&quot; + &quot;\n certificate: &quot; + CertificatePinner.pin(cert) + &quot;\n DN: &quot; + cert.getSubjectDN().getName() + &quot;\n subjectAltNames: &quot; + OkHostnameVerifier.allSubjectAltNames(cert)); } // Check that the certificate pinner is satisfied by the certificates presented. address.certificatePinner().check(host, unverifiedHandshake.peerCertificates()); // Success! Save the handshake and the ALPN protocol. String maybeProtocol = connectionSpec.supportsTlsExtensions() ? Platform.get().getSelectedProtocol(sslSocket) : null; socket = sslSocket; source = Okio.buffer(Okio.source(socket)); sink = Okio.buffer(Okio.sink(socket)); handshake = unverifiedHandshake; protocol = maybeProtocol != null ? Protocol.get(maybeProtocol) : Protocol.HTTP_1_1; success = true; } catch (AssertionError e) { if (Util.isAndroidGetsocknameError(e)) throw new IOException(e); throw e; } finally { if (sslSocket != null) { Platform.get().afterHandshake(sslSocket); } if (!success) { closeQuietly(sslSocket); } } }&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x8FD8;&#x6709;&#x53E6;&#x4E00;&#x4E2A;&#x89E3;&#x51B3;&#x65B9;&#x5F0F;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;OkHttp&#x7684;Dns&#x63A5;&#x53E3;&#x5B9E;&#x73B0;HttpDns&#xFF0C;&#x4E8E;&#x662F;&#x6574;&#x4E2A;&#x4E16;&#x754C;&#x5E73;&#x9759;&#x4E86;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x8FD9;&#x4E48;&#x8BF4;&#x5462;&#xFF0C;&#x89C1;&#x4E0B;&#x6587;&#x3002;Http/2.0 &amp;&amp; SPDY/3.1 &#x4E0E;HttpDNS&#x5F53;&#x4F60;&#x5929;&#x771F;&#x7684;&#x4EE5;&#x4E3A;&#x8FD9;&#x6837;&#x89E3;&#x51B3;&#x4E86;&#x95EE;&#x9898;&#x4E4B;&#x540E;&#xFF0C;&#x90A3;&#x4F60;&#x5C31;&#x6253;&#x9519;&#x7279;&#x9519;&#x4E86;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x4E0A;&#x9762;&#x8BF4;&#x7684;&#xFF0C;&#x76F4;&#x63A5;&#x901A;&#x8FC7;OkHttp&#x7684;Dns&#x63A5;&#x53E3;&#x5B9E;&#x73B0;HttpDns&#x4E00;&#x4E86;&#x767E;&#x4E86;&#x7684;&#x539F;&#x56E0;&#x4E86;&#x3002;&#x5728;SPDY&#x548C;Http2.0&#x4E2D;&#xFF0C;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#x5DF2;&#x4E0D;&#x518D;&#x662F;Http1.1&#x65F6;&#x4EE3;&#x7684;host&#x4E86;&#xFF0C;&#x901A;&#x8FC7;&#x67E5;&#x770B;&#x534F;&#x8BAE;&#x6587;&#x6863; https://tools.ietf.org/html/draft-ietf-httpbis-http2-09#section-8.1.3&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5728;Http2.0&#x4E2D;&#x4F7F;&#x7528;:authority&#x8BF7;&#x6C42;&#x5934;&#x4EE3;&#x66FF;Http1.1&#x4E2D;&#x7684;host&#x9898;&#x5916;&#x8BDD;&#xFF0C;&#x5728;Http2.0&#x4E2D;&#xFF0C;&#x6240;&#x6709;&#x8BF7;&#x6C42;&#x5934;&#x5168;&#x90E8;&#x53D8;&#x6210;&#x5C0F;&#x5199;&#xFF0C;&#x5927;&#x5C0F;&#x7684;&#x8BF7;&#x6C42;&#x5934;&#x662F;&#x4E0D;&#x7B26;&#x5408;&#x89C4;&#x8303;&#x7684;&#x3002;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x5BFC;&#x81F4;&#x7684;&#x76F4;&#x63A5;&#x7ED3;&#x679C;&#x5C31;&#x662F;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x62FF;&#x5230;&#x7684;host&#x662F;ip&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x57DF;&#x540D;&#xFF0C;&#x5982;&#x679C;&#x670D;&#x52A1;&#x5668;&#x5BF9;host&#x8FDB;&#x884C;&#x6821;&#x9A8C;&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x80FD;&#x5C31;&#x4F1A;&#x51FA;&#x95EE;&#x9898;&#x3002;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x8BE5;&#x600E;&#x4E48;&#x89E3;&#x51B3;&#x5462;&#xFF1F;&#x540C;&#x6837;&#x9700;&#x8981;&#x5BF9;OkHttp&#x5F00;&#x5200;&#x3002;&#x4FEE;&#x6539;okhttp3.internal.http.Http2xStream&#x4E2D;&#x7684;spdy3HeadersList&#x4EE5;&#x53CA;http2HeadersList&#x65B9;&#x6CD5;&#xFF0C;&#x5C06;&#x5BF9;&#x5E94;&#x8BF7;&#x6C42;&#x5934;&#x7684;&#x503C;&#x8BBE;&#x4E3A;&#x57DF;&#x540D;&#x5373;&#x53EF;&#x3002;1234567891011121314151617181920212223242526272829303132333435363738394041424344public static List&lt;Header&gt; spdy3HeadersList(Request request) { Headers headers = request.headers(); //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //&#x5148;&#x53D6;header&#x4E2D;&#x7684;host String host = request.header(&quot;host&quot;); if (host == null || host.length() == 0) { //&#x6CA1;&#x6709;&#x5219;&#x4F7F;&#x7528;&#x539F;&#x59CB;&#x7684;request.url() host = Util.hostHeader(request.url(), false); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end List&lt;Header&gt; result = new ArrayList&lt;&gt;(headers.size() + 5); result.add(new Header(TARGET_METHOD, request.method())); result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url()))); result.add(new Header(VERSION, &quot;HTTP/1.1&quot;)); //&#x4FEE;&#x6539;&#x4E3A;host&#x53D8;&#x91CF; result.add(new Header(TARGET_HOST, host)); result.add(new Header(TARGET_SCHEME, request.url().scheme())); Set&lt;ByteString&gt; names = new LinkedHashSet&lt;&gt;(); for (int i = 0, size = headers.size(); i &lt; size; i++) { // header names must be lowercase. ByteString name = ByteString.encodeUtf8(headers.name(i).toLowerCase(Locale.US)); // Drop headers that are forbidden when layering HTTP over SPDY. if (SPDY_3_SKIPPED_REQUEST_HEADERS.contains(name)) continue; // If we haven&apos;t seen this name before, add the pair to the end of the list... String value = headers.value(i); if (names.add(name)) { result.add(new Header(name, value)); continue; } // ...otherwise concatenate the existing values and this value. for (int j = 0; j &lt; result.size(); j++) { if (result.get(j).name.equals(name)) { String concatenated = joinOnNull(result.get(j).value.utf8(), value); result.set(j, new Header(name, concatenated)); break; } } } return result; }1234567891011121314151617181920212223242526public static List&lt;Header&gt; http2HeadersList(Request request) { Headers headers = request.headers(); //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //&#x5148;&#x53D6;header&#x4E2D;&#x7684;host String host = request.header(&quot;host&quot;); if (host == null || host.length() == 0) { //&#x6CA1;&#x6709;&#x5219;&#x4F7F;&#x7528;&#x539F;&#x59CB;&#x7684;request.url() host = Util.hostHeader(request.url(), false); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end List&lt;Header&gt; result = new ArrayList&lt;&gt;(headers.size() + 4); result.add(new Header(TARGET_METHOD, request.method())); result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url()))); //&#x4FEE;&#x6539;&#x4E3A;host&#x53D8;&#x91CF; result.add(new Header(TARGET_AUTHORITY, host)); // Optional. result.add(new Header(TARGET_SCHEME, request.url().scheme())); for (int i = 0, size = headers.size(); i &lt; size; i++) { // header names must be lowercase. ByteString name = ByteString.encodeUtf8(headers.name(i).toLowerCase(Locale.US)); if (!HTTP_2_SKIPPED_REQUEST_HEADERS.contains(name)) { result.add(new Header(name, headers.value(i))); } } return result; }Content-Length&#x5728;Http2.0&#x4E0B;&#x7684;&#x5751;&#x5982;&#x679C;&#x4F7F;&#x7528;OkHttp&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;&#x4E86;&#x81EA;&#x5B9A;&#x4E49;&#x7684;RequestBody&#xFF0C;&#x5E76;&#x4E14;&#x4F7F;&#x7528;&#x4E86;application/octet-stream&#x8FD9;&#x79CD;&#x7C7B;&#x578B;&#xFF0C;&#x90A3;&#x4E48;&#x5728;Http2.0&#x4E0B;&#x5C31;&#x9700;&#x8981;&#x7279;&#x522B;&#x6CE8;&#x610F;&#x4E86;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718class ByteRequestBody extends RequestBody { final MediaType MEDIA_TYPE = MediaType.parse(&quot;application/octet-stream; charset=utf-8&quot;); byte[] bytes; public ByteRequestBody(byte[] bytes) { this.bytes = bytes; } @Override public MediaType contentType() { return MEDIA_TYPE; } @Override public void writeTo(BufferedSink sink) throws IOException { sink.write(bytes); } }&#x521D;&#x6B65;&#x770B;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x4F60;&#x4F1A;&#x53D1;&#x73B0;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x5B9E;&#x9645;&#x4E0A;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x662F;&#x6709;&#x95EE;&#x9898;&#x7684;&#xFF0C;&#x5C06;&#x76F4;&#x63A5;&#x5BFC;&#x81F4;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#x54CD;&#x5E94;&#x53D8;&#x6162;&#xFF0C;&#x52A0;&#x5FEB;&#x670D;&#x52A1;&#x5668;I/O&#x8BBE;&#x5907;&#x8017;&#x635F;&#x3002;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x4F1A;&#x5BFC;&#x81F4;&#x670D;&#x52A1;&#x5668;&#x5C06;&#x6240;&#x6709;&#x8BF7;&#x6C42;&#x8FDB;&#x884C;&#x786C;&#x76D8;buffer&#x5904;&#x7406;&#xFF0C;nginx&#x4F1A;&#x62A5;&#x4EE5;&#x4E0B;&#x8B66;&#x544A;2016/12/02 16:42:58 [warn] 20479#0: 77176 a client request body is buffered to a temporary file /home/www/tengine/data/client_body/0033902790, client: ...*, server: fucknmb.com, request: &#x201C;POST /apiName/apiVersion HTTP/2.0&#x201D;, host: &#x201C;fucknmb.com&#x201D;, referrer: &#x201C;https://fucknmb.com&#x201C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x5E76;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x6700;&#x7EC8;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x5C31;&#x662F;&#x8FD9;&#x4E48;&#x795E;&#x5947;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x627E;&#x5230;&#x4E86;&#x89E3;&#x51B3;&#x65B9;&#x5F0F;&#x3002;&#x5F53;&#x4F7F;&#x7528;application/octet-stream&#x7C7B;&#x578B;&#x65F6;&#xFF0C;OkHttp&#x4F1A;&#x8FFD;&#x52A0;&#x8BF7;&#x6C42;&#x5934;Transfer-Encoding: chunked&#x8BF7;&#x6C42;&#x5934;&#xFF0C;&#x800C;&#x6B64;&#x65F6;&#x5982;&#x679C;&#x8BF7;&#x6C42;&#x5934;&#x91CC;&#x6709;Content-Length&#xFF0C;&#x5219;&#x95EE;&#x9898;&#x4E0D;&#x4F1A;&#x5B58;&#x5728;&#xFF0C;&#x9519;&#x5C31;&#x9519;&#x5728;&#x4E0A;&#x9762;&#x7684;&#x81EA;&#x5B9A;&#x4E49;RequestBody&#xFF0C;&#x6CA1;&#x6709;&#x91CD;&#x5199;contentLength()&#x65B9;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x91CD;&#x5199;&#xFF0C;OkHttp&#x4F1A;&#x9ED8;&#x8BA4;&#x8FD4;&#x56DE;-1,&#x5728;&#x8FD4;&#x56DE;-1&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x662F;&#x4E0D;&#x4F1A;&#x8FFD;&#x52A0;Content-Length&#x8FD9;&#x4E2A;&#x8BF7;&#x6C42;&#x5934;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x539F;&#x56E0;&#x5728;&#x4E0E;&#x4F7F;&#x7528;&#x4E86;application/octet-stream&#x7C7B;&#x578B;&#xFF0C;&#x4F46;&#x6CA1;&#x6709;Content-Length&#xFF0C;&#x800C;&#x4E14;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x53EA;&#x6709;Http2.0&#x4E0B;&#x4F1A;&#x6709;&#x3002;Http/1.1&#x548C;SPDY/3.1&#x90FD;&#x4E0D;&#x4F1A;&#x6709;&#xFF0C;&#x521D;&#x6B65;&#x6000;&#x7591;&#x548C;Http/2.0&#x7684;&#x5E27;&#x4F20;&#x8F93;&#x6709;&#x5173;&#xFF0C;&#x90A3;&#x4E48;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x91CD;&#x5199;contentLength()&#x65B9;&#x6CD5;&#x5373;&#x53EF;&#x3002;&#x5982;&#x4E0B;1234567891011121314151617181920212223class ByteRequestBody extends RequestBody { final MediaType MEDIA_TYPE = MediaType.parse(&quot;application/octet-stream; charset=utf-8&quot;); byte[] bytes; public ByteRequestBody(byte[] bytes) { this.bytes = bytes; } //&#x8FD4;&#x56DE;&#x5B57;&#x8282;&#x957F;&#x5EA6; @Override public long contentLength() throws IOException { return bytes.length; } @Override public MediaType contentType() { return MEDIA_TYPE; } @Override public void writeTo(BufferedSink sink) throws IOException { sink.write(bytes); } }&#x5F53;&#x7136;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x91CD;&#x5199;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5EFA;&#x8BAE;&#x7528;&#x4EE5;&#x4E0B;&#x65B9;&#x5F0F;&#x521B;&#x5EFA;RequestBody&#xFF0C;&#x907F;&#x514D;&#x6F0F;&#x6389;&#x9700;&#x8981;&#x91CD;&#x5199;&#x7684;&#x65B9;&#x6CD5;1RequestBody.create(MediaType.parse(&quot;application/octet-stream; charset=utf-8&quot;), bytes);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Gradle 函数复用的一点实践]]></title>
      <url>%2F2017%2F01%2F12%2FGradle%E5%87%BD%E6%95%B0%E5%A4%8D%E7%94%A8%E7%9A%84%E4%B8%80%E7%82%B9%E5%AE%9E%E8%B7%B5%2F</url>
      <content type="text"><![CDATA[&#x9605;&#x8BFB;&#x672C;&#x7BC7;&#x6587;&#x7AE0;&#x9700;&#x8981;1~2&#x5206;&#x949F;&#xFF0C;&#x6CA1;&#x6709;&#x6280;&#x672F;&#x542B;&#x91CF;&#xFF0C;&#x53EA;&#x662F;&#x8C08;&#x8C08;&#x7ECF;&#x9A8C;&#x3002;&#x524D;&#x6BB5;&#x65F6;&#x95F4;&#x5728;&#x641E;&#x7EC4;&#x4EF6;&#x5316;&#xFF0C;&#x5176;&#x4E2D;&#x9047;&#x5230;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5404;&#x4E2A;&#x6A21;&#x5757;&#x4E2D;&#x7684;gradle&#x6587;&#x4EF6;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x8F85;&#x52A9;&#x51FD;&#x6570;&#xFF0C;&#x6BD4;&#x5982;&#x7528;&#x4E8E;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x6784;&#x5EFA;&#x7684;&#x4EFB;&#x52A1;&#x662F;&#x5426;&#x5728;jenkins&#x4E0A;&#x6784;&#x5EFA;&#xFF0C;&#x5E76;&#x4E14;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x53EF;&#x80FD;&#x4F1A;&#x88AB;&#x591A;&#x6B21;&#x4F7F;&#x7528;&#x3002;&#x6700;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x53EA;&#x6709;&#x4E00;&#x4E2A;gradle&#x6587;&#x4EF6;&#x7528;&#x5230;&#x4E86;&#xFF0C;&#x5C31;&#x76F4;&#x63A5;&#x5728;&#x7528;&#x5230;&#x7684;gradle&#x6587;&#x4EF6;&#x4E2D;&#x7F16;&#x5199;&#x5BF9;&#x5E94;&#x7684;&#x51FD;&#x6570;&#x3002;&#x540E;&#x6765;&#x53D1;&#x73B0;&#xFF0C;&#x5F88;&#x591A;gradle&#x6587;&#x4EF6;&#x90FD;&#x4F1A;&#x7528;&#x5230;&#xFF0C;&#x4E00;&#x5F00;&#x59CB;&#x5E76;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x592A;&#x591A;&#xFF0C;&#x7528;&#x5230;&#x7684;&#x65F6;&#x5019;&#x5C31;copy&#x4E00;&#x4E0B;&#x5BF9;&#x5E94;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x4E45;&#x800C;&#x4E45;&#x4E4B;&#xFF0C;&#x53D1;&#x73B0;&#x5F88;&#x591A;&#x6587;&#x4EF6;&#x4E2D;&#x5B58;&#x5728;&#x7740;&#x76F8;&#x540C;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5341;&#x5206;&#x4E0D;&#x597D;&#x7EF4;&#x62A4;&#xFF0C;&#x7531;&#x4E8E;&#x73B0;&#x6709;&#x7684;&#x65B9;&#x6CD5;&#x5B9E;&#x5728;&#x662F;&#x592A;&#x8822;&#x4E86;&#x4EE5;&#x81F3;&#x4E8E;&#x81EA;&#x5DF1;&#x90FD;&#x770B;&#x4E0D;&#x4E0B;&#x53BB;&#x4E86;&#xFF0C;&#x4E8E;&#x662F;&#x4E0D;&#x5F97;&#x4E0D;&#x53BB;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x90A3;&#x4E48;&#x5728;gradle&#x4E2D;&#xFF0C;&#x6709;&#x6CA1;&#x6709;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x8BA9;&#x516C;&#x5171;&#x51FD;&#x6570;&#x590D;&#x7528;&#x5462;&#xFF1F;&#x7B54;&#x6848;&#x662F;&#x80AF;&#x5B9A;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x7684;&#x8BDD;&#x4E5F;&#x5C31;&#x6CA1;&#x6709;&#x6B64;&#x6587;&#x4E86;&#x3002;&#x6211;&#x4EEC;&#x56DE;&#x60F3;&#x4E00;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x5982;&#x4F55;&#x5C06;lib&#x5E93;&#x53D1;&#x5E03;&#x5230;maven&#x79C1;&#x670D;&#xFF0C;&#x4E00;&#x822C;&#x4F1A;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A;&#x5E94;&#x7528;maven&#x63D2;&#x4EF6;&#x5B9A;&#x4E49;lib&#x5E93;&#x5750;&#x6807;&#x5229;&#x7528;uploadArchives&#x8FD9;&#x4E2A;Task&#x53D1;&#x5E03;&#x5230;maven&#x79C1;&#x670D;&#x6700;&#x7B80;&#x5355;&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF0C;&#x5C06;lib&#x5E93;&#x53D1;&#x5E03;&#x5230;&#x4E86;&#x672C;&#x5730;&#x7684;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#x3002;12345678910111213141516apply plugin: &apos;maven&apos;ext { PUBLISH_GROUP_ID = &quot;com.fucknmb&quot; PUBLISH_ARTIFACT_ID = &quot;test&quot; PUBLISH_VERSION = &quot;0.0.1&quot;}uploadArchives { repositories { mavenDeployer { pom.groupId = PUBLISH_GROUP_ID pom.artifactId = PUBLISH_ARTIFACT_ID pom.version = PUBLISH_VERSION repository(url: uri(&apos;../repo&apos;)) } }}&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x5C06;groupId,artifactId&#x4EE5;&#x53CA;version&#x5B9A;&#x4E49;&#x5230;project.ext&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x76F4;&#x63A5;&#x901A;&#x8FC7;&#x53D8;&#x91CF;&#x540D;&#x6765;&#x8BBF;&#x95EE;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#xFF0C;&#x8FD9;&#x6837;&#x505A;&#x7684;&#x597D;&#x5904;&#x5C31;&#x662F;&#x4FBF;&#x4E8E;&#x7EDF;&#x4E00;&#x7BA1;&#x7406;&#x5404;&#x4E2A;&#x53D8;&#x91CF;&#x3002;&#x5176;&#x5B9E;&#x8FD9;&#x662F;&#x53D8;&#x91CF;&#x590D;&#x7528;&#x7684;&#x4E00;&#x79CD;&#x4F53;&#x73B0;&#xFF0C;&#x65E2;&#x7136;&#x53D8;&#x91CF;&#x53EF;&#x4EE5;&#x5982;&#x6B64;&#x590D;&#x7528;&#xFF0C;&#x90A3;&#x4E48;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x53D8;&#x91CF;&#x590D;&#x7528;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x6765;&#x590D;&#x7528;&#x51FD;&#x6570;&#x5462;&#xFF1F;&#x5047;&#x8BBE;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x73B0;&#x5728;&#x9700;&#x8981;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x7684;&#x6784;&#x5EFA;&#x73AF;&#x5883;&#x662F;&#x5426;&#x5728;jenkins&#x4E0A;&#xFF0C;&#x4E00;&#x822C;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5B58;&#x5728;JOB_NAME&#x548C;BUILD_NUMBER&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x6709;&#x5982;&#x4E0B;&#x51FD;&#x6570;&#xFF1A;12345678910111213141516/** * &#x662F;&#x5426;&#x5728;Jenkins&#x5E73;&#x53F0;&#x4E0A;&#x6253;&#x5305; * @return */boolean isJenkins() { Map&lt;String, String&gt; map = System.getenv() if (map == null){ return false } boolean hasBuildJob = map.containsKey(&quot;JOB_NAME&quot;) boolean hasBuildNumber = map.containsKey(&quot;BUILD_NUMBER&quot;) if (hasBuildJob &amp;&amp; hasBuildNumber) { return true } return false}&#x8FD9;&#x65F6;&#x5019;A&#x6A21;&#x5757;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x7528;&#x5230;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x4E8E;&#x662F;&#x6BEB;&#x4E0D;&#x72B9;&#x8C6B;&#x7684;&#x628A;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x62F7;&#x8D1D;&#x5230;&#x4E86;A&#x6A21;&#x5757;&#x4E0B;&#x7684;build.gradle&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;OK&#x5B8C;&#x4E8B;&#x3002;&#x8FC7;&#x4E86;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#xFF0C;B&#x6A21;&#x5757;&#x8FC7;&#x6765;&#x95EE;&#xFF0C;&#x6709;&#x6CA1;&#x6709;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5728;Jenkins&#x4E0A;&#xFF0C;OK&#xFF0C;&#x6709;&#xFF0C;&#x53C8;&#x62F7;&#x4E86;&#x4E00;&#x6B21;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x3002;&#x4E45;&#x800C;&#x4E45;&#x4E4B;&#xFF0C;&#x8FD9;&#x79CD;&#x76F8;&#x540C;&#x7684;&#x57FA;&#x7840;&#x51FD;&#x6570;&#xFF0C;&#x4F1A;&#x6563;&#x843D;&#x5728;&#x5404;&#x4E2A;gradle&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x975E;&#x5E38;&#x4E0D;&#x5229;&#x4E8E;&#x7EF4;&#x62A4;&#xFF0C;&#x540E;&#x671F;&#x8981;&#x4FEE;&#x6539;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x6539;&#x4E86;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x5FD8;&#x4E86;&#x90A3;&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x5FC5;&#x987B;&#x8981;&#x5BFB;&#x627E;&#x51FA;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x6765;&#x590D;&#x7528;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x3002;&#x53C2;&#x8003;&#x53D8;&#x91CF;&#x590D;&#x7528;&#xFF0C;&#x6211;&#x4EEC;&#x5728;ext&#x4E2D;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x3002;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;common_function.gradle&#x6587;&#x4EF6;&#xFF0C;&#x7528;&#x4E8E;&#x590D;&#x7528;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x3002;&#x76EE;&#x524D;&#x4E3A;&#x6B62;&#xFF0C;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x4E2D;&#x6682;&#x65F6;&#x8FD8;&#x53EA;&#x6709;isJenkins&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x628A;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x5BFC;&#x51FA;&#x3002;&#x5BFC;&#x51FA;&#x65B9;&#x5F0F;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF1A;1234//&#x5BFC;&#x51FA;&#x51FD;&#x6570;ext { isJenkins = this.&amp;isJenkins}&#x600E;&#x4E48;&#x6837;&#xFF0C;&#x662F;&#x4E0D;&#x662F;&#x6709;&#x70B9;js&#x4E2D;&#x7684;ES6&#x4E2D;&#x7684;export&#x7684;&#x611F;&#x89C9;&#x3002;&#x6CE8;&#x610F;&#x5BFC;&#x51FA;&#x7684;&#x65F6;&#x5019;&#x9700;&#x8981;&#x52A0;&#x4E0A;&amp;&#xFF0C;&#x6709;&#x70B9;&#x50CF;C++&#x4E2D;&#x7684;&#x53D6;&#x5730;&#x5740;&#x3002;&#x6574;&#x4E2A;&#x6587;&#x4EF6;&#x73B0;&#x5728;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A;1234567891011121314151617181920/** * &#x662F;&#x5426;&#x5728;Jenkins&#x5E73;&#x53F0;&#x4E0A;&#x6253;&#x5305; * @return */boolean isJenkins() { Map&lt;String, String&gt; map = System.getenv() if (map == null){ return false } boolean hasBuildJob = map.containsKey(&quot;JOB_NAME&quot;) boolean hasBuildNumber = map.containsKey(&quot;BUILD_NUMBER&quot;) if (hasBuildJob &amp;&amp; hasBuildNumber) { return true } return false}//&#x5BFC;&#x51FA;&#x51FD;&#x6570;ext { isJenkins = this.&amp;isJenkins}&#x76EE;&#x524D;&#x4E3A;&#x6B62;&#xFF0C;&#x516C;&#x5171;&#x51FD;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x4EE5;&#x53CA;&#x5BFC;&#x51FA;&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;&#x4E86;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x5F15;&#x7528;&#x4E86;&#x3002;&#x5F15;&#x7528;&#x5C31;&#x548C;&#x5E94;&#x7528;&#x63D2;&#x4EF6;&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002;&#x76F4;&#x63A5;&#x5E94;&#x7528;&#x8BE5;common_function.gradle&#x6587;&#x4EF6;&#x5373;&#x53EF;&#x3002;12//&#x516C;&#x5171;&#x51FD;&#x6570;apply from: &quot;${project.rootProject.file(&apos;common_function.gradle&apos;)}&quot;&#x4E4B;&#x540E;&#xFF0C;&#x4F60;&#x5C31;&#x53EF;&#x4EE5;&#x5728;&#x5BF9;&#x5E94;&#x5F15;&#x7528;&#x4E86;common_function.gradle&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x968F;&#x610F;&#x4F7F;&#x7528;isJenkins&#x51FD;&#x6570;&#x4E86;&#x3002;&#x6253;&#x4E2A;&#x6BD4;&#x65B9;&#xFF0C;&#x6709;&#x4E2A;&#x6700;&#x7B80;&#x5355;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x6BD4;&#x5982;&#x70ED;&#x4FEE;&#x590D;&#x53EF;&#x80FD;&#x8981;&#x8BB0;&#x5F55;&#x4E00;&#x4E9B;&#x6587;&#x4EF6;&#xFF0C;&#x4F46;&#x662F;&#x8BB0;&#x5F55;&#x7684;&#x7684;&#x540C;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x964D;&#x4F4E;&#x7F16;&#x8BD1;&#x901F;&#x5EA6;&#xFF0C;&#x800C;&#x5728;&#x672C;&#x5730;&#x6253;&#x5305;&#x7684;&#x65F6;&#x5019;&#x53C8;&#x6070;&#x6070;&#x4E0D;&#x9700;&#x8981;&#xFF0C;&#x4E8E;&#x662F;&#x672C;&#x5730;&#x6253;&#x5305;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x5E94;&#x7528;&#x8BE5;&#x63D2;&#x4EF6;&#x3002;&#x6539;&#x9020;&#x540E;&#x7684;&#x811A;&#x672C;&#x5982;&#x4E0B;&#xFF1A;123456789apply plugin: &apos;com.android.application&apos;//hotpatch&#x914D;&#x7F6E;&#xFF0C;&#x53EA;&#x6709;&#x5728;&#x6253;&#x5305;&#x5E73;&#x53F0;&#x4E0A;&#x65F6;&#x624D;&#x5E94;&#x7528;if (isJenkins()) { apply plugin: &quot;com.fucknmb.tinker&quot; tinker { //...&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x914D;&#x7F6E;&#x9879; }}&#x672C;&#x7BC7;&#x6587;&#x7AE0;&#x867D;&#x7136;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#xFF0C;&#x4F46;&#x662F;&#x638C;&#x63E1;&#x4E86;&#x7684;&#x8BDD;&#xFF0C;&#x5BF9;gradle&#x4EE3;&#x7801;&#x7684;&#x53EF;&#x7EF4;&#x62A4;&#x6027;&#x662F;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x63D0;&#x9AD8;&#x3002;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello 区长]]></title>
      <url>%2F2017%2F01%2F12%2FHello-%E5%8C%BA%E9%95%BF%2F</url>
      <content type="text"><![CDATA[]]></content>
    </entry>

    
  
  
</search>
