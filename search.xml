<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Google Archive Patch 源码解析]]></title>
    <url>%2F2017%2F10%2F05%2FGoogle-Archive-Patch-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[&#x5982;&#x679C;&#x4F60;&#x89C9;&#x5F97;&#x672C;&#x7BC7;&#x6587;&#x7AE0;&#x592A;&#x957F;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x770B;&#x6211;&#x603B;&#x7ED3;&#x7684;&#x7ED3;&#x8BBA;&#xFF1A;Google Archive Patch&#x662F;&#x4E25;&#x683C;&#x7684;&#x57FA;&#x4E8E;Zip&#x6587;&#x4EF6;&#x683C;&#x5F0F;&#x7684;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#xFF0C;&#x5176;&#x6838;&#x5FC3;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x7684;&#x7B97;&#x6CD5;&#x8FD8;&#x662F;BsDiff&#xFF0C;&#x6838;&#x5FC3;&#x5408;&#x6210;&#x6587;&#x4EF6;&#x7684;&#x7B97;&#x6CD5;&#x8FD8;&#x662F;BsPatch&#xFF0C;&#x53EA;&#x662F;&#x5B83;&#x5C06;&#x65E7;Zip&#x6587;&#x4EF6;&#x548C;&#x65B0;Zip&#x6587;&#x4EF6;&#x91CC;&#x7684;&#x5185;&#x5BB9;&#x89E3;&#x538B;&#x51FA;&#x6765;&#x5206;&#x522B;&#x8F6C;&#x4E3A;&#x4E86;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x7684;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x4F7F;&#x7528;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#xFF1B;&#x5408;&#x6210;&#x65F6;&#xFF0C;&#x5C06;&#x65E7;Zip&#x6587;&#x4EF6;&#x91CC;&#x7684;&#x5185;&#x5BB9;&#x89E3;&#x538B;&#x51FA;&#x6765;&#x8F6C;&#x4E3A;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x7684;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x5E94;&#x7528;&#x5408;&#x6210;&#x7B97;&#x6CD5;&#xFF0C;&#x751F;&#x6210;&#x65B0;&#x6587;&#x4EF6;&#x7684;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x7684;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x518D;&#x5229;&#x7528;patch&#x6587;&#x4EF6;&#x4E2D;&#x6BCF;&#x4E2A;ZipEntry&#x7684;&#x504F;&#x79FB;&#x548C;&#x957F;&#x5EA6;&#xFF0C;&#x4EE5;&#x53CA;&#x538B;&#x7F29;&#x7B49;&#x7EA7;&#xFF0C;&#x7F16;&#x7801;&#x7B56;&#x7565;&#xFF0C;nowrap&#x7B49;&#x6807;&#x8BB0;&#xFF0C;&#x5C06;&#x5176;&#x6062;&#x590D;&#x4E3A;Zip&#x6587;&#x4EF6;&#x3002;&#x4E4B;&#x6240;&#x4EE5;&#x4F7F;&#x7528;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x7684;&#x6587;&#x4EF6;&#x662F;&#x56E0;&#x4E3A;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x672A;&#x538B;&#x7F29;&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x5F88;&#x7B80;&#x5355;&#x7684;&#x63CF;&#x8FF0;&#x5176;&#x53D8;&#x5316;&#xFF0C;&#x5982;&#x5B57;&#x7B26;&#x4E32;&#x201D;abc&#x201D;&#xFF0C;&#x53D8;&#x4E3A;&#x4E86;&#x201D;abcd&#x201D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x76F4;&#x89C2;&#x7684;&#x63CF;&#x8FF0;&#x5176;&#x53D8;&#x5316;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x201D;d&#x201D;&#xFF1B;&#x4F46;&#x662F;&#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x7ECF;&#x8FC7;&#x4E86;&#x538B;&#x7F29;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x53D8;&#x5316;&#x4E0D;&#x518D;&#x53EF;&#x4EE5;&#x8FD9;&#x4E48;&#x5BB9;&#x6613;&#x7684;&#x88AB;&#x63CF;&#x8FF0;&#x3002;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5C06;&#x538B;&#x7F29;&#x540E;&#x7684;&#x6587;&#x4EF6;&#x8F6C;&#x4E3A;&#x672A;&#x538B;&#x7F29;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x7684;&#x6587;&#x4EF6;&#x3002;&#x751F;&#x6210;&#x6162;&#xFF1A;Google Archive Patch&#x4E4B;&#x6240;&#x4EE5;&#x751F;&#x6210;Patch&#x7684;&#x65F6;&#x95F4;&#x53D8;&#x957F;&#x4E86;&#xFF0C;&#x662F;&#x56E0;&#x4E3A;Zip&#x6587;&#x4EF6;&#x89E3;&#x538B;&#x51FA;&#x6765;&#x540E;&#xFF0C;&#x751F;&#x6210;&#x7684;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x7684;&#x6587;&#x4EF6;&#x53D8;&#x5927;&#x4E86;&#xFF0C;&#x56E0;&#x6B64;&#x4F7F;&#x7528;BsDiff&#x65F6;&#xFF0C;&#x8017;&#x8D39;&#x7684;&#x65F6;&#x95F4;&#x53D8;&#x957F;&#x4E86;&#x3002;&#x6BD4;&#x5982;&#x89E3;&#x538B;&#x51FA;&#x6765;&#x540E;&#x53D8;&#x5927;&#x4E86;2&#x500D;&#xFF0C;&#x5219;&#x65F6;&#x95F4;&#x6D88;&#x8017;&#x53D8;&#x4E3A;&#x4E86;&#x539F;&#x6765;&#x6574;&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x7684;&#x65F6;&#x95F4;&#x7684;2&#x500D;&#x3002;&#x5408;&#x6210;&#x6162;&#xFF1A;&#x5408;&#x6210;&#x7684;&#x65F6;&#x95F4;&#x53D8;&#x957F;&#x4E86;&#xFF0C;&#x4E00;&#x65B9;&#x9762;&#x7684;&#x6D88;&#x8017;&#x4E5F;&#x662F;&#x56E0;&#x4E3A;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x7684;&#x6587;&#x4EF6;&#x53D8;&#x5927;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E0D;&#x662F;&#x672C;&#x8D28;&#x539F;&#x56E0;&#xFF0C;BsPatch&#x5408;&#x6210;&#x662F;&#x6781;&#x5FEB;&#x7684;&#xFF0C;&#x5C31;&#x7B97;double&#x500D;&#x65F6;&#x95F4;&#xFF0C;&#x8FD9;&#x70B9;&#x65F6;&#x95F4;&#x4E5F;&#x662F;&#x53EF;&#x4EE5;&#x5FFD;&#x7565;&#x4E0D;&#x8BA1;&#x7684;&#x3002;&#x5176;&#x8017;&#x8D39;&#x65F6;&#x95F4;&#x7684;&#x6839;&#x672C;&#x95EE;&#x9898;&#x8FD8;&#x5728;&#x4E8E;&#x91CD;&#x65B0;&#x751F;&#x6210;zip&#x6587;&#x4EF6;&#x65F6;&#x9700;&#x8981;&#x5BF9;&#x6D41;&#x505A;&#x5404;&#x79CD;&#x5224;&#x65AD;&#x64CD;&#x4F5C;&#xFF0C;&#x4E00;&#x90E8;&#x5206;&#x6570;&#x636E;&#x9700;&#x8981;&#x538B;&#x7F29;&#xFF0C;&#x4E00;&#x90E8;&#x5206;&#x6570;&#x636E;&#x9700;&#x8981;&#x62F7;&#x8D1D;&#xFF0C;&#x57FA;&#x672C;&#x4E0A;&#x5927;&#x90E8;&#x5206;&#x7684;&#x8017;&#x65F6;&#x64CD;&#x4F5C;&#x90FD;&#x82B1;&#x5728;&#x4E86;&#x6570;&#x636E;&#x7684;&#x538B;&#x7F29;&#x64CD;&#x4F5C;&#x4E0A;&#x3002;&#x751F;&#x6210;&#x6587;&#x4EF6;&#x5C0F;&#xFF1A;&#x5C0F;&#x7684;&#x539F;&#x56E0;&#x4E0A;&#x9762;&#x5DF2;&#x7ECF;&#x89E3;&#x91CA;&#x8FC7;&#x4E86;&#xFF0C;&#x662F;&#x56E0;&#x4E3A;&#x57FA;&#x4E8E;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x7684;&#x6587;&#x4EF6;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#x7684;&#xFF0C;&#x6587;&#x4EF6;&#x95F4;&#x7684;&#x53D8;&#x6362;&#x53D8;&#x5F97;&#x5F88;&#x5BB9;&#x6613;&#x63CF;&#x8FF0;&#x3002;&#x9879;&#x76EE;&#x5730;&#x5740;Google Archive Patch&#x4E3B;&#x8981;&#x770B;&#x4E09;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;shared&#xFF0C;&#x4E00;&#x4E2A;&#x662F;generator&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x662F;applier&#x3002;shared&#x4E3A;&#x53E6;&#x5916;&#x4E24;&#x4E2A;&#x7684;&#x516C;&#x5171;&#x6A21;&#x5757;&#xFF0C;generator&#x4E3A;&#x5DEE;&#x91CF;&#x751F;&#x6210;&#x6A21;&#x5757;&#xFF0C;applier&#x4E3A;&#x5DEE;&#x91CF;&#x5E94;&#x7528;&#x6A21;&#x5757;&#xFF0C;&#x5176;&#x4E2D;generator&#x4E2D;&#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x4EFD;java&#x7248;&#x7684;bsdiff&#x7B97;&#x6CD5;&#xFF0C;applier&#x4E2D;&#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x4EFD;java&#x7248;&#x7684;bspatch&#x7B97;&#x6CD5;&#x3002;Zip&#x6587;&#x4EF6;&#x683C;&#x5F0F;Google Archive Patch&#x662F;&#x4E25;&#x683C;&#x57FA;&#x4E8E;Zip&#x6587;&#x4EF6;&#x683C;&#x5F0F;&#x7684;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#x6709;&#x5FC5;&#x8981;&#x4E86;&#x89E3;&#x4E00;&#x4E0B;Zip&#x6587;&#x4EF6;&#x683C;&#x5F0F;&#x3002;&#x53C2;&#x8003;&#x4E86;&#x7F51;&#x4E0A;&#x7684;&#x51E0;&#x7BC7;&#x6587;&#x7AE0;&#xFF0C;&#x53D1;&#x73B0;&#x5176;&#x4ECB;&#x7ECD;&#x6587;&#x4EF6;&#x683C;&#x5F0F;&#x7684;&#x65F6;&#x5019;&#x72AF;&#x4E86;&#x4E00;&#x4E2A;&#x5C0F;&#x95EE;&#x9898;&#xFF0C;&#x4ED6;&#x4EEC;&#x90FD;&#x662F;&#x6B63;&#x5E8F;&#x7684;&#x4ECB;&#x7ECD;&#x5176;&#x6784;&#x6210;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x5B9E;&#x5E94;&#x8BE5;&#x5012;&#x8FC7;&#x6765;&#xFF0C;&#x8FD9;&#x6837;&#x66F4;&#x52A0;&#x4FBF;&#x4E8E;&#x7406;&#x89E3;&#x3002;&#x4E00;&#x4E2A;Zip&#x6587;&#x4EF6;&#x4E00;&#x822C;&#x6709;&#x4E09;&#x6BB5;&#x6784;&#x6210;&#x6211;&#x4EEC;&#x4E00;&#x4E00;&#x6765;&#x89E3;&#x91CA;&#x8FD9;&#x4E09;&#x6BB5;&#xFF0C;&#x9996;&#x5148;&#x770B;&#x6700;&#x540E;&#x4E00;&#x6BB5;End of Central DirectoryOffsetBytesDescription&#x5907;&#x6CE8;04End of Central Directory SIGNATURE = 0x06054b50&#x533A;&#x5757;&#x5934;&#x90E8;&#x6807;&#x8BB0;&#xFF0C;&#x56FA;&#x5B9A;&#x503C;0x06054b5042disk number for this archive&#x5FFD;&#x7565;62disk number for the central directory&#x5FFD;&#x7565;82num entries in the central directory on this disk&#x5FFD;&#x7565;102num entries in the central directory overall&#x6838;&#x5FC3;&#x76EE;&#x5F55;&#x7ED3;&#x6784;&#x603B;&#x6570;124the length of the central directory&#x6838;&#x5FC3;&#x76EE;&#x5F55;&#x7684;&#x5927;&#x5C0F;164the file offset of the central directory&#x6838;&#x5FC3;&#x76EE;&#x5F55;&#x7684;&#x504F;&#x79FB;202the length of the zip file comment&#x6CE8;&#x91CA;&#x957F;&#x5EA6;22nfrom here to the EOF is the zip file comment&#x6CE8;&#x91CA;&#x5185;&#x5BB9;&#x8BE5;&#x6BB5;&#x7531;&#x4E00;&#x4E2A;&#x8868;&#x683C;&#x6240;&#x793A;&#x7684;&#x7ED3;&#x6784;&#x6784;&#x6210;&#x3002;&#x8FD9;&#x6BB5;&#x7684;&#x4F5C;&#x7528;&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x627E;&#x51FA;Central Directory&#x7684;&#x4F4D;&#x7F6E;&#x3002;Central Directory&#x7531;End of Central Directory&#x53EF;&#x4EE5;&#x7D22;&#x5F15;&#x51FA;Central Directory&#xFF0C;&#x770B;&#x770B;&#x5176;&#x6784;&#x6210;&#x3002;OffsetBytesDescription&#x5907;&#x6CE8;04Central Directory SIGNATURE = 0x02014b50&#x533A;&#x5757;&#x5934;&#x90E8;&#x6807;&#x8BB0;&#xFF0C;&#x56FA;&#x5B9A;&#x503C;0x02014b5042the version-made-by&#x5FFD;&#x7565;62the version-needed-to-extract&#x5FFD;&#x7565;82the general-purpose flags, read for language encoding&#x901A;&#x7528;&#x4F4D;&#x6807;&#x8BB0;102the compression method&#x538B;&#x7F29;&#x65B9;&#x6CD5;122the MSDOS last modified file time&#x6587;&#x4EF6;&#x6700;&#x540E;&#x4FEE;&#x6539;&#x65F6;&#x95F4;142the MSDOS last modified file date&#x6587;&#x4EF6;&#x6700;&#x540E;&#x4FEE;&#x6539;&#x65E5;&#x671F;164the CRC32 of the uncompressed datacrc32&#x6821;&#x9A8C;&#x7801;204the compressed size&#x538B;&#x7F29;&#x540E;&#x7684;&#x5927;&#x5C0F;244the uncompressed size&#x672A;&#x538B;&#x7F29;&#x7684;&#x5927;&#x5C0F;282the length of the file name&#x6587;&#x4EF6;&#x540D;&#x957F;&#x5EA6;302the length of the extras&#x6269;&#x5C55;&#x57DF;&#x957F;&#x5EA6;322the length of the comment&#x6587;&#x4EF6;&#x6CE8;&#x91CA;&#x957F;&#x5EA6;342the disk number&#x5FFD;&#x7565;362the internal file attributes&#x5FFD;&#x7565;384the external file attributes&#x5FFD;&#x7565;424the offset of the local section entry, where the data islocal entry&#x6240;&#x5728;&#x504F;&#x79FB;46ithe file name&#x6587;&#x4EF6;&#x540D;46+ijthe extras&#x6269;&#x5C55;&#x57DF;46+i+jkthe comment&#x6587;&#x4EF6;&#x6CE8;&#x91CA;&#x8BE5;&#x6BB5;&#x7531;n&#x4E2A;&#x8868;&#x683C;&#x8868;&#x793A;&#x7684;&#x7ED3;&#x6784;&#x6784;&#x6210;&#x3002;&#x8FD9;&#x6BB5;&#x7684;&#x4F5C;&#x7528;&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x627E;&#x51FA;Zip&#x6587;&#x4EF6;&#x771F;&#x5B9E;&#x6570;&#x636E;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;&#x3002;Contents of ZIP entries&#x7531;Central Directory&#x6BB5;&#x53EF;&#x4EE5;&#x7D22;&#x5F15;&#x51FA;Local Entry&#x6BB5;&#xFF0C;&#x6700;&#x540E;&#x770B;&#x4E00;&#x4E0B;Local Entry&#x6BB5;OffsetBytesDescription&#x5907;&#x6CE8;04Local Entry SIGNATURE = 0x04034b50&#x533A;&#x5757;&#x5934;&#x90E8;&#x6807;&#x8BB0;&#xFF0C;&#x56FA;&#x5B9A;&#x503C;0x04034b5042the version-needed-to-extract&#x5FFD;&#x7565;62the general-purpose flags&#x901A;&#x7528;&#x4F4D;&#x6807;&#x8BB0;82the compression method&#x538B;&#x7F29;&#x65B9;&#x6CD5;102the MSDOS last modified file time&#x6587;&#x4EF6;&#x6700;&#x540E;&#x4FEE;&#x6539;&#x65F6;&#x95F4;122the MSDOS last modified file date&#x6587;&#x4EF6;&#x6700;&#x540E;&#x4FEE;&#x6539;&#x65E5;&#x671F;144the CRC32 of the uncompressed datacrc32&#x6821;&#x9A8C;&#x7801;184the compressed size&#x538B;&#x7F29;&#x540E;&#x7684;&#x5927;&#x5C0F;224the uncompressed size&#x672A;&#x538B;&#x7F29;&#x7684;&#x5927;&#x5C0F;262the length of the file name&#x6587;&#x4EF6;&#x540D;&#x957F;&#x5EA6;282the length of the extras&#x6269;&#x5C55;&#x57DF;&#x957F;&#x5EA6;30ithe file name&#x6587;&#x4EF6;&#x540D;30+ijthe extras&#x6269;&#x5C55;&#x533A;30+i+jkfile data&#x771F;&#x5B9E;&#x538B;&#x7F29;&#x6570;&#x636E;&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#x8BE5;&#x6BB5;&#x7531;n&#x4E2A;&#x8868;&#x683C;&#x8868;&#x793A;&#x7684;&#x7ED3;&#x6784;&#x6784;&#x6210;&#x3002;Google Archive Patch&#x89E3;&#x6790;Zip&#x6587;&#x4EF6;&#x4EE3;&#x7801;Google Archive Patch&#x5185;&#x90E8;&#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x89E3;&#x6790;Zip&#x6587;&#x4EF6;&#x7684;mini&#x7ED3;&#x6784;&#xFF0C;&#x89E3;&#x6790;&#x7684;&#x5DE5;&#x4F5C;&#x4E3B;&#x8981;&#x7531;com.google.archivepatcher.generator.MinimalZipParser&#x7C7B;&#x8D1F;&#x8D23;&#xFF0C;&#x627F;&#x8F7D;&#x89E3;&#x6790;&#x51FA;&#x6765;&#x7684;&#x6570;&#x636E;&#x4E3B;&#x8981;&#x7531;MinimalCentralDirectoryMetadata&#x3001;MinimalZipArchive&#x548C;MinimalZipEntry&#x8D1F;&#x8D23;&#x3002;&#x89E3;&#x6790;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x6700;&#x7EC8;&#x8F93;&#x51FA;&#x7684;&#x662F;&#x4E00;&#x4E2A;&#x6309;&#x7167;&#x504F;&#x79FB;&#x91CF;&#x6392;&#x5E8F;&#x7684;MinimalZipEntry&#x5217;&#x8868;&#x3002;12345678910111213141516171819202122232425262728293031323334353637383940414243444546private static List&lt;MinimalZipEntry&gt; listEntriesInternal(RandomAccessFileInputStream in) throws IOException { // Step 1: Locate the end-of-central-directory record header. long offsetOfEocd = MinimalZipParser.locateStartOfEocd(in, 32768); if (offsetOfEocd == -1) { // Archive is weird, abort. throw new ZipException(&quot;EOCD record not found in last 32k of archive, giving up&quot;); } // Step 2: Parse the end-of-central-directory data to locate the central directory itself in.setRange(offsetOfEocd, in.length() - offsetOfEocd); MinimalCentralDirectoryMetadata centralDirectoryMetadata = MinimalZipParser.parseEocd(in); // Step 3: Extract a list of all central directory entries (contiguous data stream) in.setRange( centralDirectoryMetadata.getOffsetOfCentralDirectory(), centralDirectoryMetadata.getLengthOfCentralDirectory()); List&lt;MinimalZipEntry&gt; minimalZipEntries = new ArrayList&lt;MinimalZipEntry&gt;(centralDirectoryMetadata.getNumEntriesInCentralDirectory()); for (int x = 0; x &lt; centralDirectoryMetadata.getNumEntriesInCentralDirectory(); x++) { minimalZipEntries.add(MinimalZipParser.parseCentralDirectoryEntry(in)); } // Step 4: Sort the entries in file order, not central directory order. Collections.sort(minimalZipEntries, LOCAL_ENTRY_OFFSET_COMAPRATOR); // Step 5: Seek out each local entry and calculate the offset of the compressed data within for (int x = 0; x &lt; minimalZipEntries.size(); x++) { MinimalZipEntry entry = minimalZipEntries.get(x); long offsetOfNextEntry; if (x &lt; minimalZipEntries.size() - 1) { // Don&apos;t allow reading past the start of the next entry, for sanity. offsetOfNextEntry = minimalZipEntries.get(x + 1).getFileOffsetOfLocalEntry(); } else { // Last entry. Don&apos;t allow reading into the central directory, for sanity. offsetOfNextEntry = centralDirectoryMetadata.getOffsetOfCentralDirectory(); } long rangeLength = offsetOfNextEntry - entry.getFileOffsetOfLocalEntry(); in.setRange(entry.getFileOffsetOfLocalEntry(), rangeLength); long relativeDataOffset = MinimalZipParser.parseLocalEntryAndGetCompressedDataOffset(in); entry.setFileOffsetOfCompressedData(entry.getFileOffsetOfLocalEntry() + relativeDataOffset); } // Done! return minimalZipEntries; }&#x4EE5;&#x4E0A;&#x4EE3;&#x7801;&#x4E3B;&#x8981;&#x505A;&#x4E86;&#x4E0B;&#x9762;&#x51E0;&#x4EF6;&#x4E8B;&#x5B9A;&#x4F4D;End of Central Directory&#x8D77;&#x59CB;&#x504F;&#x79FB;&#x91CF;&#x627E;&#x5230;Central Directory&#x6BB5;&#x89E3;&#x6790;Central Directory&#x6BB5;&#x6392;&#x5E8F;&#xFF0C;&#x6309;&#x7167;&#x504F;&#x79FB;&#x91CF;&#x5347;&#x5E8F;&#x89E3;&#x6790;&#x771F;&#x5B9E;&#x6570;&#x636E;&#xFF0C;&#x627E;&#x5230;&#x5176;&#x504F;&#x79FB;&#x91CF;&#x5982;&#x4F55;&#x5B9A;&#x4F4D;End of Central Directory&#x8D77;&#x59CB;&#x504F;&#x79FB;&#x91CF;&#xFF0C;&#x5176;&#x5B9E;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x626B;&#x63CF;&#x5B57;&#x8282;&#xFF0C;&#x627E;&#x5230;&#x7279;&#x5B9A;&#x7684;&#x5934;&#x90E8;&#xFF0C;&#x5373;0x06054b50&#xFF0C;&#x5176;&#x5185;&#x90E8;&#x5B9E;&#x73B0;&#x662F;&#x626B;&#x63CF;zip&#x6587;&#x4EF6;&#x7684;&#x6700;&#x540E;32k&#x90E8;&#x5206;&#x7684;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#xFF0C;&#x627E;&#x5230;&#x4E86;&#x5C31;&#x8FD4;&#x56DE;&#xFF0C;&#x627E;&#x4E0D;&#x5230;&#x5C31;&#x629B;&#x5F02;&#x5E38;&#x3002;&#x8FD9;&#x91CC;&#x6709;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5982;&#x679C;&#x6700;&#x540E;32k&#x627E;&#x4E0D;&#x5230;&#x600E;&#x4E48;&#x529E;&#xFF0C;&#x627E;&#x4E86;&#x76F8;&#x5173;&#x8D44;&#x6599;&#xFF0C;&#x4E5F;&#x6CA1;&#x627E;&#x5230;End of Central Directory&#x4E00;&#x5B9A;&#x5728;&#x6700;&#x540E;32k&#x7684;&#x8BF4;&#x6CD5;&#xFF0C;&#x7FFB;&#x4E86;Android Multidex&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x53D1;&#x73B0;&#x5B83;&#x626B;&#x63CF;&#x7684;&#x662F;&#x6700;&#x540E;64k&#x7684;&#x5B57;&#x8282;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x59D1;&#x4E14;&#x8BA4;&#x4E3A;&#x5B83;&#x4E00;&#x5B9A;&#x80FD;&#x626B;&#x63CF;&#x5F97;&#x5230;&#x5427;&#x3002;&#x5176;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122232425public static long locateStartOfEocd(RandomAccessFileInputStream in, int searchBufferLength) throws IOException { final int maxBufferSize = (int) Math.min(searchBufferLength, in.length()); final byte[] buffer = new byte[maxBufferSize];//32k final long rangeStart = in.length() - buffer.length; in.setRange(rangeStart, buffer.length); readOrDie(in, buffer, 0, buffer.length);//read to buffer int offset = locateStartOfEocd(buffer);//locate if (offset == -1) { return -1; } return rangeStart + offset; } public static int locateStartOfEocd(byte[] buffer) { int last4Bytes = 0; // This is the 32 bits of data from the file for (int offset = buffer.length - 1; offset &gt;= 0; offset--) { last4Bytes &lt;&lt;= 8; last4Bytes |= buffer[offset]; if (last4Bytes == EOCD_SIGNATURE) {//0x06054b50 return offset; } } return -1; }&#x627E;&#x5230;End of Central Directory&#x7684;&#x8D77;&#x59CB;&#x504F;&#x79FB;&#x4F4D;&#x7F6E;&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x662F;&#x89E3;&#x6790;&#x8BE5;&#x6BB5;&#x6570;&#x636E;&#xFF0C;&#x8FD4;&#x56DE;MinimalCentralDirectoryMetadata&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4E86;&#x3002;&#x89E3;&#x6790;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;1234567891011121314151617181920212223242526public static MinimalCentralDirectoryMetadata parseEocd(InputStream in) throws IOException, ZipException { if (((int) read32BitUnsigned(in)) != EOCD_SIGNATURE) {//0x06054b50 throw new ZipException(&quot;Bad eocd header&quot;); } // *** 4 bytes encode EOCD_SIGNATURE, ignore (already found and verified). // 2 bytes encode disk number for this archive, ignore. // 2 bytes encode disk number for the central directory, ignore. // 2 bytes encode num entries in the central directory on this disk, ignore. // *** 2 bytes encode num entries in the central directory overall [READ THIS] // *** 4 bytes encode the length of the central directory [READ THIS] // *** 4 bytes encode the file offset of the central directory [READ THIS] // 2 bytes encode the length of the zip file comment, ignore. // Everything else from here to the EOF is the zip file comment, or junk. Ignore. skipOrDie(in, 2 + 2 + 2); int numEntriesInCentralDirectory = read16BitUnsigned(in);//number if (numEntriesInCentralDirectory == 0xffff) { // If 0xffff, this is a zip64 archive and this code doesn&apos;t handle that. throw new ZipException(&quot;No support for zip64&quot;); } long lengthOfCentralDirectory = read32BitUnsigned(in);//length long offsetOfCentralDirectory = read32BitUnsigned(in);//offset return new MinimalCentralDirectoryMetadata( numEntriesInCentralDirectory, offsetOfCentralDirectory, lengthOfCentralDirectory); }&#x4ECE;&#x4EE3;&#x7801;&#x4E2D;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x5176;&#x5B9E;&#x53EA;&#x662F;&#x89E3;&#x6790;&#x51FA;&#x4E86;&#x4E09;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x522B;&#x662F;:Central Directory &#x4E2A;&#x6570; nCentral Directory&#x8D77;&#x59CB;&#x504F;&#x79FB; offsetCentral Directory&#x603B;&#x957F;&#x5EA6; length&#x4E4B;&#x540E;&#x5C31;&#x662F;&#x9501;&#x5B9A;&#x6570;&#x636E;&#x533A;&#x57DF;&#x5728;[offset,offest+length]&#xFF0C;&#x5185;&#x90E8;&#x5B9E;&#x73B0;&#x662F;RandomAccessFile&#x3002;for&#x5FAA;&#x73AF;&#xFF0C;&#x5FAA;&#x73AF;&#x6B21;&#x6570;&#x4E3A;n&#xFF0C;&#x4F9D;&#x6B21;&#x89E3;&#x6790;&#x5404;&#x4E2A;Central Directory&#x3002;&#x5176;&#x89E3;&#x6790;&#x5355;&#x4E2A;Central Directory&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public static MinimalZipEntry parseCentralDirectoryEntry(InputStream in) throws IOException { // *** 4 bytes encode the CENTRAL_DIRECTORY_ENTRY_SIGNATURE, verify for sanity // 2 bytes encode the version-made-by, ignore // 2 bytes encode the version-needed-to-extract, ignore // *** 2 bytes encode the general-purpose flags, read for language encoding. [READ THIS] // *** 2 bytes encode the compression method, [READ THIS] // 2 bytes encode the MSDOS last modified file time, ignore // 2 bytes encode the MSDOS last modified file date, ignore // *** 4 bytes encode the CRC32 of the uncompressed data [READ THIS] // *** 4 bytes encode the compressed size [READ THIS] // *** 4 bytes encode the uncompressed size [READ THIS] // *** 2 bytes encode the length of the file name [READ THIS] // *** 2 bytes encode the length of the extras, needed to skip the bytes later [READ THIS] // *** 2 bytes encode the length of the comment, needed to skip the bytes later [READ THIS] // 2 bytes encode the disk number, ignore // 2 bytes encode the internal file attributes, ignore // 4 bytes encode the external file attributes, ignore // *** 4 bytes encode the offset of the local section entry, where the data is [READ THIS] // n bytes encode the file name // n bytes encode the extras // n bytes encode the comment if (((int) read32BitUnsigned(in)) != CENTRAL_DIRECTORY_ENTRY_SIGNATURE) { throw new ZipException(&quot;Bad central directory header&quot;); } skipOrDie(in, 2 + 2); // Skip version stuff int generalPurposeFlags = read16BitUnsigned(in); int compressionMethod = read16BitUnsigned(in); skipOrDie(in, 2 + 2); // Skip MSDOS junk long crc32OfUncompressedData = read32BitUnsigned(in); long compressedSize = read32BitUnsigned(in); long uncompressedSize = read32BitUnsigned(in); int fileNameLength = read16BitUnsigned(in); int extrasLength = read16BitUnsigned(in); int commentLength = read16BitUnsigned(in); skipOrDie(in, 2 + 2 + 4); // Skip the disk number and file attributes long fileOffsetOfLocalEntry = read32BitUnsigned(in); byte[] fileNameBuffer = new byte[fileNameLength]; readOrDie(in, fileNameBuffer, 0, fileNameBuffer.length); skipOrDie(in, extrasLength + commentLength); // General purpose flag bit 11 is an important hint for the character set used for file names. boolean generalPurposeFlagBit11 = (generalPurposeFlags &amp; (0x1 &lt;&lt; 10)) != 0; return new MinimalZipEntry( compressionMethod, crc32OfUncompressedData, compressedSize, uncompressedSize, fileNameBuffer, generalPurposeFlagBit11, fileOffsetOfLocalEntry); }&#x4E3B;&#x8981;&#x89E3;&#x6790;&#x51FA;&#x5982;&#x4E0B;&#x7684;&#x6570;&#x636E;&#xFF1A;&#x538B;&#x7F29;&#x65B9;&#x6CD5;crc32&#x6821;&#x9A8C;&#x7801;&#x538B;&#x7F29;&#x524D;&#x5927;&#x5C0F;&#x538B;&#x7F29;&#x540E;&#x5927;&#x5C0F;&#x6587;&#x4EF6;&#x540D;&#x901A;&#x7528;&#x6807;&#x8BB0;&#x4F4D;local entry&#x504F;&#x79FB;&#x4F4D;&#x7F6E;offset&#x8FD4;&#x56DE;&#x4E86;&#x4E00;&#x4E2A;list&#xFF0C;&#x91CC;&#x9762;&#x6709;n&#x4E2A;MinimalZipEntry&#x7ED3;&#x6784;&#xFF0C;&#x7ECF;&#x8FC7;&#x6309;offset&#x5347;&#x5E8F;&#x6392;&#x5E8F;&#x540E;&#xFF0C;&#x518D;&#x904D;&#x5386;list&#xFF0C;&#x89E3;&#x6790;&#x5176;&#x5728;local entry&#x4E2D;&#x7684;&#x771F;&#x5B9E;&#x6570;&#x636E;&#x7684;&#x504F;&#x79FB;&#xFF0C;&#x5176;&#x89E3;&#x6790;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718192021222324252627public static long parseLocalEntryAndGetCompressedDataOffset(InputStream in) throws IOException { // *** 4 bytes encode the LOCAL_ENTRY_SIGNATURE, verify for sanity // 2 bytes encode the version-needed-to-extract, ignore // 2 bytes encode the general-purpose flags, ignore // 2 bytes encode the compression method, ignore (redundant with central directory) // 2 bytes encode the MSDOS last modified file time, ignore // 2 bytes encode the MSDOS last modified file date, ignore // 4 bytes encode the CRC32 of the uncompressed data, ignore (redundant with central directory) // 4 bytes encode the compressed size, ignore (redundant with central directory) // 4 bytes encode the uncompressed size, ignore (redundant with central directory) // *** 2 bytes encode the length of the file name, needed to skip the bytes later [READ THIS] // *** 2 bytes encode the length of the extras, needed to skip the bytes later [READ THIS] // The rest is the data, which is the main attraction here. if (((int) read32BitUnsigned(in)) != LOCAL_ENTRY_SIGNATURE) { throw new ZipException(&quot;Bad local entry header&quot;); } int junkLength = 2 + 2 + 2 + 2 + 2 + 4 + 4 + 4; skipOrDie(in, junkLength); // Skip everything up to the length of the file name final int fileNameLength = read16BitUnsigned(in); final int extrasLength = read16BitUnsigned(in); // The file name is already known and will match the central directory, so no need to read it. // The extra field length can be different here versus in the central directory and is used for // things like zipaligning APKs. This single value is the critical part as it dictates where the // actual DATA for the entry begins. return 4 + junkLength + 2 + 2 + fileNameLength + extrasLength; }&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x8DF3;&#x8FC7;&#x4E86;locat entry&#x7684;&#x771F;&#x5B9E;&#x6570;&#x636E;&#x524D;&#x9762;&#x7684;&#x6240;&#x6709;&#x5B57;&#x8282;&#xFF0C;&#x83B7;&#x5F97;&#x504F;&#x79FB;&#x3002;&#x81F3;&#x6B64;Zip&#x6587;&#x4EF6;&#x89E3;&#x6790;&#x5B8C;&#x6210;&#x3002;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#x7684;&#x751F;&#x6210;&#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#x4E3B;&#x8981;&#x5728;FileByFileV1DeltaGenerator&#x4E2D;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718192021222324252627282930313233@Overridepublic void generateDelta(File oldFile, File newFile, OutputStream patchOut) throws IOException, InterruptedException { try (TempFileHolder deltaFriendlyOldFile = new TempFileHolder(); TempFileHolder deltaFriendlyNewFile = new TempFileHolder(); TempFileHolder deltaFile = new TempFileHolder(); FileOutputStream deltaFileOut = new FileOutputStream(deltaFile.file); BufferedOutputStream bufferedDeltaOut = new BufferedOutputStream(deltaFileOut)) { PreDiffExecutor.Builder builder = new PreDiffExecutor.Builder() .readingOriginalFiles(oldFile, newFile) .writingDeltaFriendlyFiles(deltaFriendlyOldFile.file, deltaFriendlyNewFile.file); for (RecommendationModifier modifier : recommendationModifiers) { builder.withRecommendationModifier(modifier); } PreDiffExecutor executor = builder.build(); PreDiffPlan preDiffPlan = executor.prepareForDiffing(); DeltaGenerator deltaGenerator = getDeltaGenerator(); deltaGenerator.generateDelta( deltaFriendlyOldFile.file, deltaFriendlyNewFile.file, bufferedDeltaOut); bufferedDeltaOut.close(); PatchWriter patchWriter = new PatchWriter( preDiffPlan, deltaFriendlyOldFile.file.length(), deltaFriendlyNewFile.file.length(), deltaFile.file); patchWriter.writeV1Patch(patchOut); }}protected DeltaGenerator getDeltaGenerator() { return new BsDiffDeltaGenerator();}&#x5E72;&#x4E86;&#x5982;&#x4E0B;&#x51E0;&#x4EF6;&#x4E8B;:&#x751F;&#x6210;&#x4E86;&#x4E09;&#x4E2A;&#x4E34;&#x65F6;&#x6587;&#x4EF6;&#xFF0C;&#x5206;&#x522B;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x65E7;&#x6587;&#x4EF6;&#x7684;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#xFF0C;&#x65B0;&#x6587;&#x4EF6;&#x7684;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#xFF0C;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#xFF0C;&#x8FD9;&#x4E09;&#x4E2A;&#x6587;&#x4EF6;&#x4F1A;&#x5728;jvm&#x9000;&#x51FA;&#x65F6;&#x81EA;&#x52A8;&#x5220;&#x9664;&#x3002;&#x8C03;&#x7528;PreDiffExecutor&#x7684;prepareForDiffing&#x751F;&#x6210;PreDiffPlan&#x5BF9;&#x8C61;&#xFF0C;&#x8BE5;&#x51FD;&#x6570;&#x505A;&#x4E86;&#x5F88;&#x591A;&#x5F88;&#x591A;&#x5341;&#x5206;&#x590D;&#x6742;&#x7684;&#x4E8B;&#x60C5;&#xFF0C;&#x540E;&#x9762;&#x7EC6;&#x8BF4;&#x5E94;&#x7528;BsDiff&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#x751F;&#x6210;patch&#x6587;&#x4EF6;&#xFF0C;patch&#x6587;&#x4EF6;&#x683C;&#x5F0F;&#x540E;&#x9762;&#x7EC6;&#x8BF4;&#x3002;&#x73B0;&#x5728;&#x6765;&#x770B;&#x4E0B;PreDiffExecutor&#x7684;prepareForDiffing&#x51FD;&#x6570;&#xFF1A;123456789101112131415public PreDiffPlan prepareForDiffing() throws IOException { PreDiffPlan preDiffPlan = generatePreDiffPlan(); List&lt;TypedRange&lt;JreDeflateParameters&gt;&gt; deltaFriendlyNewFileRecompressionPlan = null; if (deltaFriendlyOldFile != null) { // Builder.writingDeltaFriendlyFiles() ensures old and new are non-null when called, so a // check on either is sufficient. deltaFriendlyNewFileRecompressionPlan = Collections.unmodifiableList(generateDeltaFriendlyFiles(preDiffPlan)); } return new PreDiffPlan( preDiffPlan.getQualifiedRecommendations(), preDiffPlan.getOldFileUncompressionPlan(), preDiffPlan.getNewFileUncompressionPlan(), deltaFriendlyNewFileRecompressionPlan);}&#x5E72;&#x4E86;&#x4E0B;&#x9762;&#x51E0;&#x4EF6;&#x4E8B;&#xFF1A;&#x8C03;&#x7528;generatePreDiffPlan&#x51FD;&#x6570;&#xFF0C;&#x751F;&#x6210;&#x4E00;&#x4E2A;PreDiffPlan&#x5BF9;&#x8C61;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x540E;&#x9762;&#x7EC6;&#x8BF4;&#x6839;&#x636E;&#x8FD4;&#x56DE;&#x7684;PreDiffPlan&#x5BF9;&#x8C61;&#xFF0C;&#x8C03;&#x7528;generateDeltaFriendlyFiles&#x51FD;&#x6570;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x540E;&#x9762;&#x7EC6;&#x8BF4;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;PreDiffPlan&#x5BF9;&#x8C61;&#xFF0C;&#x5C06;&#x76F8;&#x5173;&#x53C2;&#x6570;&#x4F20;&#x5165;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x5EFA;&#x8BAE;&#x5217;&#x8868;&#xFF0C;&#x65E7;&#x6587;&#x4EF6;&#x9700;&#x8981;&#x88AB;&#x89E3;&#x538B;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x65B0;&#x95FB;&#x9700;&#x8981;&#x88AB;&#x89E3;&#x538B;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x8FD8;&#x6709;&#x751F;&#x6210;&#x7684;&#x65B0;&#x6587;&#x4EF6;&#x7684;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x76F8;&#x5173;&#x7684;&#x5217;&#x8868;&#x73B0;&#x5728;&#x6765;&#x770B;&#x770B;generatePreDiffPlan&#x51FD;&#x6570;&#xFF1A;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394private PreDiffPlan generatePreDiffPlan() throws IOException { Map&lt;ByteArrayHolder, MinimalZipEntry&gt; originalOldArchiveZipEntriesByPath = new HashMap&lt;ByteArrayHolder, MinimalZipEntry&gt;(); Map&lt;ByteArrayHolder, MinimalZipEntry&gt; originalNewArchiveZipEntriesByPath = new HashMap&lt;ByteArrayHolder, MinimalZipEntry&gt;(); Map&lt;ByteArrayHolder, JreDeflateParameters&gt; originalNewArchiveJreDeflateParametersByPath = new HashMap&lt;ByteArrayHolder, JreDeflateParameters&gt;(); for (MinimalZipEntry zipEntry : MinimalZipArchive.listEntries(originalOldFile)) { ByteArrayHolder key = new ByteArrayHolder(zipEntry.getFileNameBytes()); originalOldArchiveZipEntriesByPath.put(key, zipEntry); } DefaultDeflateCompressionDiviner diviner = new DefaultDeflateCompressionDiviner(); for (DivinationResult divinationResult : diviner.divineDeflateParameters(originalNewFile)) { ByteArrayHolder key = new ByteArrayHolder(divinationResult.minimalZipEntry.getFileNameBytes()); originalNewArchiveZipEntriesByPath.put(key, divinationResult.minimalZipEntry); originalNewArchiveJreDeflateParametersByPath.put(key, divinationResult.divinedParameters); } PreDiffPlanner preDiffPlanner = new PreDiffPlanner( originalOldFile, originalOldArchiveZipEntriesByPath, originalNewFile, originalNewArchiveZipEntriesByPath, originalNewArchiveJreDeflateParametersByPath, recommendationModifiers.toArray(new RecommendationModifier[] {})); return preDiffPlanner.generatePreDiffPlan();}public List&lt;DivinationResult&gt; divineDeflateParameters(File archiveFile) throws IOException { List&lt;DivinationResult&gt; results = new ArrayList&lt;&gt;(); for (MinimalZipEntry minimalZipEntry : MinimalZipArchive.listEntries(archiveFile)) { JreDeflateParameters divinedParameters = null; if (minimalZipEntry.isDeflateCompressed()) { // TODO(pasc): Reuse streams to avoid churning file descriptors MultiViewInputStreamFactory isFactory = new RandomAccessFileInputStreamFactory( archiveFile, minimalZipEntry.getFileOffsetOfCompressedData(), minimalZipEntry.getCompressedSize()); // Keep small entries in memory to avoid unnecessary file I/O. if (minimalZipEntry.getCompressedSize() &lt; (100 * 1024)) { try (InputStream is = isFactory.newStream()) { byte[] compressedBytes = new byte[(int) minimalZipEntry.getCompressedSize()]; is.read(compressedBytes); divinedParameters = divineDeflateParameters(new ByteArrayInputStreamFactory(compressedBytes)); } catch (Exception ignore) { divinedParameters = null; } } else { divinedParameters = divineDeflateParameters(isFactory); } } results.add(new DivinationResult(minimalZipEntry, divinedParameters)); } return results;}public JreDeflateParameters divineDeflateParameters( MultiViewInputStreamFactory compressedDataInputStreamFactory) throws IOException { byte[] copyBuffer = new byte[32 * 1024]; // Iterate over all relevant combinations of nowrap, strategy and level. for (boolean nowrap : new boolean[] {true, false}) { Inflater inflater = new Inflater(nowrap); Deflater deflater = new Deflater(0, nowrap); strategy_loop: for (int strategy : new int[] {0, 1, 2}) { deflater.setStrategy(strategy); for (int level : LEVELS_BY_STRATEGY.get(strategy)) { deflater.setLevel(level); inflater.reset(); deflater.reset(); try { if (matches(inflater, deflater, compressedDataInputStreamFactory, copyBuffer)) { end(inflater, deflater); return JreDeflateParameters.of(level, strategy, nowrap); } } catch (ZipException e) { // Parse error in input. The only possibilities are corruption or the wrong nowrap. // Skip all remaining levels and strategies. break strategy_loop; } } } end(inflater, deflater); } return null;}generatePreDiffPlan&#x505A;&#x7684;&#x4E8B;&#x60C5;&#x662F;&#x751F;&#x6210;&#x4E09;&#x4E2A;map&#x5BF9;&#x8C61;&#x3002;&#x7B2C;&#x4E00;&#x4E2A;map&#x5BF9;&#x8C61;&#x662F;&#x6301;&#x6709;&#x65E7;&#x6587;&#x4EF6;&#x7684;&#x76F8;&#x5173;&#x6570;&#x636E;&#x3002;key&#x4E3A;Zip Entry&#x7684;&#x6587;&#x4EF6;&#x540D;&#x5BF9;&#x5E94;&#x7684;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#x7684;holder&#x7C7B;ByteArrayHolder&#xFF0C;value&#x4E3A;MinimalZipEntry&#x3002;&#x7B2C;&#x4E8C;&#x4E2A;map&#x5BF9;&#x8C61;&#x7684;&#x6301;&#x6709;&#x65B0;&#x6587;&#x4EF6;&#x7684;&#x76F8;&#x5173;&#x6570;&#x636E;&#x3002;key&#x4E3A;Zip Entry&#x7684;&#x6587;&#x4EF6;&#x540D;&#x5BF9;&#x5E94;&#x7684;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#x7684;holder&#x7C7B;ByteArrayHolder&#xFF0C;value&#x4E3A;MinimalZipEntry&#x3002;&#x7B2C;&#x4E09;&#x4E2A;map&#x6570;&#x636E;&#x5C31;&#x662F;&#x6301;&#x6709;&#x63A8;&#x6D4B;&#x51FA;&#x6765;&#x7684;&#x65B0;&#x6587;&#x4EF6;&#x7684;Zip Entry&#x7684;&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;&#x7B56;&#x7565;&#xFF0C;&#x662F;&#x5426;&#x662F;nowrap&#x4E09;&#x4E2A;&#x6570;&#x636E;&#x3002;key&#x4E3A;Zip Entry&#x7684;&#x6587;&#x4EF6;&#x540D;&#x5BF9;&#x5E94;&#x7684;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#x7684;holder&#x7C7B;ByteArrayHolder&#xFF0C;value&#x4E3A;JreDeflateParameters&#x5BF9;&#x4E8E;&#x524D;&#x4E24;&#x4E2A;&#x6570;&#x636E;&#x8C03;&#x7528;&#x524D;&#x9762;&#x89E3;&#x6790;&#x8FC7;&#x7684;Zip&#x6587;&#x4EF6;&#x7ED3;&#x6784;&#x76F8;&#x5173;&#x51FD;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;MinimalZipEntry&#x7684;List&#x7C7B;&#x578B;&#xFF0C;key&#x5C31;&#x6765;&#x81EA;MinimalZipEntry.getFileNameBytes()&#xFF0C;&#x800C;&#x503C;&#x5C31;&#x662F;&#x5176;&#x672C;&#x8EAB;&#x3002;&#x800C;&#x7B2C;&#x4E09;&#x4E2A;&#x6570;&#x636E;&#x6765;&#x7684;&#x6BD4;&#x8F83;&#x8270;&#x8F9B;&#xFF0C;&#x9700;&#x8981;&#x7ECF;&#x8FC7;&#x63A8;&#x6D4B;&#xFF0C;&#x63A8;&#x6D4B;&#x7684;&#x65B9;&#x6CD5;&#x5F88;&#x66B4;&#x529B;&#xFF0C;&#x4E09;&#x5C42;for&#x5FAA;&#x73AF;&#xFF0C;&#x5C06;&#x538B;&#x7F29;&#x7684;&#x6570;&#x636E;&#x89E3;&#x538B;&#x7F29;&#xFF0C;&#x518D;&#x5229;&#x7528;&#x4E09;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x6392;&#x5217;&#x7EC4;&#x5408;&#xFF0C;&#x5373;level&#xFF0C;strategy&#xFF0C;nowrap&#x6392;&#x5217;&#xFF0C;&#x8FDB;&#x884C;&#x91CD;&#x65B0;&#x538B;&#x7F29;&#xFF0C;&#x538B;&#x7F29;&#x540E;&#x7684;&#x6570;&#x636E;&#x5982;&#x679C;&#x7B49;&#x4E8E;&#x4ECE;Zip&#x4E2D;&#x89E3;&#x6790;&#x51FA;&#x6765;&#x7684;&#x538B;&#x7F29;&#x6570;&#x636E;&#xFF0C;&#x5219;&#x5F97;&#x5230;&#x5BF9;&#x5E94;&#x7684;level&#xFF0C;strategy&#xFF0C;nowrap&#x503C;&#x3002;&#x8FD9;&#x4E09;&#x4E2A;&#x503C;&#x7684;&#x627F;&#x8F7D;&#x65B9;&#x5F0F;&#x5C31;&#x662F;JreDeflateParameters&#x3002;&#x5229;&#x7528;&#x8FD9;&#x4E09;&#x4E2A;map&#x6784;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;PreDiffPlanner&#x5BF9;&#x8C61;&#xFF0C;&#x8C03;&#x7528;&#x8BE5;&#x5BF9;&#x8C61;&#x7684;generatePreDiffPlan&#x65B9;&#x6CD5;&#x8FD4;&#x56DE;PreDiffPlan&#xFF0C;&#x5176;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879PreDiffPlan generatePreDiffPlan() throws IOException { List&lt;QualifiedRecommendation&gt; recommendations = getDefaultRecommendations(); for (RecommendationModifier modifier : recommendationModifiers) { // Allow changing the recommendations base on arbitrary criteria. recommendations = modifier.getModifiedRecommendations(oldFile, newFile, recommendations); } // Process recommendations to extract ranges for decompression &amp; recompression Set&lt;TypedRange&lt;Void&gt;&gt; oldFilePlan = new HashSet&lt;&gt;(); Set&lt;TypedRange&lt;JreDeflateParameters&gt;&gt; newFilePlan = new HashSet&lt;&gt;(); for (QualifiedRecommendation recommendation : recommendations) { if (recommendation.getRecommendation().uncompressOldEntry) { long offset = recommendation.getOldEntry().getFileOffsetOfCompressedData(); long length = recommendation.getOldEntry().getCompressedSize(); TypedRange&lt;Void&gt; range = new TypedRange&lt;Void&gt;(offset, length, null); oldFilePlan.add(range); } if (recommendation.getRecommendation().uncompressNewEntry) { long offset = recommendation.getNewEntry().getFileOffsetOfCompressedData(); long length = recommendation.getNewEntry().getCompressedSize(); JreDeflateParameters newJreDeflateParameters = newArchiveJreDeflateParametersByPath.get( new ByteArrayHolder(recommendation.getNewEntry().getFileNameBytes())); TypedRange&lt;JreDeflateParameters&gt; range = new TypedRange&lt;JreDeflateParameters&gt;(offset, length, newJreDeflateParameters); newFilePlan.add(range); } } List&lt;TypedRange&lt;Void&gt;&gt; oldFilePlanList = new ArrayList&lt;&gt;(oldFilePlan); Collections.sort(oldFilePlanList); List&lt;TypedRange&lt;JreDeflateParameters&gt;&gt; newFilePlanList = new ArrayList&lt;&gt;(newFilePlan); Collections.sort(newFilePlanList); return new PreDiffPlan( Collections.unmodifiableList(recommendations), Collections.unmodifiableList(oldFilePlanList), Collections.unmodifiableList(newFilePlanList));}private List&lt;QualifiedRecommendation&gt; getDefaultRecommendations() throws IOException { List&lt;QualifiedRecommendation&gt; recommendations = new ArrayList&lt;&gt;(); // This will be used to find files that have been renamed, but not modified. This is relatively // cheap to construct as it just requires indexing all entries by the uncompressed CRC32, and // the CRC32 is already available in the ZIP headers. SimilarityFinder trivialRenameFinder = new Crc32SimilarityFinder(oldFile, oldArchiveZipEntriesByPath.values()); // Iterate over every pair of entries and get a recommendation for what to do. for (Map.Entry&lt;ByteArrayHolder, MinimalZipEntry&gt; newEntry : newArchiveZipEntriesByPath.entrySet()) { ByteArrayHolder newEntryPath = newEntry.getKey(); MinimalZipEntry oldZipEntry = oldArchiveZipEntriesByPath.get(newEntryPath); if (oldZipEntry == null) { // The path is only present in the new archive, not in the old archive. Try to find a // similar file in the old archive that can serve as a diff base for the new file. List&lt;MinimalZipEntry&gt; identicalEntriesInOldArchive = trivialRenameFinder.findSimilarFiles(newFile, newEntry.getValue()); if (!identicalEntriesInOldArchive.isEmpty()) { // An identical file exists in the old archive at a different path. Use it for the // recommendation and carry on with the normal logic. // All entries in the returned list are identical, so just pick the first one. // NB, in principle it would be optimal to select the file that required the least work // to apply the patch - in practice, it is unlikely that an archive will contain multiple // copies of the same file that are compressed differently, so don&apos;t bother with that // degenerate case. oldZipEntry = identicalEntriesInOldArchive.get(0); } } // If the attempt to find a suitable diff base for the new entry has failed, oldZipEntry is // null (nothing to do in that case). Otherwise, there is an old entry that is relevant, so // get a recommendation for what to do. if (oldZipEntry != null) { recommendations.add(getRecommendation(oldZipEntry, newEntry.getValue())); } } return recommendations;}&#x8BE5;&#x51FD;&#x6570;&#x4E3B;&#x8981;&#x751F;&#x6210;&#x4E24;&#x4E2A;List&#x5BF9;&#x8C61;&#xFF0C;&#x5206;&#x522B;&#x662F;&#xFF1A;&#x65E7;&#x6587;&#x4EF6;&#x7684;&#x5EFA;&#x8BAE;&#x89E3;&#x538B;&#x7684;Zip Entry&#x7684;&#x538B;&#x7F29;&#x6570;&#x636E;&#x504F;&#x79FB;&#x4F4D;&#x7F6E;&#x548C;&#x6570;&#x636E;&#x957F;&#x5EA6;&#xFF0C;&#x627F;&#x8F7D;&#x7684;&#x8F7D;&#x4F53;&#x662F;TypedRange&#xFF0C;&#x6CDB;&#x578B;&#x662F;Void&#xFF0C;&#x6240;&#x6709;&#x76F8;&#x5173;&#x6587;&#x4EF6;&#x7EC4;&#x6210;&#x4E00;&#x4E2A;List&#x5BF9;&#x8C61;&#x65B0;&#x6587;&#x4EF6;&#x7684;&#x5EFA;&#x8BAE;&#x89E3;&#x538B;&#x7684;Zip Entry&#x7684;&#x538B;&#x7F29;&#x6570;&#x636E;&#x7684;&#x504F;&#x79FB;&#x4F4D;&#x7F6E;&#x548C;&#x6570;&#x636E;&#x957F;&#x5EA6;&#xFF0C;&#x627F;&#x8F7D;&#x7684;&#x8F7D;&#x4F53;&#x662F;TypedRange&#xFF0C;&#x6CDB;&#x578B;&#x662F;JreDeflateParameters&#xFF0C;&#x6CDB;&#x578B;&#x53C2;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x6765;&#x81EA;&#x4E0A;&#x4E00;&#x6B65;&#x89E3;&#x6790;&#x51FA;&#x6765;&#x7684;&#x7B2C;&#x4E09;&#x4E2A;map&#xFF0C;&#x6240;&#x6709;&#x76F8;&#x5173;&#x4EF6;&#x7EC4;&#x6210;&#x4E00;&#x4E2A;List&#x5BF9;&#x8C61;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;List&#x5BF9;&#x8C61;&#x5404;&#x81EA;&#x6309;&#x504F;&#x79FB;&#x5347;&#x5E8F;&#x6392;&#x5E8F;&#x3002;&#x4E0A;&#x9762;&#x63D0;&#x5230;&#x5EFA;&#x8BAE;&#x89E3;&#x538B;&#x7684;Zip Entry&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x662F;&#x600E;&#x4E48;&#x6765;&#x7684;&#x5462;&#xFF1F;&#x6765;&#x81EA;&#x4E0B;&#x9762;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;12345678910111213141516171819202122232425262728293031323334353637383940private List&lt;QualifiedRecommendation&gt; getDefaultRecommendations() throws IOException { List&lt;QualifiedRecommendation&gt; recommendations = new ArrayList&lt;&gt;(); // This will be used to find files that have been renamed, but not modified. This is relatively // cheap to construct as it just requires indexing all entries by the uncompressed CRC32, and // the CRC32 is already available in the ZIP headers. SimilarityFinder trivialRenameFinder = new Crc32SimilarityFinder(oldFile, oldArchiveZipEntriesByPath.values()); // Iterate over every pair of entries and get a recommendation for what to do. for (Map.Entry&lt;ByteArrayHolder, MinimalZipEntry&gt; newEntry : newArchiveZipEntriesByPath.entrySet()) { ByteArrayHolder newEntryPath = newEntry.getKey(); MinimalZipEntry oldZipEntry = oldArchiveZipEntriesByPath.get(newEntryPath); if (oldZipEntry == null) { // The path is only present in the new archive, not in the old archive. Try to find a // similar file in the old archive that can serve as a diff base for the new file. List&lt;MinimalZipEntry&gt; identicalEntriesInOldArchive = trivialRenameFinder.findSimilarFiles(newFile, newEntry.getValue()); if (!identicalEntriesInOldArchive.isEmpty()) { // An identical file exists in the old archive at a different path. Use it for the // recommendation and carry on with the normal logic. // All entries in the returned list are identical, so just pick the first one. // NB, in principle it would be optimal to select the file that required the least work // to apply the patch - in practice, it is unlikely that an archive will contain multiple // copies of the same file that are compressed differently, so don&apos;t bother with that // degenerate case. oldZipEntry = identicalEntriesInOldArchive.get(0); } } // If the attempt to find a suitable diff base for the new entry has failed, oldZipEntry is // null (nothing to do in that case). Otherwise, there is an old entry that is relevant, so // get a recommendation for what to do. if (oldZipEntry != null) { recommendations.add(getRecommendation(oldZipEntry, newEntry.getValue())); } } return recommendations;}&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x4E3B;&#x8981;&#x505A;&#x5982;&#x4E0B;&#x5DE5;&#x4F5C;:&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x76F8;&#x4F3C;&#x6587;&#x4EF6;&#x67E5;&#x627E;&#x5668;&#xFF0C;&#x5185;&#x90E8;&#x4F7F;&#x7528;Map&#x8FDB;&#x884C;&#x67E5;&#x627E;&#xFF0C;key&#x4E3A;crc32&#xFF0C;&#x503C;&#x4E3A;&#x65E7;&#x6587;&#x4EF6;&#x7684;MinimalZipEntry&#xFF0C;&#x4E14;&#x662F;&#x4E00;&#x4E2A;List&#xFF0C;&#x56E0;&#x4E3A;crc32&#x76F8;&#x540C;&#x7684;&#x6587;&#x4EF6;&#x53EF;&#x80FD;&#x6709;&#x591A;&#x4E2A;&#x3002;&#x904D;&#x5386;&#x65B0;&#x6587;&#x4EF6;MinimalZipEntry&#x7684;List&#x5BF9;&#x8C61;&#xFF0C;&#x67E5;&#x770B;&#x5BF9;&#x5E94;&#x540D;&#x5B57;&#x5728;&#x65E7;&#x6587;&#x4EF6;&#x4E2D;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x5219;&#x901A;&#x8FC7;&#x7B2C;&#x4E00;&#x6B65;&#x7684;&#x76F8;&#x4F3C;&#x6587;&#x4EF6;&#x67E5;&#x627E;&#x5668;&#x67E5;&#x627E;crc32&#x76F8;&#x540C;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#x4E86;&#xFF0C;&#x53D6;List&#x5BF9;&#x8C61;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x3002;&#x5982;&#x679C;&#x627E;&#x4E0D;&#x5230;&#xFF0C;&#x5219;&#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x88AB;&#x79FB;&#x9664;&#x4E86;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x7BA1;&#x5B83;&#x3002;&#x901A;&#x8FC7;&#x65E7;Entry&#x548C;&#x65B0;Entry&#x8C03;&#x7528;getRecommendation&#x51FD;&#x6570;&#x8FD4;&#x56DE;QualifiedRecommendation&#x5BF9;&#x8C61;&#xFF0C;add&#x5230;List&#x5BF9;&#x8C61;&#x4E2D;&#xFF1B;&#x8BE5;&#x5BF9;&#x8C61;&#x6301;&#x6709;&#x4E86;&#x65B0;&#x65E7;Entry&#xFF0C;&#x4EE5;&#x53CA;&#x65B0;&#x65E7;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x88AB;&#x89E3;&#x538B;&#x7B49;&#x76F8;&#x5173;&#x4FE1;&#x606F;&#x3002;&#x8FD4;&#x56DE;&#x627E;&#x5230;&#x7684;QualifiedRecommendation&#x5217;&#x8868;QualifiedRecommendation&#x7684;&#x751F;&#x6210;&#x7B97;&#x6CD5;&#x662F;&#x4EC0;&#x4E48;&#x5462;&#xFF0C;&#x5B83;&#x662F;&#x8C03;&#x7528;getRecommendation&#x8FD4;&#x56DE;&#x7684;&#xFF0C;&#x8BE5;&#x51FD;&#x6570;&#x4EE3;&#x7801;&#x5982;&#x4E0B;:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768private QualifiedRecommendation getRecommendation(MinimalZipEntry oldEntry, MinimalZipEntry newEntry) throws IOException { // Reject anything that is unsuitable for uncompressed diffing. // Reason singled out in order to monitor unsupported versions of zlib. if (unsuitableDeflate(newEntry)) { return new QualifiedRecommendation( oldEntry, newEntry, Recommendation.UNCOMPRESS_NEITHER, RecommendationReason.DEFLATE_UNSUITABLE); } // Reject anything that is unsuitable for uncompressed diffing. if (unsuitable(oldEntry, newEntry)) { return new QualifiedRecommendation( oldEntry, newEntry, Recommendation.UNCOMPRESS_NEITHER, RecommendationReason.UNSUITABLE); } // If both entries are already uncompressed there is nothing to do. if (bothEntriesUncompressed(oldEntry, newEntry)) { return new QualifiedRecommendation( oldEntry, newEntry, Recommendation.UNCOMPRESS_NEITHER, RecommendationReason.BOTH_ENTRIES_UNCOMPRESSED); } // The following are now true: // 1. At least one of the entries is compressed. // 1. The old entry is either uncompressed, or is compressed with deflate. // 2. The new entry is either uncompressed, or is reproducibly compressed with deflate. if (uncompressedChangedToCompressed(oldEntry, newEntry)) { return new QualifiedRecommendation( oldEntry, newEntry, Recommendation.UNCOMPRESS_NEW, RecommendationReason.UNCOMPRESSED_CHANGED_TO_COMPRESSED); } if (compressedChangedToUncompressed(oldEntry, newEntry)) { return new QualifiedRecommendation( oldEntry, newEntry, Recommendation.UNCOMPRESS_OLD, RecommendationReason.COMPRESSED_CHANGED_TO_UNCOMPRESSED); } // At this point, both entries must be compressed with deflate. if (compressedBytesChanged(oldEntry, newEntry)) { return new QualifiedRecommendation( oldEntry, newEntry, Recommendation.UNCOMPRESS_BOTH, RecommendationReason.COMPRESSED_BYTES_CHANGED); } // If the compressed bytes have not changed, there is no need to do anything. return new QualifiedRecommendation( oldEntry, newEntry, Recommendation.UNCOMPRESS_NEITHER, RecommendationReason.COMPRESSED_BYTES_IDENTICAL); }&#x4E3B;&#x8981;&#x6709;7&#x79CD;&#x7C7B;&#x578B;:&#x8BE5;&#x6587;&#x4EF6;&#x88AB;&#x538B;&#x7F29;&#x8FC7;&#xFF0C;&#x4F46;&#x662F;&#x65E0;&#x6CD5;&#x63A8;&#x6D4B;&#x51FA;&#x5176;JreDeflateParamyaseters&#x53C2;&#x6570;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x65E0;&#x6CD5;&#x83B7;&#x5F97;&#x5176;&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;&#x7F16;&#x7801;&#x7B56;&#x7565;&#xFF0C;nowrap&#x4E09;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x6CA1;&#x6709;&#x4E86;&#x8FD9;&#x4E09;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x65E0;&#x6CD5;&#x91CD;&#x65B0;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x4E0D;&#x5EFA;&#x8BAE;&#x89E3;&#x538B;&#xFF0C;&#x539F;&#x56E0;&#x662F;&#x627E;&#x4E0D;&#x5230;&#x5408;&#x9002;&#x7684;deflate&#x53C2;&#x6570;&#x8FD8;&#x539F;&#x538B;&#x7F29;&#x6570;&#x636E;&#x65E7;&#x6587;&#x4EF6;&#xFF0C;&#x6216;&#x65B0;&#x6587;&#x4EF6;&#x88AB;&#x538B;&#x7F29;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x662F;&#x4E0D;&#x652F;&#x6301;&#x7684;&#x538B;&#x7F29;&#x7B97;&#x6CD5;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x4E0D;&#x5EFA;&#x8BAE;&#x89E3;&#x538B;&#x7F29;&#xFF0C;&#x539F;&#x56E0;&#x662F;&#x4F7F;&#x7528;&#x4E86;&#x4E0D;&#x652F;&#x6301;&#x7684;&#x538B;&#x7F29;&#x7B97;&#x6CD5;&#x5982;&#x679C;&#x65B0;&#x65E7;&#x6587;&#x4EF6;&#x90FD;&#x6CA1;&#x6709;&#x88AB;&#x538B;&#x7F29;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x4E0D;&#x9700;&#x8981;&#x89E3;&#x538B;&#xFF0C;&#x539F;&#x56E0;&#x662F;&#x90FD;&#x6CA1;&#x6709;&#x88AB;&#x538B;&#x7F29;&#x5982;&#x679C;&#x65E7;&#x6587;&#x4EF6;&#x672A;&#x538B;&#x7F29;&#xFF0C;&#x65B0;&#x6587;&#x4EF6;&#x5DF2;&#x538B;&#x7F29;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x65B0;&#x6587;&#x4EF6;&#x9700;&#x8981;&#x89E3;&#x538B;&#xFF0C;&#x539F;&#x56E0;&#x662F;&#x4ECE;&#x672A;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x53D8;&#x6210;&#x4E86;&#x5DF2;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x5982;&#x679C;&#x65E7;&#x6587;&#x4EF6;&#x5DF2;&#x538B;&#x7F29;&#xFF0C;&#x65B0;&#x6587;&#x4EF6;&#x672A;&#x538B;&#x7F29;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x65E7;&#x6587;&#x4EF6;&#x9700;&#x8981;&#x89E3;&#x538B;&#xFF0C;&#x539F;&#x56E0;&#x662F;&#x4ECE;&#x5DF2;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x53D8;&#x6210;&#x4E86;&#x672A;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x5982;&#x679C;&#x65B0;&#x65E7;&#x6587;&#x4EF6;&#x90FD;&#x5DF2;&#x7ECF;&#x538B;&#x7F29;&#xFF0C;&#x4E14;&#x53D1;&#x751F;&#x4E86;&#x53D8;&#x5316;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x9700;&#x8981;&#x89E3;&#x538B;&#x65B0;&#x65E7;&#x6587;&#x4EF6;&#xFF0C;&#x539F;&#x56E0;&#x662F;&#x6587;&#x4EF6;&#x53D1;&#x751F;&#x6539;&#x53D8;&#x6CA1;&#x6709;&#x65B0;&#x65E7;&#x6587;&#x4EF6;&#x6CA1;&#x6709;&#x53D1;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x4E0D;&#x9700;&#x8981;&#x89E3;&#x538B;&#x65B0;&#x65E7;&#x6587;&#x4EF6;&#xFF0C;&#x539F;&#x56E0;&#x662F;&#x6587;&#x4EF6;&#x672A;&#x53D1;&#x751F;&#x6539;&#x53D8;&#x6709;&#x4E86;&#x4EE5;&#x4E0A;&#x4FE1;&#x606F;&#xFF0C;&#x518D;&#x6765;&#x770B;&#x770B;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x7684;&#x6587;&#x4EF6;&#x662F;&#x600E;&#x4E48;&#x751F;&#x6210;&#x7684;&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384 private List&lt;TypedRange&lt;JreDeflateParameters&gt;&gt; generateDeltaFriendlyFiles(PreDiffPlan preDiffPlan) throws IOException { try (FileOutputStream out = new FileOutputStream(deltaFriendlyOldFile); BufferedOutputStream bufferedOut = new BufferedOutputStream(out)) { DeltaFriendlyFile.generateDeltaFriendlyFile( preDiffPlan.getOldFileUncompressionPlan(), originalOldFile, bufferedOut); } try (FileOutputStream out = new FileOutputStream(deltaFriendlyNewFile); BufferedOutputStream bufferedOut = new BufferedOutputStream(out)) { return DeltaFriendlyFile.generateDeltaFriendlyFile( preDiffPlan.getNewFileUncompressionPlan(), originalNewFile, bufferedOut); } }public static &lt;T&gt; List&lt;TypedRange&lt;T&gt;&gt; generateDeltaFriendlyFile( List&lt;TypedRange&lt;T&gt;&gt; rangesToUncompress, File file, OutputStream deltaFriendlyOut) throws IOException { return generateDeltaFriendlyFile( rangesToUncompress, file, deltaFriendlyOut, true, DEFAULT_COPY_BUFFER_SIZE); } public static &lt;T&gt; List&lt;TypedRange&lt;T&gt;&gt; generateDeltaFriendlyFile( List&lt;TypedRange&lt;T&gt;&gt; rangesToUncompress, File file, OutputStream deltaFriendlyOut, boolean generateInverse, int copyBufferSize) throws IOException { List&lt;TypedRange&lt;T&gt;&gt; inverseRanges = null; if (generateInverse) { inverseRanges = new ArrayList&lt;TypedRange&lt;T&gt;&gt;(rangesToUncompress.size()); } long lastReadOffset = 0; RandomAccessFileInputStream oldFileRafis = null; PartiallyUncompressingPipe filteredOut = new PartiallyUncompressingPipe(deltaFriendlyOut, copyBufferSize); try { oldFileRafis = new RandomAccessFileInputStream(file); for (TypedRange&lt;T&gt; rangeToUncompress : rangesToUncompress) { long gap = rangeToUncompress.getOffset() - lastReadOffset; if (gap &gt; 0) { // Copy bytes up to the range start point oldFileRafis.setRange(lastReadOffset, gap); filteredOut.pipe(oldFileRafis, PartiallyUncompressingPipe.Mode.COPY); } // Now uncompress the range. oldFileRafis.setRange(rangeToUncompress.getOffset(), rangeToUncompress.getLength()); long inverseRangeStart = filteredOut.getNumBytesWritten(); // TODO(andrewhayden): Support nowrap=false here? Never encountered in practice. // This would involve catching the ZipException, checking if numBytesWritten is still zero, // resetting the stream and trying again. filteredOut.pipe(oldFileRafis, PartiallyUncompressingPipe.Mode.UNCOMPRESS_NOWRAP); lastReadOffset = rangeToUncompress.getOffset() + rangeToUncompress.getLength(); if (generateInverse) { long inverseRangeEnd = filteredOut.getNumBytesWritten(); long inverseRangeLength = inverseRangeEnd - inverseRangeStart; TypedRange&lt;T&gt; inverseRange = new TypedRange&lt;T&gt;( inverseRangeStart, inverseRangeLength, rangeToUncompress.getMetadata()); inverseRanges.add(inverseRange); } } // Finish the final bytes of the file long bytesLeft = oldFileRafis.length() - lastReadOffset; if (bytesLeft &gt; 0) { oldFileRafis.setRange(lastReadOffset, bytesLeft); filteredOut.pipe(oldFileRafis, PartiallyUncompressingPipe.Mode.COPY); } } finally { try { oldFileRafis.close(); } catch (Exception ignored) { // Nothing } try { filteredOut.close(); } catch (Exception ignored) { // Nothing } } return inverseRanges; }&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x6BD4;&#x8F83;&#x5DE7;&#x5999;&#xFF0C;&#x4E5F;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#xFF0C;&#x5176;&#x8FC7;&#x7A0B;&#x5982;&#x4E0B;&#xFF1A;&#x904D;&#x5386;&#x9700;&#x8981;&#x89E3;&#x538B;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x83B7;&#x5F97;&#x5176;&#x504F;&#x79FB;&#xFF0C;&#x5C06;&#x8BE5;&#x504F;&#x79FB;&#x51CF;&#x53BB;&#x4E0A;&#x6B21;&#x8BFB;&#x7684;&#x504F;&#x79FB;&#x4F4D;&#x7F6E;lastReadOffset&#xFF0C;&#x5F97;&#x5230;&#x4E00;&#x4E2A;gap&#x503C;&#xFF0C;&#x8FD9;&#x4E2A;&#x503C;&#x4F7F;&#x7528;COPY&#x76F4;&#x63A5;&#x62F7;&#x8D1D;&#x5B50;&#x6770;&#x6570;&#x7EC4;&#x7136;&#x540E;&#x5C06;&#x6570;&#x636E;&#x5B9A;&#x4F4D;&#x5230;[offset,offset+length]&#x4E4B;&#x95F4;&#xFF0C;&#x83B7;&#x5F97;&#x5DF2;&#x7ECF;&#x89E3;&#x538B;&#x5199;&#x5165;&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x5927;&#x5C0F;&#xFF0C;&#x8D4B;&#x503C;&#x7ED9;inverseRangeStart&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x538B;&#x7F29;&#x6570;&#x636E;&#x4F7F;&#x7528;&#x5BF9;&#x5E94;&#x7684;&#x53C2;&#x6570;&#x8FDB;&#x884C;&#x89E3;&#x538B;&#xFF0C;&#x5C06;&#x4E0A;&#x6B21;&#x8BFB;&#x7684;&#x504F;&#x79FB;&#x4F4D;&#x7F6E;lastReadOffset&#x8BBE;&#x7F6E;&#x4E3A;&#x5F53;&#x524D;&#x7684;offset+length&#x503C;&#x3002;&#x5224;&#x65AD;generateInverse&#x662F;&#x5426;&#x4E3A;true&#xFF0C;&#x8FD9;&#x91CC;&#x8FD9;&#x4E2A;&#x503C;&#x6C38;&#x8FDC;&#x4E3A;true&#xFF0C;&#x56E0;&#x4E3A;&#x5165;&#x53C2;&#x4F20;&#x4E86;true&#x3002;&#x83B7;&#x5F97;&#x5DF2;&#x7ECF;&#x89E3;&#x538B;&#x5199;&#x5165;&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x5927;&#x5C0F;&#xFF0C;&#x8D4B;&#x503C;&#x7ED9;inverseRangeEnd&#xFF0C;&#x4F7F;&#x7528;inverseRangeEnd&#x51CF;&#x53BB;inverseRangeStart&#x5C31;&#x662F;&#x89E3;&#x538B;&#x4E4B;&#x540E;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x6784;&#x5EFA;TypedRange&#x5BF9;&#x8C61;&#xFF0C;add&#x5230;list&#x4E2D;&#x6240;&#x6709;&#x6570;&#x636E;&#x904D;&#x5386;&#x5B8C;&#x4E4B;&#x540E;&#xFF0C;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x8BFB;&#x7684;&#x4F4D;&#x7F6E;&#x5230;&#x6587;&#x4EF6;&#x7ED3;&#x5C3E;&#x662F;&#x5426;&#x8FD8;&#x6709;&#x6570;&#x636E;&#x5269;&#x4F59;&#xFF0C;&#x5982;&#x679C;&#x6709;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x5199;&#x5165;&#x8FD4;&#x56DE;TypedRange&#x7684;List&#x5BF9;&#x8C61;&#x3002;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#x62BD;&#x8C61;&#xFF0C;&#x7528;&#x4E00;&#x5F20;&#x56FE;&#x6765;&#x8BF4;&#x660E;&#x6574;&#x4E2A;&#x6587;&#x4EF6;&#x89E3;&#x538B;&#x8FC7;&#x7A0B;&#x3002;&#x4E0A;&#x56FE;&#x662F;zip&#x6587;&#x4EF6;&#xFF0C;&#x7EFF;&#x8272;&#x7684;gap&#x662F;&#x4E00;&#x4E9B;&#x63CF;&#x8FF0;&#x4FE1;&#x606F;&#xFF0C;&#x7EA2;&#x8272;&#x7684;&#x8868;&#x793A;&#x771F;&#x5B9E;&#x7684;&#x538B;&#x7F29;&#x6570;&#x636E;&#xFF0C;&#x84DD;&#x8272;&#x7684;&#x8868;&#x793A;&#x6587;&#x4EF6;&#x672B;&#x5C3E;&#x9057;&#x7559;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5BF9;&#x4E8E;gap&#xFF0C;&#x6267;&#x884C;&#x62F7;&#x8D1D;&#x64CD;&#x4F5C;&#xFF0C;&#x5BF9;&#x4E8E;&#x538B;&#x7F29;&#x6570;&#x636E;&#xFF0C;&#x6267;&#x884C;&#x89E3;&#x538B;&#x64CD;&#x4F5C;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x89E3;&#x538B;&#x4E4B;&#x540E;&#x771F;&#x5B9E;&#x7684;&#x504F;&#x79FB;offset&#x548C;&#x89E3;&#x538B;&#x4E4B;&#x540E;&#x771F;&#x5B9E;&#x6570;&#x636E;&#x7684;&#x5927;&#x5C0F;length&#xFF0C;&#x6240;&#x6709;&#x6570;&#x636E;&#x904D;&#x5386;&#x5B8C;&#x4E4B;&#x540E;&#xFF0C;&#x6587;&#x4EF6;&#x672B;&#x5C3E;&#x8FD8;&#x6709;&#x4E00;&#x90E8;&#x5206;&#x9057;&#x7559;&#x6570;&#x636E;&#xFF0C;&#x5BF9;&#x5176;&#x6267;&#x884C;&#x62F7;&#x8D1D;&#x64CD;&#x4F5C;&#x3002;&#x7279;&#x522B;&#x6CE8;&#x610F;&#x8FD4;&#x56DE;&#x7684;TypedRange&#x662F;&#x65B0;&#x6587;&#x4EF6;&#x7684;&#x89E3;&#x538B;&#x4E4B;&#x540E;&#x7684;offset&#x548C;length&#xFF0C;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x5341;&#x5206;&#x91CD;&#x8981;&#xFF0C;&#x8FD8;&#x539F;zip&#x6587;&#x4EF6;&#x5C31;&#x9760;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x4E86;&#x3002;&#x6709;&#x4E86;&#x65B0;&#x65E7;&#x6587;&#x4EF6;&#x7684;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#x4E4B;&#x540E;&#x505A;&#x4EC0;&#x4E48;&#x5462;&#xFF0C;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x4F7F;&#x7528;BsDiff&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#x5199;&#x5165;patch&#x6587;&#x4EF6;&#x3002;patch&#x6587;&#x4EF6;&#x7684;&#x683C;&#x5F0F;&#x5982;&#x4E0B;&#xFF1A;OffsetBytesDescription&#x5907;&#x6CE8;08Versioned Identifier&#x5934;&#x90E8;&#x6807;&#x8BB0;&#xFF0C;&#x56FA;&#x5B9A;&#x503C;&#x201D;GFbFv1_0&#x201D;&#xFF0C;UTF-8&#x5B57;&#x7B26;&#x4E32;84Flags (currently unused, but reserved)&#x6807;&#x8BB0;&#x672A;&#xFF0C;&#x9884;&#x7559;128Delta-friendly old archive size&#x65E7;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#x5927;&#x5C0F;&#xFF0C;64&#x4F4D;&#x65E0;&#x7B26;&#x53F7;&#x6574;&#x578B;204Num old archive uncompression ops&#x65E7;&#x6587;&#x4EF6;&#x5F85;&#x89E3;&#x538B;&#x6587;&#x4EF6;&#x4E2A;&#x6570;&#xFF0C;32&#x4F4D;&#x65E0;&#x7B26;&#x53F7;&#x6574;&#x578B;24iOld archive uncompression op 1&#x2026;n&#x65E7;&#x6587;&#x4EF6;&#x5F85;&#x89E3;&#x538B;&#x6587;&#x4EF6;&#x7684;&#x504F;&#x79FB;&#x548C;&#x5927;&#x5C0F;&#xFF0C;&#x603B;&#x5171;n&#x4E2A;24+i4Num new archive recompression ops&#x65B0;&#x6587;&#x4EF6;&#x5F85;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x4E2A;&#x6570;&#xFF0C;32&#x4F4D;&#x65E0;&#x7B26;&#x53F7;&#x6574;&#x578B;24+i+4jNew archive recompression op 1&#x2026;n&#x65B0;&#x6587;&#x4EF6;&#x5F85;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x7684;&#x504F;&#x79FB;&#x548C;&#x5927;&#x5C0F;&#xFF0C;&#x603B;&#x5171;n&#x4E2A;24+i+4+j4Num delta descriptor records&#x65B0;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x63CF;&#x8FF0;&#x4E2A;&#x6570;&#xFF0C;32&#x4F4D;&#x65E0;&#x7B26;&#x53F7;&#x6574;&#x578B;24+i+4+j+4kDelta descriptor record 1&#x2026;n&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x63CF;&#x8FF0;&#x8BB0;&#x5F55;&#xFF0C;&#x603B;&#x5171;n&#x4E2A;24+i+4+j+4+klDelta 1&#x2026;n&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x63CF;&#x8FF0;Old Archive Uncompression Op&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5982;&#x4E0B;BytesDescription&#x5907;&#x6CE8;8Offset of first byte to uncompress&#x5F85;&#x89E3;&#x538B;&#x7684;&#x504F;&#x79FB;&#x4F4D;&#x7F6E;&#xFF0C;64&#x4F4D;&#x65E0;&#x7B26;&#x53F7;&#x6574;&#x578B;8Number of bytes to uncompress&#x5F85;&#x89E3;&#x538B;&#x7684;&#x5B57;&#x8282;&#x4E2A;&#x6570;&#xFF0C;64&#x4F4D;&#x65E0;&#x7B26;&#x53F7;&#x6574;&#x578B;New Archive Recompression Op&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5982;&#x4E0B;BytesDescription&#x5907;&#x6CE8;8Offset of first byte to compress&#x5F85;&#x538B;&#x7F29;&#x7684;&#x504F;&#x79FB;&#x4F4D;&#x7F6E;&#xFF0C;64&#x4F4D;&#x65E0;&#x7B26;&#x53F7;&#x6574;&#x578B;8Number of bytes to compress&#x5F85;&#x538B;&#x7F29;&#x7684;&#x5B57;&#x8282;&#x4E2A;&#x6570;&#xFF0C;64&#x4F4D;&#x65E0;&#x7B26;&#x53F7;&#x6574;&#x578B;4Compression settings&#x538B;&#x7F29;&#x53C2;&#x6570;&#xFF0C;&#x5373;&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;&#x7F16;&#x7801;&#x7B56;&#x7565;&#xFF0C;nowrapCompression Settings&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5982;&#x4E0B;BytesDescription&#x5907;&#x6CE8;1Compatibility window ID&#x517C;&#x5BB9;&#x7A97;&#x53E3;&#xFF0C;&#x5F53;&#x524D;&#x53D6;&#x503C;&#x4E3A;0&#xFF0C;&#x5373;&#x9ED8;&#x8BA4;&#x517C;&#x5BB9;&#x7A97;&#x53E3;1Deflate level&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;&#x53D6;&#x503C;[1,9]1Deflate strategy&#x7F16;&#x7801;&#x7B56;&#x7565;&#xFF0C;&#x53D6;&#x503C;[0,2]1Wrap mode&#x53D6;&#x503C;0=wrap,1=nowrapCompatibility Window&#x5373;&#x517C;&#x5BB9;&#x7A97;&#x53E3;&#xFF0C;&#x5176;&#x9ED8;&#x8BA4;&#x7684;&#x517C;&#x5BB9;&#x7A97;&#x53E3;ID&#x53D6;&#x503C;&#x4E3A;0&#xFF0C;&#x9ED8;&#x8BA4;&#x517C;&#x5BB9;&#x7A97;&#x53E3;&#x4F7F;&#x7528;&#x5982;&#x4E0B;&#x914D;&#x7F6E;&#x4F7F;&#x7528;deflate&#x7B97;&#x6CD5;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF08;zlib&#xFF09;32768&#x4E2A;&#x5B57;&#x8282;&#x7684;buffer&#x5927;&#x5C0F;&#x5DF2;&#x7ECF;&#x88AB;&#x9A8C;&#x8BC1;&#x7684;&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;1-9&#x5DF2;&#x7ECF;&#x88AB;&#x9A8C;&#x8BC1;&#x8FC7;&#x7684;&#x7F16;&#x7801;&#x7B56;&#x7565;&#xFF0C;0-2&#x5DF2;&#x7ECF;&#x88AB;&#x9A8C;&#x8BC1;&#x8FC7;&#x7684;wrap&#x6A21;&#x5F0F;&#xFF0C;wrap&#x548C;nowrap&#x9ED8;&#x8BA4;&#x517C;&#x5BB9;&#x7A97;&#x53E3;&#x53EF;&#x4EE5;&#x517C;&#x5BB9;Android4.0&#x4E4B;&#x540E;&#x7684;&#x7CFB;&#x7EDF;&#x3002;&#x8FD9;&#x4E2A;&#x517C;&#x5BB9;&#x7A97;&#x53E3;&#x662F;&#x600E;&#x4E48;&#x5F97;&#x5230;&#x7684;&#x5462;&#xFF0C;&#x5176;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x7C7B;&#x53EB;DefaultDeflateCompatibilityWindow&#xFF0C;&#x53EF;&#x4EE5;&#x8C03;&#x7528;getIncompatibleValues&#x83B7;&#x5F97;&#x5176;&#x4E0D;&#x517C;&#x5BB9;&#x7684;&#x53C2;&#x6570;&#x5217;&#x8868;JreDeflateParameters&#xFF08;&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;&#x7F16;&#x7801;&#x7B56;&#x7565;&#xFF0C;nowrap&#x7684;&#x627F;&#x8F7D;&#x4F53;&#xFF09;&#xFF0C;&#x5185;&#x90E8;&#x901A;&#x8FC7;&#x6392;&#x5217;&#x7EC4;&#x5408;&#x8FD9;&#x4E09;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5BF9;&#x4E00;&#x6BB5;&#x5185;&#x5BB9;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF0C;&#x4EA7;&#x751F;&#x538B;&#x7F29;&#x540E;&#x7684;&#x6570;&#x636E;&#x7684;16&#x8FDB;&#x5236;&#x7684;&#x7F16;&#x7801;&#xFF0C;&#x4E0E;&#x5185;&#x7F6E;&#x7684;&#x9884;&#x671F;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5BF9;&#x6BD4;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x540C;&#x5219;&#x8868;&#x793A;&#x517C;&#x5BB9;&#xFF0C;&#x4E0D;&#x76F8;&#x540C;&#x8868;&#x793A;&#x4E0D;&#x517C;&#x5BB9;&#x3002;&#x8FD9;&#x91CC;&#x6709;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5B98;&#x65B9;&#x8868;&#x793A;&#x53EF;&#x4EE5;&#x517C;&#x5BB9;&#x538B;&#x7F29;&#x7EA7;&#x522B;1-9&#xFF0C;&#x7F16;&#x7801;&#x7B56;&#x7565;0-2&#xFF0C;wrap&#x548C;nowrap&#xFF0C;&#x4F46;&#x662F;&#x5B9E;&#x9645;&#x6211;&#x6D4B;&#x8BD5;&#x4E0B;&#x6765;&#xFF0C;&#x53D1;&#x73B0;&#x5728;pc&#x4E0A;&#x6709;&#x4E00;&#x90E8;&#x5206;&#x7EC4;&#x5408;&#x662F;&#x4E0D;&#x517C;&#x5BB9;&#x7684;&#xFF0C;&#x5927;&#x6982;&#x7EA6;4&#x4E2A;&#x7EC4;&#x5408;&#x3002;Android&#x4E0A;&#x6CA1;&#x6709;&#x6D4B;&#x8BD5;&#x8FC7;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x662F;&#x5426;&#x6709;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002;Delta Descriptor Record&#x7528;&#x4E8E;&#x63CF;&#x8FF0;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#xFF0C;&#x5728;&#x5F53;&#x524D;&#x7684;V1&#x7248;Patch&#x4E2D;&#xFF0C;&#x53EA;&#x6709;BsDiff&#x7B97;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#x53EA;&#x6709;&#x4E00;&#x6761;&#x8BE5;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x5176;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5982;&#x4E0B;:BytesDescription&#x5907;&#x6CE8;1Delta format ID&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x5BF9;&#x5E94;&#x7684;&#x679A;&#x4E3E;id&#xFF0C;bsdiff&#x53D6;&#x503C;08Old delta-friendly region start&#x65E7;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x5E94;&#x7528;&#x7684;&#x504F;&#x79FB;&#x4F4D;&#x7F6E;8Old delta-friendly region length&#x65E7;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x5E94;&#x7528;&#x7684;&#x957F;&#x5EA6;8New delta-friendly region start&#x65B0;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x5E94;&#x7528;&#x7684;&#x504F;&#x79FB;&#x4F4D;&#x7F6E;8New delta-friendly region length&#x65B0;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x5E94;&#x7528;&#x7684;&#x957F;&#x5EA6;8Delta length&#x751F;&#x6210;&#x7684;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#x7684;&#x957F;&#x5EA6;&#x751F;&#x6210;patch&#x6587;&#x4EF6;&#x7684;&#x51FD;&#x6570;&#x662F;writeV1Patch&#xFF0C;&#x5176;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758 public void writeV1Patch(OutputStream out) throws IOException { // Use DataOutputStream for ease of writing. This is deliberately left open, as closing it would // close the output stream that was passed in and that is not part of the method&apos;s documented // behavior. @SuppressWarnings(&quot;resource&quot;) DataOutputStream dataOut = new DataOutputStream(out); dataOut.write(PatchConstants.IDENTIFIER.getBytes(&quot;US-ASCII&quot;));//GFbFv1_0 dataOut.writeInt(0); // Flags (reserved) dataOut.writeLong(deltaFriendlyOldFileSize); // Write out all the delta-friendly old file uncompression instructions dataOut.writeInt(plan.getOldFileUncompressionPlan().size()); for (TypedRange&lt;Void&gt; range : plan.getOldFileUncompressionPlan()) { dataOut.writeLong(range.getOffset()); dataOut.writeLong(range.getLength()); } // Write out all the delta-friendly new file recompression instructions dataOut.writeInt(plan.getDeltaFriendlyNewFileRecompressionPlan().size()); for (TypedRange&lt;JreDeflateParameters&gt; range : plan.getDeltaFriendlyNewFileRecompressionPlan()) { dataOut.writeLong(range.getOffset()); dataOut.writeLong(range.getLength()); // Write the deflate information dataOut.write(PatchConstants.CompatibilityWindowId.DEFAULT_DEFLATE.patchValue); dataOut.write(range.getMetadata().level); dataOut.write(range.getMetadata().strategy); dataOut.write(range.getMetadata().nowrap ? 1 : 0); } // Now the delta section // First write the number of deltas present in the patch. In v1, there is always exactly one // delta, and it is for the entire input; in future versions there may be multiple deltas, of // arbitrary types. dataOut.writeInt(1); // In v1 the delta format is always bsdiff, so write it unconditionally. dataOut.write(PatchConstants.DeltaFormat.BSDIFF.patchValue); // Write the working ranges. In v1 these are always the entire contents of the delta-friendly // old file and the delta-friendly new file. These are for forward compatibility with future // versions that may allow deltas of arbitrary formats to be mapped to arbitrary ranges. dataOut.writeLong(0); // i.e., start of the working range in the delta-friendly old file dataOut.writeLong(deltaFriendlyOldFileSize); // i.e., length of the working range in old dataOut.writeLong(0); // i.e., start of the working range in the delta-friendly new file dataOut.writeLong(deltaFriendlyNewFileSize); // i.e., length of the working range in new // Finally, the length of the delta and the delta itself. dataOut.writeLong(deltaFile.length()); try (FileInputStream deltaFileIn = new FileInputStream(deltaFile); BufferedInputStream deltaIn = new BufferedInputStream(deltaFileIn)) { byte[] buffer = new byte[32768]; int numRead = 0; while ((numRead = deltaIn.read(buffer)) &gt;= 0) { dataOut.write(buffer, 0, numRead); } } dataOut.flush();}&#x4E3B;&#x8981;&#x505A;&#x4E86;&#x5982;&#x4E0B;&#x51E0;&#x6B65;&#xFF1A;&#x5199;&#x5165;&#x6587;&#x4EF6;&#x5934;&#xFF0C;&#x201D;GFbFv1_0&#x201D;&#x5199;&#x5165;&#x6807;&#x8BB0;&#x4F4D;&#xFF0C;&#x9884;&#x7559;&#xFF0C;&#x503C;&#x4E3A;0&#x5199;&#x5165;&#x65E7;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#x7684;&#x5927;&#x5C0F;&#x5199;&#x5165;&#x65E7;&#x6587;&#x4EF6;&#x9700;&#x8981;&#x89E3;&#x538B;&#x7684;entry&#x4E2A;&#x6570;&#x4F9D;&#x6B21;&#x5199;&#x5165;&#x65E7;&#x6587;&#x4EF6;n&#x4E2A;&#x5F85;&#x89E3;&#x538B;&#x7684;entry&#x7684;&#x504F;&#x79FB;&#x548C;&#x957F;&#x5EA6;&#x5199;&#x5165;&#x65B0;&#x6587;&#x4EF6;&#x9700;&#x8981;&#x538B;&#x7F29;&#x7684;entry&#x7684;&#x4E2A;&#x6570;&#x4F9D;&#x6B21;&#x5199;&#x5165;&#x65B0;&#x6587;&#x4EF6;n&#x4E2A;&#x5F85;&#x538B;&#x7F29;&#x7684;entry&#x7684;&#x504F;&#x79FB;&#x548C;&#x957F;&#x5EA6;&#xFF0C;&#x517C;&#x5BB9;&#x7A97;&#x53E3;&#xFF08;&#x7A97;&#x53E3;id&#xFF0C;&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;&#x538B;&#x7F29;&#x7B56;&#x7565;&#xFF0C;nowrap&#xFF09;&#x5199;&#x5165;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x63CF;&#x8FF0;&#x4E2A;&#x6570;&#xFF0C;&#x53EA;&#x4F7F;&#x7528;&#x4E86;bsdiff&#xFF0C;&#x56E0;&#x6B64;&#x503C;&#x4E3A;1&#x5199;&#x5165;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;id&#xFF0C;&#x65E7;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#x5E94;&#x7528;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x7684;&#x504F;&#x79FB;&#x548C;&#x957F;&#x5EA6;&#xFF0C;&#x65B0;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#x5E94;&#x7528;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x7684;&#x504F;&#x79FB;&#x548C;&#x957F;&#x5EA6;&#x5199;&#x5165;patch&#x6587;&#x4EF6;&#x7684;&#x5927;&#x5C0F;&#x5199;&#x5165;bsdiff&#x751F;&#x6210;&#x7684;patch&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x65B0;&#x6587;&#x4EF6;&#x7684;&#x5408;&#x6210;&#x5408;&#x6210;&#x4E3B;&#x8981;&#x901A;&#x8FC7;com.google.archivepatcher.applier.FileByFileV1DeltaApplier&#x7684;applyDelta&#xFF0C;&#x6700;&#x7EC8;&#x4F1A;&#x8C03;&#x7528;&#x5230;applyDeltaInternal&#x65B9;&#x6CD5;&#xFF0C;&#x5176;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;1234567891011121314151617181920212223242526private void applyDeltaInternal( File oldBlob, File deltaFriendlyOldBlob, InputStream deltaIn, OutputStream newBlobOut) throws IOException { // First, read the patch plan from the patch stream. PatchReader patchReader = new PatchReader(); PatchApplyPlan plan = patchReader.readPatchApplyPlan(deltaIn); writeDeltaFriendlyOldBlob(plan, oldBlob, deltaFriendlyOldBlob); // Apply the delta. In v1 there is always exactly one delta descriptor, it is bsdiff, and it // takes up the rest of the patch stream - so there is no need to examine the list of // DeltaDescriptors in the patch at all. long deltaLength = plan.getDeltaDescriptors().get(0).getDeltaLength(); DeltaApplier deltaApplier = getDeltaApplier(); // Don&apos;t close this stream, as it is just a limiting wrapper. @SuppressWarnings(&quot;resource&quot;) LimitedInputStream limitedDeltaIn = new LimitedInputStream(deltaIn, deltaLength); // Don&apos;t close this stream, as it would close the underlying OutputStream (that we don&apos;t own). @SuppressWarnings(&quot;resource&quot;) PartiallyCompressingOutputStream recompressingNewBlobOut = new PartiallyCompressingOutputStream( plan.getDeltaFriendlyNewFileRecompressionPlan(), newBlobOut, DEFAULT_COPY_BUFFER_SIZE); deltaApplier.applyDelta(deltaFriendlyOldBlob, limitedDeltaIn, recompressingNewBlobOut); recompressingNewBlobOut.flush(); }&#x4E3B;&#x8981;&#x505A;&#x4E86;&#x5982;&#x4E0B;&#x51E0;&#x4EF6;&#x4E8B;&#xFF1A;&#x89E3;&#x6790;patch&#x6587;&#x4EF6;&#x751F;&#x6210;PatchApplyPlan&#x5BF9;&#x8C61;&#x751F;&#x6210;&#x65E7;&#x6587;&#x4EF6;&#x7684;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#x5E94;&#x7528;&#x5408;&#x6210;&#x7B97;&#x6CD5;&#xFF0C;&#x5408;&#x6210;&#x65B0;&#x6587;&#x4EF6;&#x7684;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#xFF0C;&#x4E8E;&#x6B64;&#x540C;&#x65F6;&#x65B0;&#x6587;&#x4EF6;zip&#x5305;&#x5728;&#x6D41;&#x7684;&#x5199;&#x5165;&#x8FC7;&#x7A0B;&#x4E2D;&#x5B8C;&#x6210;&#x5408;&#x6210;&#x3002;&#x5BF9;&#x4E8E;&#x7B2C;&#x4E00;&#x6B65;&#xFF0C;&#x6765;&#x770B;&#x770B;&#x5982;&#x4F55;&#x89E3;&#x6790;&#x7684;&#xFF0C;&#x89E3;&#x6790;&#x4EE3;&#x7801;&#x5982;&#x4E0B;:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111public PatchApplyPlan readPatchApplyPlan(InputStream in) throws IOException { // Use DataOutputStream for ease of writing. This is deliberately left open, as closing it would // close the output stream that was passed in and that is not part of the method&apos;s documented // behavior. @SuppressWarnings(&quot;resource&quot;) DataInputStream dataIn = new DataInputStream(in); // Read header and flags. byte[] expectedIdentifier = PatchConstants.IDENTIFIER.getBytes(&quot;US-ASCII&quot;); byte[] actualIdentifier = new byte[expectedIdentifier.length]; dataIn.readFully(actualIdentifier); if (!Arrays.equals(expectedIdentifier, actualIdentifier)) { throw new PatchFormatException(&quot;Bad identifier&quot;); } dataIn.skip(4); // Flags (ignored in v1) long deltaFriendlyOldFileSize = checkNonNegative( dataIn.readLong(), &quot;delta-friendly old file size&quot;); // Read old file uncompression instructions. int numOldFileUncompressionInstructions = (int) checkNonNegative( dataIn.readInt(), &quot;old file uncompression instruction count&quot;); List&lt;TypedRange&lt;Void&gt;&gt; oldFileUncompressionPlan = new ArrayList&lt;TypedRange&lt;Void&gt;&gt;(numOldFileUncompressionInstructions); long lastReadOffset = -1; for (int x = 0; x &lt; numOldFileUncompressionInstructions; x++) { long offset = checkNonNegative(dataIn.readLong(), &quot;old file uncompression range offset&quot;); long length = checkNonNegative(dataIn.readLong(), &quot;old file uncompression range length&quot;); if (offset &lt; lastReadOffset) { throw new PatchFormatException(&quot;old file uncompression ranges out of order or overlapping&quot;); } TypedRange&lt;Void&gt; range = new TypedRange&lt;Void&gt;(offset, length, null); oldFileUncompressionPlan.add(range); lastReadOffset = offset + length; // To check that the next range starts after the current one } // Read new file recompression instructions int numDeltaFriendlyNewFileRecompressionInstructions = dataIn.readInt(); checkNonNegative( numDeltaFriendlyNewFileRecompressionInstructions, &quot;delta-friendly new file recompression instruction count&quot;); List&lt;TypedRange&lt;JreDeflateParameters&gt;&gt; deltaFriendlyNewFileRecompressionPlan = new ArrayList&lt;TypedRange&lt;JreDeflateParameters&gt;&gt;( numDeltaFriendlyNewFileRecompressionInstructions); lastReadOffset = -1; for (int x = 0; x &lt; numDeltaFriendlyNewFileRecompressionInstructions; x++) { long offset = checkNonNegative( dataIn.readLong(), &quot;delta-friendly new file recompression range offset&quot;); long length = checkNonNegative( dataIn.readLong(), &quot;delta-friendly new file recompression range length&quot;); if (offset &lt; lastReadOffset) { throw new PatchFormatException( &quot;delta-friendly new file recompression ranges out of order or overlapping&quot;); } lastReadOffset = offset + length; // To check that the next range starts after the current one // Read the JreDeflateParameters // Note that v1 only supports the default deflate compatibility window. checkRange( dataIn.readByte(), PatchConstants.CompatibilityWindowId.DEFAULT_DEFLATE.patchValue, PatchConstants.CompatibilityWindowId.DEFAULT_DEFLATE.patchValue, &quot;compatibility window id&quot;); int level = (int) checkRange(dataIn.readUnsignedByte(), 1, 9, &quot;recompression level&quot;); int strategy = (int) checkRange(dataIn.readUnsignedByte(), 0, 2, &quot;recompression strategy&quot;); int nowrapInt = (int) checkRange(dataIn.readUnsignedByte(), 0, 1, &quot;recompression nowrap&quot;); TypedRange&lt;JreDeflateParameters&gt; range = new TypedRange&lt;JreDeflateParameters&gt;( offset, length, JreDeflateParameters.of(level, strategy, nowrapInt == 0 ? false : true)); deltaFriendlyNewFileRecompressionPlan.add(range); } // Read the delta metadata, but stop before the first byte of the actual delta. // V1 has exactly one delta and it must be bsdiff. int numDeltaRecords = (int) checkRange(dataIn.readInt(), 1, 1, &quot;num delta records&quot;); List&lt;DeltaDescriptor&gt; deltaDescriptors = new ArrayList&lt;DeltaDescriptor&gt;(numDeltaRecords); for (int x = 0; x &lt; numDeltaRecords; x++) { byte deltaFormatByte = (byte) checkRange( dataIn.readByte(), PatchConstants.DeltaFormat.BSDIFF.patchValue, PatchConstants.DeltaFormat.BSDIFF.patchValue, &quot;delta format&quot;); long deltaFriendlyOldFileWorkRangeOffset = checkNonNegative( dataIn.readLong(), &quot;delta-friendly old file work range offset&quot;); long deltaFriendlyOldFileWorkRangeLength = checkNonNegative( dataIn.readLong(), &quot;delta-friendly old file work range length&quot;); long deltaFriendlyNewFileWorkRangeOffset = checkNonNegative( dataIn.readLong(), &quot;delta-friendly new file work range offset&quot;); long deltaFriendlyNewFileWorkRangeLength = checkNonNegative( dataIn.readLong(), &quot;delta-friendly new file work range length&quot;); long deltaLength = checkNonNegative(dataIn.readLong(), &quot;delta length&quot;); DeltaDescriptor descriptor = new DeltaDescriptor( PatchConstants.DeltaFormat.fromPatchValue(deltaFormatByte), new TypedRange&lt;Void&gt;( deltaFriendlyOldFileWorkRangeOffset, deltaFriendlyOldFileWorkRangeLength, null), new TypedRange&lt;Void&gt;( deltaFriendlyNewFileWorkRangeOffset, deltaFriendlyNewFileWorkRangeLength, null), deltaLength); deltaDescriptors.add(descriptor); } return new PatchApplyPlan( Collections.unmodifiableList(oldFileUncompressionPlan), deltaFriendlyOldFileSize, Collections.unmodifiableList(deltaFriendlyNewFileRecompressionPlan), Collections.unmodifiableList(deltaDescriptors)); }&#x5206;&#x4E3A;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A;&#x8BFB;&#x6587;&#x4EF6;&#x5934;&#xFF0C;&#x6821;&#x9A8C;&#x6587;&#x4EF6;&#x5934;&#x5FFD;&#x7565;4&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x6807;&#x8BB0;&#x4F4D;&#x8BFB;&#x65E7;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x5E76;&#x6821;&#x9A8C;&#xFF0C;&#x975E;&#x8D1F;&#x6570;&#x8BFB;&#x65E7;&#x6587;&#x4EF6;&#x5F85;&#x89E3;&#x538B;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x5E76;&#x6821;&#x9A8C;&#xFF0C;&#x975E;&#x8D1F;&#x6570;&#x8BFB;n&#x4E2A;&#x65E7;&#x6587;&#x4EF6;&#x5F85;&#x89E3;&#x538B;&#x7684;&#x504F;&#x79FB;&#xFF0C;&#x957F;&#x5EA6;&#xFF0C;&#x5E76;&#x6821;&#x9A8C;&#xFF0C;&#x975E;&#x8D1F;&#x6570;&#x8BFB;&#x65B0;&#x6587;&#x4EF6;&#x5F85;&#x538B;&#x7F29;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x5E76;&#x6821;&#x9A8C;&#xFF0C;&#x975E;&#x8D1F;&#x6570;&#x8BFB;n&#x4E2A;&#x65B0;&#x6587;&#x4EF6;&#x5F85;&#x538B;&#x7F29;&#x7684;&#x504F;&#x79FB;&#xFF0C;&#x957F;&#x5EA6;&#xFF0C;&#x5E76;&#x6821;&#x9A8C;&#xFF0C;&#x975E;&#x8D1F;&#x6570;&#xFF0C;&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;&#x7F16;&#x7801;&#x7B56;&#x7565;&#xFF0C;nowrap&#x503C;&#x8BFB;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x4E2A;&#x6570;&#x8BFB;n&#x4E2A;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x63CF;&#x8FF0;&#x3002;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;id&#xFF0C;&#x65E7;&#x6587;&#x4EF6;&#x5E94;&#x7528;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x7684;&#x504F;&#x79FB;&#x548C;&#x957F;&#x5EA6;&#xFF0C;&#x65B0;&#x6587;&#x4EF6;&#x5E94;&#x7528;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#x7684;&#x504F;&#x79FB;&#x548C;&#x957F;&#x5EA6;&#xFF0C;&#x751F;&#x6210;&#x7684;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#x7684;&#x5927;&#x5C0F;&#x8FD4;&#x56DE;PatchApplyPlan&#x5BF9;&#x8C61;&#x63A5;&#x4E0B;&#x6765;&#x5C31;&#x662F;&#x6839;&#x636E;&#x8FD4;&#x56DE;&#x7684;PatchApplyPlan&#x5BF9;&#x8C61;&#xFF0C;&#x83B7;&#x5F97;&#x65E7;&#x6587;&#x4EF6;&#x5F85;&#x89E3;&#x538B;&#x7684;&#x4E00;&#x4E2A;TypedRange&#x7684;List&#x5BF9;&#x8C61;&#xFF0C;&#x7136;&#x540E;&#x4F7F;&#x7528;DeltaFriendlyFile.generateDeltaFriendlyFile&#x751F;&#x4EA7;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#xFF0C;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x548C;&#x751F;&#x4EA7;patch&#x7684;&#x90A3;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E00;&#x6837;&#xFF0C;&#x4E0D;&#x91CD;&#x590D;&#x63CF;&#x8FF0;&#x3002;&#x5176;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;1234567891011121314151617181920private void writeDeltaFriendlyOldBlob( PatchApplyPlan plan, File oldBlob, File deltaFriendlyOldBlob) throws IOException { RandomAccessFileOutputStream deltaFriendlyOldFileOut = null; try { deltaFriendlyOldFileOut = new RandomAccessFileOutputStream( deltaFriendlyOldBlob, plan.getDeltaFriendlyOldFileSize()); DeltaFriendlyFile.generateDeltaFriendlyFile( plan.getOldFileUncompressionPlan(), oldBlob, deltaFriendlyOldFileOut, false, DEFAULT_COPY_BUFFER_SIZE); } finally { try { deltaFriendlyOldFileOut.close(); } catch (Exception ignored) { // Nothing } }&#x63A5;&#x4E0B;&#x91CC;&#x5C31;&#x662F;&#x5408;&#x6210;&#x65B0;&#x6587;&#x4EF6;&#x4E86;&#xFF0C;&#x4F7F;&#x7528;BsPatch&#x7B97;&#x6CD5;&#x5B8C;&#x6210;&#x5408;&#x6210;&#x5E76;&#x5199;&#x5165;Outputstream&#x4E2D;&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;OutputStream&#x7ECF;&#x8FC7;&#x88C5;&#x9970;&#x8005;&#x6A21;&#x5F0F;&#x5305;&#x88C5;&#xFF0C;&#x6700;&#x7EC8;&#x4F20;&#x5165;&#x7684;&#x662F;PartiallyCompressingOutputStream&#x8F93;&#x51FA;&#x6D41;&#xFF0C;&#x6784;&#x5EFA;PartiallyCompressingOutputStream&#x5BF9;&#x8C61;&#x6240;&#x9700;&#x53C2;&#x6570;&#x5C31;&#x662F;&#x65B0;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x538B;&#x7F29;&#x7684;&#x6570;&#x636E;&#x7684;TypedRange&#x7684;List&#x5BF9;&#x8C61;&#x3002;&#x6700;&#x7EC8;&#xFF0C;&#x5408;&#x6210;Zip&#x6587;&#x4EF6;&#x7684;&#x5DE5;&#x4F5C;&#x4F1A;&#x8F97;&#x8F6C;&#x5230;PartiallyCompressingOutputStream&#x4E2D;&#x7684;writeChunk&#x51FD;&#x6570;&#xFF0C;&#x5176;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778private int writeChunk(byte[] buffer, int offset, int length) throws IOException { if (bytesTillCompressionStarts() == 0 &amp;&amp; !currentlyCompressing()) { // Compression will begin immediately. JreDeflateParameters parameters = nextCompressedRange.getMetadata(); if (deflater == null) { deflater = new Deflater(parameters.level, parameters.nowrap); } else if (lastDeflateParameters.nowrap != parameters.nowrap) { // Last deflater must be destroyed because nowrap settings do not match. deflater.end(); deflater = new Deflater(parameters.level, parameters.nowrap); } // Deflater will already have been reset at the end of this method, no need to do it again. // Just set up the right parameters. deflater.setLevel(parameters.level); deflater.setStrategy(parameters.strategy); deflaterOut = new DeflaterOutputStream(normalOut, deflater, compressionBufferSize); } int numBytesToWrite; OutputStream writeTarget; if (currentlyCompressing()) { // Don&apos;t write past the end of the compressed range. numBytesToWrite = (int) Math.min(length, bytesTillCompressionEnds()); writeTarget = deflaterOut; } else { writeTarget = normalOut; if (nextCompressedRange == null) { // All compression ranges have been consumed. numBytesToWrite = length; } else { // Don&apos;t write past the point where the next compressed range begins. numBytesToWrite = (int) Math.min(length, bytesTillCompressionStarts()); } } writeTarget.write(buffer, offset, numBytesToWrite); numBytesWritten += numBytesToWrite; if (currentlyCompressing() &amp;&amp; bytesTillCompressionEnds() == 0) { // Compression range complete. Finish the output and set up for the next run. deflaterOut.finish(); deflaterOut.flush(); deflaterOut = null; deflater.reset(); lastDeflateParameters = nextCompressedRange.getMetadata(); if (rangeIterator.hasNext()) { // More compression ranges await in the future. nextCompressedRange = rangeIterator.next(); } else { // All compression ranges have been consumed. nextCompressedRange = null; deflater.end(); deflater = null; } } return numBytesToWrite; } private boolean currentlyCompressing() { return deflaterOut != null; } private long bytesTillCompressionStarts() { if (nextCompressedRange == null) { // All compression ranges have been consumed return -1L; } return nextCompressedRange.getOffset() - numBytesWritten; } private long bytesTillCompressionEnds() { if (nextCompressedRange == null) { // All compression ranges have been consumed return -1L; } return (nextCompressedRange.getOffset() + nextCompressedRange.getLength()) - numBytesWritten; }&#x5408;&#x6210;&#x7B97;&#x6CD5;&#x7684;&#x6838;&#x5FC3;&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x4E86;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x8BBE;&#x8BA1;&#x7684;&#x5341;&#x5206;&#x5DE7;&#x5999;&#xFF0C;&#x5EFA;&#x8BAE;&#x6253;&#x4E2A;&#x65AD;&#x70B9;&#x8DD1;&#x4E00;&#x8DD1;&#xFF0C;&#x597D;&#x597D;&#x7406;&#x89E3;&#x4E00;&#x4E0B;&#x3002;&#x8FD9;&#x91CC;&#x7B80;&#x5355;&#x4ECB;&#x7ECD;&#x4E00;&#x4E0B;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x3002;&#x5728;PartiallyCompressingOutputStream&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#xFF0C;&#x83B7;&#x5F97;&#x4E86;compressionRanges&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x5224;&#x65AD;&#x5199;&#x5165;&#x7684;&#x6570;&#x636E;&#x8DDD;&#x79BB;&#x4E0B;&#x4E00;&#x4E2A;&#x538B;&#x7F29;&#x6570;&#x636E;&#x5F00;&#x59CB;&#x5982;&#x679C;&#x662F;0&#xFF0C;&#x4E14;&#x5F53;&#x524D;&#x5E76;&#x4E0D;&#x5728;&#x538B;&#x7F29;&#xFF0C;&#x5219;&#x83B7;&#x5F97;&#x538B;&#x7F29;&#x8BBE;&#x7F6E;&#xFF0C;&#x5373;&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;&#x7F16;&#x7801;&#x7B56;&#x7565;&#xFF0C;nowrap&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x8BBE;&#x7F6E;&#x3002;&#x5E76;&#x5305;&#x88C5;&#x8F93;&#x51FA;&#x6D41;&#x4E3A;&#x538B;&#x7F29;&#x6D41;&#x3002;&#x5982;&#x679C;&#x5F53;&#x524D;&#x6B63;&#x5728;&#x538B;&#x7F29;&#xFF0C;&#x5219;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x5199;&#x5165;&#x7684;&#x6570;&#x636E;&#x957F;&#x5EA6;&#x548C;&#x5F85;&#x538B;&#x7F29;&#x7684;&#x6570;&#x636E;&#x957F;&#x5EA6;&#xFF0C;&#x53D6;&#x5176;&#x4E2D;&#x5C0F;&#x7684;&#x4E00;&#x4E2A;&#xFF0C;&#x8BBE;&#x7F6E;&#x76EE;&#x6807;&#x8F93;&#x51FA;&#x6D41;&#x4E3A;&#x538B;&#x7F29;&#x6D41;&#xFF0C;&#x5373;&#x8D1F;&#x8D23;&#x538B;&#x7F29;&#x5DE5;&#x4F5C;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x62F7;&#x8D1D;&#x5DE5;&#x4F5C;&#x3002;&#x5982;&#x679C;&#x5F53;&#x524D;&#x4E0D;&#x5728;&#x538B;&#x7F29;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4E0B;&#x4E00;&#x4E2A;&#x538B;&#x7F29;&#x6570;&#x636E;&#x4E86;&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x5199;&#x5165;&#x5BF9;&#x5E94;&#x957F;&#x5EA6;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5982;&#x679C;&#x8FD8;&#x6709;&#x4E0B;&#x4E00;&#x4E2A;&#x538B;&#x7F29;&#x6570;&#x636E;&#xFF0C;&#x5219;&#x53D6;&#x5F53;&#x524D;&#x5199;&#x5165;&#x6570;&#x636E;&#x7684;&#x957F;&#x5EA6;&#x548C;&#x8DDD;&#x79BB;&#x4E0B;&#x4E00;&#x4E2A;&#x538B;&#x7F29;&#x6570;&#x636E;&#x7684;&#x504F;&#x79FB;&#x4F4D;&#x7F6E;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x53D6;&#x5176;&#x4E2D;&#x5C0F;&#x7684;&#x4E00;&#x4E2A;&#xFF0C;&#x8BBE;&#x7F6E;&#x76EE;&#x6807;&#x8F93;&#x51FA;&#x6D41;&#x4E3A;&#x6B63;&#x5E38;&#x6D41;&#xFF0C;&#x5373;&#x8FDB;&#x884C;&#x62F7;&#x8D1D;&#x5DE5;&#x4F5C;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x538B;&#x7F29;&#x5DE5;&#x4F5C;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x662F;&#x5426;&#x6B63;&#x5728;&#x538B;&#x7F29;&#xFF0C;&#x5E76;&#x4E14;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x6240;&#x6709;&#x538B;&#x7F29;&#x6570;&#x636E;&#x90FD;&#x5DF2;&#x7ECF;&#x5199;&#x5165;&#x5B8C;&#x5168;&#xFF0C;&#x6267;&#x884C;&#x538B;&#x7F29;&#x6D41;&#x7684;finish&#x548C;flush&#x64CD;&#x4F5C;&#xFF0C;&#x91CD;&#x7F6E;&#x538B;&#x7F29;&#x76F8;&#x5173;&#x914D;&#x7F6E;&#x9879;&#xFF0C;&#x5E76;&#x79FB;&#x52A8;&#x5F85;&#x538B;&#x7F29;&#x7684;&#x6570;&#x636E;&#x5230;&#x4E0B;&#x4E00;&#x6761;&#x8BB0;&#x5F55;&#x3002;&#x91CD;&#x590D;&#x4EE5;&#x4E0A;&#x64CD;&#x4F5C;&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x6570;&#x636E;&#x5199;&#x5165;&#x5B8C;&#x5168;&#x3002;&#x8FC7;&#x7A0B;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#xFF0C;&#x540C;&#x6837;&#x7684;&#x7528;&#x4E00;&#x5F20;&#x56FE;&#x6765;&#x8868;&#x793A;:&#x5408;&#x6210;&#x7684;&#x65B0;&#x7684;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x7684;&#x6587;&#x4EF6;&#x6570;&#x636E;&#x5982;&#x4E0A;&#x56FE;&#x8868;&#x793A;&#x3002;&#x5F53;&#x9047;&#x5230;&#x7EFF;&#x8272;&#x7684;gap&#x533A;&#x57DF;&#x65F6;&#xFF0C;&#x5219;&#x6267;&#x884C;&#x4E8C;&#x8FDB;&#x5236;&#x62F7;&#x8D1D;&#x64CD;&#x4F5C;&#xFF0C;&#x5C06;&#x5176;&#x62F7;&#x8D1D;&#x5230;&#x8F93;&#x51FA;&#x6D41;&#x53BB;&#xFF0C;&#x5F53;&#x9047;&#x5230;&#x7EA2;&#x8272;&#x7684;&#x5DF2;&#x7ECF;&#x89E3;&#x538B;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x4F1A;&#x4F7F;&#x7528;&#x5BF9;&#x5E94;&#x7684;&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;&#x7F16;&#x7801;&#x7B56;&#x7565;&#xFF0C;nowrap&#x53C2;&#x6570;&#x5C06;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF0C;&#x5C06;&#x84DD;&#x8272;&#x7684;&#x5269;&#x4F59;&#x6570;&#x636E;&#x5199;&#x5165;&#x76EE;&#x6807;&#x6570;&#x636E;&#x3002;&#x5C31;&#x8FD9;&#x6837;&#x6574;&#x4E2A;&#x5408;&#x6210;&#x64CD;&#x4F5C;&#x5C31;&#x5B8C;&#x6210;&#x4E86;&#x3002;&#x8FD9;&#x6837;&#x4E3A;&#x4F55;&#x80FD;&#x5B8C;&#x6210;zip&#x6587;&#x4EF6;&#x7684;&#x5408;&#x6210;&#x5462;&#xFF0C;&#x4E0A;&#x9762;&#x7684;&#x89E3;&#x6790;&#x5DF2;&#x7ECF;&#x5F88;&#x6E05;&#x695A;&#x4E86;&#xFF0C;&#x5176;&#x5B9E;Google Archive Patch&#x8BB0;&#x5F55;&#x4E86;&#x6240;&#x6709;&#x65B0;&#x6587;&#x4EF6;&#x4E2D;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x538B;&#x7F29;&#x7684;&#x6570;&#x636E;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#xFF0C;&#x4F7F;&#x7528;&#x8FD9;&#x4E9B;&#x53C2;&#x6570;&#x538B;&#x7F29;&#xFF0C;&#x5F97;&#x5230;&#x5BF9;&#x5E94;&#x7684;&#x538B;&#x7F29;&#x6570;&#x636E;&#xFF0C;&#x5199;&#x5165;&#x5176;&#x5728;&#x65B0;&#x6587;&#x4EF6;&#x7684;&#x771F;&#x5B9E;&#x4F4D;&#x7F6E;&#xFF0C;&#x800C;&#x5BF9;&#x4E8E;Zip&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x5176;&#x4ED6;&#x6570;&#x636E;&#xFF0C;&#x5219;&#x6267;&#x884C;&#x7684;&#x662F;&#x62F7;&#x8D1D;&#x64CD;&#x4F5C;&#xFF0C;&#x8FD9;&#x6837;&#x4E24;&#x79CD;&#x64CD;&#x4F5C;&#x5408;&#x8D77;&#x6765;&#xFF0C;&#x6700;&#x7EC8;&#x5C31;&#x4EA7;&#x751F;&#x4E86;&#x65B0;&#x7684;Zip&#x6587;&#x4EF6;&#x3002;&#x4E14;&#x5BF9;&#x4E8E;Apk&#x6765;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x65E0;&#x9700;&#x5173;&#x5FC3;&#x5176;&#x7B7E;&#x540D;&#x3002;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x771F;&#x662F;&#x5DE7;&#x5999;&#xFF0C;&#x611F;&#x53F9;&#x4E00;&#x4E0B; !Patch&#x6587;&#x4EF6;&#x7684;&#x538B;&#x7F29;&#x548C;&#x89E3;&#x538B;Google Archive Patch&#x4E0D;&#x5BF9;patch&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF0C;&#x538B;&#x7F29;&#x5DE5;&#x4F5C;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x8FDB;&#x884C;&#xFF0C;&#x4FDD;&#x8BC1;patch&#x6587;&#x4EF6;&#x7684;&#x5927;&#x5C0F;&#x5F88;&#x5C0F;&#xFF0C;&#x800C;&#x5BA2;&#x6237;&#x7AEF;&#x63A5;&#x53D7;&#x5230;patch&#x540E;&#x9700;&#x8981;&#x5BF9;&#x5E94;&#x7684;&#x89E3;&#x538B;&#x3002;&#x8FD9;&#x4E48;&#x505A;&#xFF0C;&#x4FDD;&#x8BC1;&#x4E86;&#x538B;&#x7F29;patch&#x7B97;&#x6CD5;&#x7684;&#x5145;&#x5206;&#x81EA;&#x7531;&#xFF0C;&#x53EF;&#x81EA;&#x884C;&#x9009;&#x62E9;&#xFF0C;&#x65B9;&#x4FBF;&#x6269;&#x5C55;&#x3002;&#x901A;&#x7528;&#x7684;&#x5DEE;&#x91CF;&#x751F;&#x6210;&#x548C;&#x5408;&#x6210;&#x6846;&#x67B6;&#x8FD9;&#x51E0;&#x5929;&#x7B80;&#x5355;&#x7684;&#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x7684;&#x5DEE;&#x91CF;&#x751F;&#x6210;&#x548C;&#x5408;&#x6210;&#x6846;&#x67B6;&#xFF0C;github&#x5730;&#x5740;&#x89C1; CorePatch ,&#x76EE;&#x524D;&#x5DF2;&#x7ECF;&#x5B9E;&#x73B0;bsdiff&#x548C;Google Archive Patch&#x4EE5;&#x53CA;&#x5168;&#x91CF;&#x5408;&#x6210;&#xFF08;&#x76F4;&#x63A5;&#x62F7;&#x8D1D;&#x6587;&#x4EF6;&#xFF09;&#x4F18;&#x5316;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#x4F18;&#x5316;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#x4F7F;&#x7528;&#x7684;&#x662F;bsdiff&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x5E94;&#x7684;&#x57FA;&#x7840;&#x6587;&#x4EF6;&#x7ECF;&#x8FC7;&#x89E3;&#x538B;&#x4E4B;&#x540E;&#xFF0C;&#x5176;&#x6587;&#x4EF6;&#x5927;&#x5C0F;&#x5927;&#x5927;&#x53D8;&#x5927;&#xFF0C;&#x5BFC;&#x81F4;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x6587;&#x4EF6;&#x7684;&#x65F6;&#x95F4;&#x5927;&#x5927;&#x589E;&#x52A0;&#xFF0C;&#x8FD9;&#x91CC;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#x4F18;&#x5316;&#xFF0C;&#x552F;&#x4E00;&#x7684;&#x4F18;&#x5316;&#x70B9;&#x5C31;&#x662F;&#x4F7F;&#x7528;&#x5176;&#x4ED6;&#x66F4;&#x4F18;&#x5DEE;&#x91CF;&#x751F;&#x6210;&#x7B97;&#x6CD5;&#xFF0C;&#x800C;&#x4E0D;&#x662F;BsDiff&#x7B97;&#x6CD5;&#x3002;&#x5408;&#x6210;&#x65B0;&#x6587;&#x4EF6;&#x4F18;&#x5316;&#x5408;&#x6210;&#x4F7F;&#x7528;BsPatch&#x8FDB;&#x884C;&#x5408;&#x6210;&#xFF0C;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x662F;&#x5341;&#x5206;&#x5FEB;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x91CC;&#x53EF;&#x4EE5;&#x4E0D;&#x4F18;&#x5316;&#xFF0C;&#x4F46;&#x662F;&#x9700;&#x8981;&#x4F18;&#x5316;&#x7684;&#x70B9;&#x662F;&#x5408;&#x6210;&#x65B0;&#x7684;Zip&#x6587;&#x4EF6;&#x8FC7;&#x7A0B;&#xFF0C;&#x5373;&#x4E0A;&#x9762;&#x63D0;&#x5230;&#x7684;writeChunk&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x552F;&#x4E00;&#x7684;&#x8017;&#x65F6;&#x70B9;&#x5C31;&#x662F;&#x538B;&#x7F29;&#x64CD;&#x4F5C;&#xFF0C;&#x57FA;&#x672C;&#x4E0A;&#x538B;&#x7F29;&#x64CD;&#x4F5C;&#x8017;&#x65F6;&#x5360;&#x5168;&#x90E8;&#x8017;&#x65F6;&#x7684;80%-90%&#x5DE6;&#x53F3;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x57FA;&#x672C;&#x6CA1;&#x4EC0;&#x4E48;&#x4F18;&#x5316;&#x70B9;&#x3002;&#x603B;&#x7ED3;Google Archive Patch&#x7684;&#x6838;&#x5FC3;&#x662F;&#x751F;&#x6210;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#xFF0C;&#x5E94;&#x7528;&#x5DEE;&#x91CF;&#x7B97;&#x6CD5;&#xFF0C;&#x8BB0;&#x5F55;&#x65B0;&#x6587;&#x4EF6;&#x5DEE;&#x91CF;&#x53CB;&#x597D;&#x6587;&#x4EF6;&#x4E2D;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x538B;&#x7F29;&#x7684;&#x504F;&#x79FB;&#x548C;&#x957F;&#x5EA6;&#xFF0C;&#x5E94;&#x7528;&#x5408;&#x6210;&#x7B97;&#x6CD5;&#x5408;&#x6210;&#x65B0;&#x6587;&#x4EF6;&#x65F6;&#xFF0C;&#x5BF9;&#x4E8E;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x538B;&#x7F29;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x7528;patch&#x4E2D;&#x7684;&#x538B;&#x7F29;&#x76F8;&#x5173;&#x7684;&#x53C2;&#x6570;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF0C;&#x5F97;&#x5230;&#x538B;&#x7F29;&#x6570;&#x636E;&#xFF0C;&#x800C;&#x5BF9;&#x4E8E;&#x975E;&#x538B;&#x7F29;&#x6570;&#x636E;&#xFF0C;&#x5982;Zip&#x6587;&#x4EF6;&#x683C;&#x5F0F;&#x4E2D;&#x5176;&#x4ED6;&#x6570;&#x636E;&#xFF0C;&#x5219;&#x6267;&#x884C;&#x62F7;&#x8D1D;&#x64CD;&#x4F5C;&#x3002;&#x6700;&#x7EC8;&#x5B8C;&#x7F8E;&#x7684;&#x5408;&#x6210;&#x4E86;&#x65B0;&#x6587;&#x4EF6;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x7684;&#x4F18;&#x70B9;&#x662F;patch&#x6BD4;&#x57FA;&#x4E8E;&#x6587;&#x4EF6;&#x7EA7;&#x522B;&#x7684;bsdiff&#x751F;&#x6210;&#x7684;&#x8981;&#x5C0F;&#xFF0C;&#x7F3A;&#x70B9;&#x662F;&#x751F;&#x6210;&#x65F6;&#x95F4;&#x957F;&#xFF0C;&#x5408;&#x6210;&#x65F6;&#x95F4;&#x957F;&#x3002;&#x8BE5;&#x7B97;&#x6CD5;&#x6838;&#x5FC3;&#x7684;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x8981;&#x6C42;&#x5C31;&#x662F;&#x4F7F;&#x7528;&#x76F8;&#x540C;&#x7684;&#x538B;&#x7F29;&#x7EA7;&#x522B;&#xFF0C;&#x7F16;&#x7801;&#x7B56;&#x7565;&#x548C;nowrap&#x53C2;&#x6570;&#xFF0C;&#x5BF9;&#x76F8;&#x540C;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF0C;&#x5F97;&#x5230;&#x7684;&#x6570;&#x636E;&#x6570;&#x636E;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x524D;&#x63D0;&#x5982;&#x679C;&#x4E0D;&#x6EE1;&#x8DB3;&#xFF0C;&#x5219;&#x8BE5;&#x7B97;&#x6CD5;&#x5C31;&#x6CA1;&#x6709;&#x610F;&#x4E49;&#x4E86;&#x3002;###]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>bspatch</tag>
        <tag>bsdiff</tag>
        <tag>archive patch</tag>
        <tag>android</tag>
        <tag>delta</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 生成 Linux 交叉编译工具链]]></title>
    <url>%2F2017%2F08%2F18%2FMac%E7%94%9F%E6%88%90Linux%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E9%93%BE%2F</url>
    <content type="text"><![CDATA[&#x9700;&#x8981;&#x5728;Mac&#x4E0A;&#x7F16;&#x8BD1;&#x51FA;Linux&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x53EF;&#x7528;&#x7684;&#x52A8;&#x6001;&#x5E93;&#xFF0C;&#x4F7F;&#x7528;crosstool-ng&#x751F;&#x6210;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;&#x5927;&#x5C0F;&#x5199;&#x654F;&#x611F;&#x7684;&#x78C1;&#x76D8;&#x521B;&#x5EFA;1hdiutil create -volname &quot;crosstool-ng&quot; -type SPARSE -fs &apos;Case-sensitive Journaled HFS+&apos; -size 20g crosstool-ng.dmg&#x6302;&#x8F7D;1hdiutil attach crosstool-ng.dmg.sparseimage -mountpoint /Volumes/crosstool-ng&#x5378;&#x8F7D;&#xFF08;&#x4F7F;&#x7528;&#x5B8C;&#x540E;&#x8FDB;&#x884C;&#x5378;&#x8F7D;&#xFF09;1hdiutil detach /Volumes/crosstool-ng&#x5B89;&#x88C5;&#x4F9D;&#x8D56;1brew install autoconf binutils gawk gmp gnu-sed help2man mpfr openssl pcre readline wget xz&#x5982;&#x679C;&#x540E;&#x7EED;&#x62A5;&#x4EC0;&#x4E48;&#x9519;&#xFF0C;&#x63D0;&#x793A;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x5305;&#x7EE7;&#x7EED;&#x5B89;&#x88C5;&#x5BF9;&#x5E94;&#x5305;&#x5373;&#x53EF;&#x3002;&#x7F16;&#x8BD1;crosstool-ngcrosstool-ng&#x7684;&#x6587;&#x6863;&#x5730;&#x5740;&#x5728; http://crosstool-ng.github.io/docs/github&#x5730;&#x5740;&#x5728; https://github.com/crosstool-ng/crosstool-ng&#x4E0B;&#x8F7D;&#x6E90;&#x7801;1wget http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.bz2&#x89E3;&#x538B;1tar -jxvf crosstool-ng-1.23.0.tar.bz2&#x8FDB;&#x5165;&#x6E90;&#x7801;&#x76EE;&#x5F55;1cd crosstool-ng-1.23.0&#x6267;&#x884C;bootstrap&#x811A;&#x672C;&#xFF08;&#x53EF;&#x9009;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x6587;&#x4EF6;&#x5B58;&#x5728;&#x7684;&#x8BDD;&#x9700;&#x8981;&#x6267;&#x884C;&#xFF0C;&#x4E0D;&#x5B58;&#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x5219;&#x8DF3;&#x8FC7;&#x6B64;&#x6B65;&#x9AA4;&#xFF09;1./bootstrap&#x6267;&#x884C;configure1./configure&#x6267;&#x884C;&#x7F16;&#x8BD1;1make -j4&#x6267;&#x884C;&#x5B89;&#x88C5;1make install&#x4E4B;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;ct-ng&#x547D;&#x4EE4;&#x4E86;&#x914D;&#x7F6E;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;&#x521B;&#x5EFA;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#x5E76;&#x8FDB;&#x5165;12mkdir workdircd workdir&#x62F7;&#x8D1D;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x3002;&#x8FD9;&#x91CC;&#x57FA;&#x4E8E;&#x6E90;&#x7801;&#x76EE;&#x5F55;crosstool-ng-1.23.0/sample/x86_64-unknown-linux-gnu&#x4E0B;&#x7684;config&#x8FDB;&#x884C;&#x81EA;&#x5B9A;&#x4E49;1cp path/to/crosstool-ng-1.23.0/sample/x86_64-unknown-linux-gnu/crosstool.config .config&#x914D;&#x7F6E;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x9700;&#x8981;&#x5C06;&#x4E00;&#x4E9B;&#x76EE;&#x5F55;&#x6307;&#x5411;&#x6211;&#x4EEC;&#x6700;&#x5F00;&#x59CB;&#x521B;&#x5EFA;&#x7684;&#x5927;&#x5C0F;&#x5199;&#x654F;&#x611F;&#x7684;&#x78C1;&#x76D8;1ct-ng menuconfig&#x9009;&#x62E9;Paths and misc options&#xFF0C;&#x627E;&#x5230;Paths&#xFF0C;&#x4E0B;&#x9762;&#x6709;&#x4E09;&#x4E2A;&#x8DEF;&#x5F84;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x4FEE;&#x6539;Local tarballs dictory&#x6307;&#x5411;&#x5927;&#x5C0F;&#x5199;&#x654F;&#x611F;&#x7684;&#x78C1;&#x76D8;&#xFF0C;&#x5982;1/Volumes/crosstool-ng/src&#x4FEE;&#x6539;Working dictory&#x6307;&#x5411;&#x5927;&#x5C0F;&#x5199;&#x654F;&#x611F;&#x7684;&#x78C1;&#x76D8;&#xFF0C;&#x5982;1/Volumes/crosstool-ng/.build&#x4FEE;&#x6539;x-tools&#x6307;&#x5411;&#x5927;&#x5C0F;&#x5199;&#x654F;&#x611F;&#x7684;&#x78C1;&#x76D8;&#xFF0C;&#x5982;1CT_PREFIX:-/Volumes/crosstool-ng/x-tools}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}&#x56E0;&#x4E3A;&#x9700;&#x8981;&#x7528;&#x5230;&#x4ECE;&#x5386;&#x53F2;&#x6784;&#x5EFA;&#x65AD;&#x70B9;&#x7EE7;&#x7EED;&#x6784;&#x5EFA;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x5C06;Paths and misc options-&gt;crosstool-NG behavior&#x9009;&#x9879;&#x4E0B;&#x7684;Debug crosstool-NG&#x52FE;&#x9009;&#xFF0C;&#x7136;&#x540E;&#x7EE7;&#x7EED;&#x52FE;&#x9009;Save intermediate steps&#x4FEE;&#x6539;&#x5B8C;&#x6210;&#x540E;&#x4FDD;&#x5B58;&#x7136;&#x540E;&#x9000;&#x51FA;&#x4FEE;&#x6539;binutils&#x7248;&#x672C;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x62F7;&#x8D1D;&#x7684;config&#x4F7F;&#x7528;&#x7684;&#x662F;2.28&#x7684;binutils&#xFF0C;&#x800C;gnu&#x7684;ftp&#x4E0A;&#x4E0D;&#x5B58;&#x5728;&#x8BE5;&#x7248;&#x672C;&#x5BF9;&#x5E94;xy&#x540E;&#x7F00;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x7248;&#x672C;&#x4E3A;2.28.1&#xFF0C;&#x800C;2.28.1&#x7248;&#x672C;&#x662F;&#x5B58;&#x5728;xy&#x540E;&#x7F00;&#x7684;&#x6587;&#x4EF6;&#x7684;&#x8FD8;&#x662F;&#x4E00;&#x6837;&#x8FDB;&#x5165;menuconfig&#xFF0C;&#x627E;&#x5230;Binary utilities-&gt;binutils version&#xFF0C;&#x4FEE;&#x6539;&#x7248;&#x672C;&#x53F7;&#x4E3A;2.28.1&#xFF0C;&#x4F46;&#x662F;&#x53D1;&#x73B0;&#x8FD9;&#x91CC;&#x6CA1;&#x6709;2.28.1&#x7684;&#x9009;&#x9879;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x6E90;&#x7801;&#xFF0C;&#x7136;&#x540E;&#x91CD;&#x65B0;&#x6267;&#x884C;&#x7F16;&#x8BD1;&#x5B89;&#x88C5;&#x6B65;&#x9AA4;&#x6253;&#x5F00;&#x6E90;&#x7801;crosstool-ng-1.23.0/config/binutils/binutils.in&#x6587;&#x4EF6;&#xFF0C;&#x627E;&#x5230;&#x5982;&#x4E0B;&#x4EE3;&#x7801;1234config BINUTILS_V_2_28 bool prompt &quot;2.28&quot; select BINUTILS_2_27_or_later&#x5728;&#x524D;&#x9762;&#x52A0;&#x5165;1234config BINUTILS_V_2_28_1 bool prompt &quot;2.28.1&quot; select BINUTILS_2_27_or_later&#x7136;&#x540E;&#x5F80;&#x4E0B;&#x627E;&#x5230;&#x5982;&#x4E0B;&#x4EE3;&#x7801;12345678910# CT_INSERT_VERSION_STRING_BELOWdefault &quot;2.28&quot; if BINUTILS_V_2_28default &quot;2.27&quot; if BINUTILS_V_2_27default &quot;2.26&quot; if BINUTILS_V_2_26default &quot;2.25.1&quot; if BINUTILS_V_2_25_1default &quot;linaro-2.25.0-2015.01-2&quot; if BINUTILS_LINARO_V_2_25default &quot;linaro-2.24.0-2014.11-2&quot; if BINUTILS_LINARO_V_2_24default &quot;2.24&quot; if BINUTILS_V_2_24default &quot;linaro-2.23.2-2013.10-4&quot; if BINUTILS_LINARO_V_2_23_2default &quot;2.23.2&quot; if BINUTILS_V_2_23_2&#x5728;&#x524D;&#x9762;&#x52A0;&#x5165;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;1default &quot;2.28.1&quot; if BINUTILS_V_2_28_1&#x7136;&#x540E;&#x91CD;&#x65B0;&#x6267;&#x884C;./configure&#x3001;make -j4&#x3001;make install&#x7B49;&#x547D;&#x4EE4;&#x91CD;&#x65B0;&#x5B89;&#x88C5;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x6B21;&#x8FDB;&#x5165;menuconfig&#xFF0C;&#x4F1A;&#x53D1;&#x73B0;&#x53EF;&#x4EE5;&#x9009;&#x62E9;2.29&#x4E86;&#x751F;&#x6210;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;&#x5728;workdir&#x4E0B;&#x6267;&#x884C;&#x547D;&#x4EE4;&#x6784;&#x5EFA;1ct-ng build&#x7136;&#x540E;&#x4F1A;&#x4E0B;&#x8F7D;&#x4E00;&#x4E9B;zip&#x6587;&#x4EF6;&#x5230;/Volumes/crosstool-ng/.build/tarballs&#x4E0B;&#xFF0C;&#x6587;&#x4EF6;&#x6709;1234567891011121314binutils-2.28.1.tar.xzexpat-2.2.0.tar.bz2gcc-6.3.0.tar.bz2gdb-7.12.1.tar.xzgettext-0.19.8.1.tar.xzglibc-2.25.tar.xzgmp-6.1.2.tar.xzisl-0.16.1.tar.xzlibiconv-1.15.tar.gzlinux-4.10.8.tar.xzm4-1.4.18.tar.xzmpc-1.0.3.tar.gzmpfr-3.1.5.tar.xzncurses-6.0.tar.gz&#x5982;&#x679C;&#x4F60;&#x89C9;&#x5F97;&#x4E0B;&#x8F7D;&#x6162;&#xFF0C;&#x53EF;&#x4EE5;&#x624B;&#x52A8;&#x4E0B;&#x8F7D;&#x8FD9;&#x4E9B;&#x6587;&#x4EF6;&#xFF0C;&#x5C06;&#x5176;&#x653E;&#x5165;/Volumes/crosstool-ng/.build/tarballs&#xFF0C;&#x6CE8;&#x610F;&#x540D;&#x5B57;&#x4FDD;&#x6301;&#x548C;&#x4E0A;&#x9762;&#x4E00;&#x6837;&#x3002;&#x4E4B;&#x540E;&#x4F1A;&#x6267;&#x884C;&#x89E3;&#x538B;&#xFF0C;&#x6784;&#x5EFA;&#xFF0C;&#x5B89;&#x88C5;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x5927;&#x7EA6;&#x9700;&#x8981;2-3&#x5C0F;&#x65F6;&#x540E;&#x7F16;&#x8BD1;&#x5B8C;&#x6210;&#x3002;&#x56E0;&#x4E3A;&#x5F00;&#x542F;&#x4E86;debug&#x76F8;&#x5173;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x5982;&#x679C;&#x4E2D;&#x65AD;&#x4E86;&#x6784;&#x5EFA;&#xFF0C;&#x53EF;&#x4EE5;&#x968F;&#x65F6;&#x4ECE;&#x4E2D;&#x65AD;&#x7684;&#x5730;&#x65B9;&#x7EE7;&#x7EED;&#x6784;&#x5EFA;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x7684;step&#x5373;&#x53EF;&#xFF0C;step&#x53EF;&#x4EE5;&#x4ECE;&#x63A7;&#x5236;&#x53F0;&#x7684;&#x8F93;&#x51FA;log&#x4E2D;&#x627E;&#x5230;&#x3002;&#x5047;&#x8BBE;log&#x4E2D;&#x51FA;&#x73B0;&#x4E86;&#x5982;&#x4E0B;&#x5B57;&#x6837;&#xFF0C;&#x9700;&#x8981;&#x4ECE;&#x8BE5;&#x6B65;&#x9AA4;&#x6062;&#x590D;1Saving state to restart at step &apos;companion_tools_for_build&apos;...&#x53EA;&#x9700;&#x8981;&#x6267;&#x884C;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x5373;&#x53EF;1ct-ng companion_tools_for_build+&#x6216;&#x8005;1ct-ng build RESTART=companion_tools_for_build&#x7F16;&#x5199;cmake toolchain&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;&#x6587;&#x4EF6;&#x5173;&#x4E8E;cmake toolchain&#x7684;&#x7F16;&#x5199;&#xFF0C;&#x89C1;cmake&#x6587;&#x6863; cross-compiling&#x521B;&#x5EFA;linux-x86_64.toolchain.cmake&#x6587;&#x4EF6;&#xFF0C;&#x52A0;&#x5165;&#x5982;&#x4E0B;&#x5185;&#x5BB9;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687set(CMAKE_SYSTEM_NAME Linux)set(CMAKE_SYSTEM_VERSION 1)set(CMAKE_SYSTEM_PROCESSOR x86_64)set(LINUX_TOOLCHAIN_NAME x86_64-unknown-linux-gnu-)set(LINUX_TOOLCHAIN_ROOT /Volumes/crosstool-ng/x-tools/x86_64-unknown-linux-gnu)set(CMAKE_SYSROOT ${LINUX_TOOLCHAIN_ROOT}/x86_64-unknown-linux-gnu/sysroot)set(CMAKE_C_COMPILER ${LINUX_TOOLCHAIN_ROOT}/bin/${LINUX_TOOLCHAIN_NAME}gcc)set(CMAKE_CXX_COMPILER ${LINUX_TOOLCHAIN_ROOT}/bin/${LINUX_TOOLCHAIN_NAME}g++)set(CMAKE_AR ${LINUX_TOOLCHAIN_ROOT}/bin/${LINUX_TOOLCHAIN_NAME}ar CACHE FILEPATH &quot;Archiver&quot;)set(CMAKE_RANLIB ${LINUX_TOOLCHAIN_ROOT}/bin/${LINUX_TOOLCHAIN_NAME}ranlib CACHE FILEPATH &quot;Ranlib&quot;)set(CMAKE_ASM_COMPILER ${LINUX_TOOLCHAIN_ROOT}/bin/${LINUX_TOOLCHAIN_NAME}as)set(CMAKE_LINKER ${LINUX_TOOLCHAIN_ROOT}/bin/${LINUX_TOOLCHAIN_NAME}ld)set(CMAKE_NM ${LINUX_TOOLCHAIN_ROOT}/bin/${LINUX_TOOLCHAIN_NAME}nm)set(CMAKE_OBJCOPY ${LINUX_TOOLCHAIN_ROOT}/bin/${LINUX_TOOLCHAIN_NAME}objcopy)set(CMAKE_OBJDUMP ${LINUX_TOOLCHAIN_ROOT}/bin/${LINUX_TOOLCHAIN_NAME}objdump)set(CMAKE_STRIP ${LINUX_TOOLCHAIN_ROOT}/bin/${LINUX_TOOLCHAIN_NAME}strip)message(STATUS &quot;CMAKE_SYSROOT = ${CMAKE_SYSROOT}&quot;)message(STATUS &quot;CMAKE_C_COMPILER = ${CMAKE_C_COMPILER}&quot;)message(STATUS &quot;CMAKE_CXX_COMPILER = ${CMAKE_CXX_COMPILER}&quot;)message(STATUS &quot;CMAKE_AR = ${CMAKE_AR}&quot;)message(STATUS &quot;CMAKE_RANLIB = ${CMAKE_RANLIB}&quot;)message(STATUS &quot;CMAKE_ASM_COMPILER = ${CMAKE_ASM_COMPILER}&quot;)message(STATUS &quot;CMAKE_LINKER = ${CMAKE_LINKER}&quot;)message(STATUS &quot;CMAKE_NM = ${CMAKE_NM}&quot;)message(STATUS &quot;CMAKE_OBJCOPY = ${CMAKE_OBJCOPY}&quot;)message(STATUS &quot;CMAKE_OBJDUMP = ${CMAKE_OBJDUMP}&quot;)message(STATUS &quot;CMAKE_STRIP = ${CMAKE_STRIP}&quot;)# Set or retrieve the cached flags.# This is necessary in case the user sets/changes flags in subsequent# configures. If we included the flags in here, they would get# overwritten.set(CMAKE_C_FLAGS &quot;&quot; CACHE STRING &quot;Flags used by the compiler during all build types.&quot;)set(CMAKE_CXX_FLAGS &quot;&quot; CACHE STRING &quot;Flags used by the compiler during all build types.&quot;)set(CMAKE_ASM_FLAGS &quot;&quot; CACHE STRING &quot;Flags used by the compiler during all build types.&quot;)set(CMAKE_C_FLAGS_DEBUG &quot;&quot; CACHE STRING &quot;Flags used by the compiler during debug builds.&quot;)set(CMAKE_CXX_FLAGS_DEBUG &quot;&quot; CACHE STRING &quot;Flags used by the compiler during debug builds.&quot;)set(CMAKE_ASM_FLAGS_DEBUG &quot;&quot; CACHE STRING &quot;Flags used by the compiler during debug builds.&quot;)set(CMAKE_C_FLAGS_RELEASE &quot;&quot; CACHE STRING &quot;Flags used by the compiler during release builds.&quot;)set(CMAKE_CXX_FLAGS_RELEASE &quot;&quot; CACHE STRING &quot;Flags used by the compiler during release builds.&quot;)set(CMAKE_ASM_FLAGS_RELEASE &quot;&quot; CACHE STRING &quot;Flags used by the compiler during release builds.&quot;)set(CMAKE_MODULE_LINKER_FLAGS &quot;&quot; CACHE STRING &quot;Flags used by the linker during the creation of modules.&quot;)set(CMAKE_SHARED_LINKER_FLAGS &quot;&quot; CACHE STRING &quot;Flags used by the linker during the creation of dll&apos;s.&quot;)set(CMAKE_EXE_LINKER_FLAGS &quot;&quot; CACHE STRING &quot;Flags used by the linker.&quot;)set(CMAKE_C_FLAGS &quot;${CMAKE_C_FLAGS}&quot;)set(CMAKE_CXX_FLAGS &quot;${CMAKE_CXX_FLAGS}&quot;)set(CMAKE_ASM_FLAGS &quot;${CMAKE_ASM_FLAGS}&quot;)set(CMAKE_C_FLAGS_DEBUG &quot;${CMAKE_C_FLAGS_DEBUG}&quot;)set(CMAKE_CXX_FLAGS_DEBUG &quot;${CMAKE_CXX_FLAGS_DEBUG}&quot;)set(CMAKE_ASM_FLAGS_DEBUG &quot;${CMAKE_ASM_FLAGS_DEBUG}&quot;)set(CMAKE_C_FLAGS_RELEASE &quot;${CMAKE_C_FLAGS_RELEASE}&quot;)set(CMAKE_CXX_FLAGS_RELEASE &quot;${CMAKE_CXX_FLAGS_RELEASE}&quot;)set(CMAKE_ASM_FLAGS_RELEASE &quot;${CMAKE_ASM_FLAGS_RELEASE}&quot;)set(CMAKE_SHARED_LINKER_FLAGS &quot;${CMAKE_SHARED_LINKER_FLAGS}&quot;)set(CMAKE_MODULE_LINKER_FLAGS &quot;${CMAKE_MODULE_LINKER_FLAGS}&quot;)set(CMAKE_EXE_LINKER_FLAGS &quot;${CMAKE_EXE_LINKER_FLAGS}&quot;)#set(CMAKE_CXX_FLAGS &quot;${CMAKE_CXX_FLAGS} -Wno-unknown-pragmas&quot;)# or #add_definitions(&quot;-Wno-unknown-pragmas&quot;)set(CMAKE_FIND_ROOT_PATH ${LINUX_TOOLCHAIN_ROOT})set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLYONLY)set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)#make VERVOSE=1 to output the log&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;CMAKE_AR&#x548C;CMAKE_RANLIB&#x540E;&#x9762;&#x52A0;&#x4E86;CACHE FILEPATH&#xFF0C;&#x8FD9;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x4E0D;&#x7136;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x9519;&#x3002;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x901A;&#x8FC7;CMAKE_TOOLCHAIN_FILE&#x53C2;&#x6570;&#x6307;&#x5B9A;toolchain&#x6587;&#x4EF6;1cmake -DCMAKE_TOOLCHAIN_FILE=../linux-x86_64.toolchain.cmake ..&#x7136;&#x540E;&#x6267;&#x884C;make&#xFF0C;&#x6267;&#x884C;make&#x8FC7;&#x7A0B;&#x4E2D;&#x5982;&#x679C;&#x53D1;&#x751F;&#x9519;&#x8BEF;&#xFF0C;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;VERVOSE=1&#x5C06;&#x4E00;&#x4E9B;&#x4FE1;&#x606F;&#x8F93;&#x51FA;&#xFF0C;&#x4FBF;&#x4E8E;&#x8C03;&#x8BD5;1make VERVOSE=1&#x6D4B;&#x8BD5;&#x5C06;&#x7F16;&#x8BD1;&#x51FA;&#x6765;&#x7684;&#x52A8;&#x6001;&#x5E93;&#x62F7;&#x5230;linux&#x4E0A;&#x53BB;&#x6D4B;&#x8BD5;&#xFF0C;&#x770B;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x6B63;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x4E86;&#x7C7B;&#x4F3C; libstdc++.so.6: version `CXXABI_ARM_1.3.8&#x2019; not found &#x7684;&#x9519;&#x8BEF;&#xFF0C;&#x662F;&#x56E0;&#x4E3A;&#x751F;&#x6210;&#x7684;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;&#x548C;&#x670D;&#x52A1;&#x5668;&#x73AF;&#x5883;&#x7684;gcc&#x7248;&#x672C;&#x4E0D;&#x4E00;&#x81F4;&#x5BFC;&#x81F4;&#x7684;&#xFF0C;&#x8981;&#x4E48;&#x4FEE;&#x6539;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;&#x7684;gcc&#x7248;&#x672C;&#x548C;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x7684;gcc&#x7248;&#x672C;&#x4E00;&#x6837;&#xFF0C;&#x8981;&#x4E48;&#x4FEE;&#x6539;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x7684;gcc&#x7248;&#x672C;&#x548C;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;&#x7684;gcc&#x7248;&#x672C;&#x4E00;&#x6837;&#xFF0C;&#x65E0;&#x8BBA;&#x54EA;&#x79CD;&#x65B9;&#x5F0F;&#x90FD;&#x53EF;&#x4EE5;&#x3002;&#x5173;&#x4E8E;jni&#x56E0;&#x4E3A;&#x7528;&#x5230;&#x4E86;jni&#xFF0C;&#x9700;&#x8981;&#x7528;&#x5230;&#x76F8;&#x5173;&#x7684;&#x5934;&#x6587;&#x4EF6;&#xFF0C;&#x800C;crosstool-ng&#x5176;&#x5B9E;&#x662F;&#x53EF;&#x4EE5;&#x914D;&#x7F6E;java&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x6D4B;&#x8BD5;&#x4E0B;&#x6765;&#x53D1;&#x73B0;&#x5BBF;&#x4E3B;&#x673A;Mac&#x9700;&#x8981;&#x7528;&#x5230;gcj&#xFF0C;&#x627E;&#x4E86;&#x4E00;&#x5927;&#x5708;&#x53D1;&#x73B0;gcj&#x8001;&#x65E9;&#x5DF2;&#x7ECF;&#x4ECE;gcc&#x4E2D;&#x88AB;&#x79FB;&#x9664;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x9700;&#x8981;&#x7528;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x7F16;&#x8BD1;&#xFF0C;&#x5B9E;&#x5728;&#x9EBB;&#x70E6;&#x3002;&#x6240;&#x4EE5;&#x5E72;&#x8106;&#x7B80;&#x5355;&#x70B9;&#xFF0C;&#x76F4;&#x63A5;&#x62F7;&#x8D1D;&#x5934;&#x6587;&#x4EF6;&#x5C31;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#xFF0C;&#x6709;&#x4E24;&#x79CD;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x5230;&#x670D;&#x52A1;&#x5668;&#x7684;JAVA_HOME&#x76EE;&#x5F55;&#xFF0C;&#x5C06;include&#x6587;&#x4EF6;&#x62F7;&#x8D1D;&#x4E0B;&#x6765;&#x76F4;&#x63A5;&#x7528;&#x4E0B;&#x8F7D;linux&#x7684;jdk&#x538B;&#x7F29;&#x5305;&#xFF0C;&#x76F4;&#x63A5;&#x63D0;&#x53D6;&#x51FA;&#x6765;&#x7528;&#x7F16;&#x8BD1;&#x7684;&#x65F6;&#x5019;&#x6307;&#x5B9A;jni&#x7684;&#x5934;&#x6587;&#x4EF6;&#x76EE;&#x5F55;&#x5373;&#x53EF;&#xFF0C;&#x8FD9;&#x91CC;&#x5C06;include&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x7684;&#x5185;&#x5BB9;&#x653E;&#x5728;/Volumes/crosstool-ng/java-linux&#x4E0B;&#x7684;include&#x76EE;&#x5F55;&#x5173;&#x4E8E;gradlegradle&#x91CC;&#x7528;cmake&#x7F16;&#x8BD1;c/c++&#x4EE3;&#x7801;&#xFF0C;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x5199;gradle&#x811A;&#x672C;&#xFF0C;&#x8FD9;&#x91CC;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x81EA;&#x5DF1;&#x5199;&#x7684;&#x811A;&#x672C;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199apply plugin: JNIPluginclass JNIPlugin implements Plugin&lt;Project&gt; { static def currentOS() { final String p = System.getProperty(&quot;os.name&quot;).toLowerCase(); if (p.contains(&quot;linux&quot;)) { return &quot;linux&quot; } else if (p.contains(&quot;os x&quot;) || p.contains(&quot;darwin&quot;)) { return &quot;darwin&quot; } else if (p.contains(&quot;windows&quot;)) { return &quot;windows&quot; } else { return p.replaceAll(&quot;\\s&quot;, &quot;&quot;) } } static String currentArchitecture() { final String arch = System.getProperty(&quot;os.arch&quot;).toLowerCase() return (arch.equals(&quot;amd64&quot;)) ? &quot;x86_64&quot; : arch } void apply(Project project) { project.afterEvaluate {// def osList = [&quot;darwin&quot;, &quot;linux&quot;]// def architectureList = [&quot;x86_64&quot;] //&#x5F53;&#x524D;&#x73AF;&#x5883;&#x4E3A;mac def osList = [&quot;${currentOS()}&quot;, &quot;linux&quot;] def architectureList = [&quot;${currentArchitecture()}&quot;] def javaHomeList = [ &quot;${currentOS()}&quot;: &quot;${System.getenv(&apos;JAVA_HOME&apos;)}&quot;, &quot;linux&quot; : &quot;/Volumes/crosstool-ng/java-linux&quot; ] osList.each {os -&gt; architectureList.each {architecture -&gt; def javaHome = javaHomeList.get(os) File staticWorkingDir = project.file(&quot;jni/demo-static/${os}-${architecture}&quot;) File dynamicWorkingDir = project.file(&quot;jni/demo-dynamic/${os}-${architecture}&quot;) def demoStaticCleanTask = project.task(&quot;cleanDemoStaticFor${os.capitalize()}${architecture.capitalize()}&quot;) demoStaticCleanTask.setGroup(&quot;jni&quot;) demoStaticCleanTask.doLast { project.println &quot;delete demo static cmake files ${demoStaticCleanTask}&quot; GFileUtils.deleteDirectory(demoStaticCleanTask) } def demoDynamicCleanTask = project.task(&quot;cleanDemoDynamicFor${os.capitalize()}${architecture.capitalize()}&quot;) demoDynamicCleanTask.setGroup(&quot;jni&quot;) demoDynamicCleanTask.doLast { project.println &quot;delete demo dynamic cmake files ${dynamicWorkingDir}&quot; GFileUtils.deleteDirectory(dynamicWorkingDir) } def cleanTask = project.tasks.findByName(&quot;clean&quot;) if (cleanTask) { cleanTask.dependsOn demoStaticCleanTask cleanTask.dependsOn demoDynamicCleanTask } def demoStaticTask = project.task(&quot;demoStaticFor${os.capitalize()}${architecture.capitalize()}&quot;) demoStaticTask.setGroup(&quot;jni&quot;) demoStaticTask.doLast { File staticLibrary = new File(staticWorkingDir, &quot;/install/lib/libdemostatic.a&quot;) if (!staticLibrary.exists()) { project.println &quot;staticLibrary not exist.&quot; GFileUtils.deleteDirectory(staticWorkingDir) GFileUtils.mkdirs(staticWorkingDir) //generate cmake files project.exec(new Action&lt;ExecSpec&gt;() { @Override void execute(ExecSpec execSpec) { execSpec.workingDir staticWorkingDir execSpec.executable &quot;cmake&quot; if (os == &quot;linux&quot; &amp;&amp; currentOS() != &quot;linux&quot;) { execSpec.args &quot;-DCMAKE_TOOLCHAIN_FILE=${project.file(&apos;jni/linux-x86_64.toolchain.cmake&apos;)}&quot; } execSpec.args(&quot;..&quot;) } }) //clean project.exec(new Action&lt;ExecSpec&gt;() { @Override void execute(ExecSpec execSpec) { execSpec.workingDir staticWorkingDir execSpec.executable &quot;make&quot; execSpec.args(&quot;clean&quot;) } }) } //make project.exec(new Action&lt;ExecSpec&gt;() { @Override void execute(ExecSpec execSpec) { execSpec.workingDir staticWorkingDir execSpec.executable &quot;make&quot; execSpec.args(&quot;-j4&quot;) } }) //install project.exec(new Action&lt;ExecSpec&gt;() { @Override void execute(ExecSpec execSpec) { execSpec.workingDir staticWorkingDir execSpec.executable &quot;make&quot; execSpec.args(&quot;install&quot;) } }) } def demoDynamicTask = project.task(&quot;demoDynamicFor${os.capitalize()}${architecture.capitalize()}&quot;) demoDynamicTask.setGroup(&quot;jni&quot;) demoDynamicTask.dependsOn demoStaticTask demoDynamicTask.doLast { File dynamicLibraryDir = new File(dynamicWorkingDir, &quot;/install/lib&quot;) File demoStaticInstallDir = new File(staticWorkingDir, &quot;/install&quot;) String demoVersion = &quot;0.0.1&quot; File[] dynamicLibrary = dynamicLibraryDir.listFiles(new FileFilter() { @Override boolean accept(File pathname) { return pathname.isFile() &amp;&amp; pathname.getName().startsWith(&quot;lib&quot;) } }) if (!dynamicLibraryDir.exists() || dynamicLibrary == null || dynamicLibrary.length == 0) { project.println &quot;dynamicLibrary not exist.&quot; GFileUtils.deleteDirectory(dynamicWorkingDir) GFileUtils.mkdirs(dynamicWorkingDir) //generate cmake files project.exec(new Action&lt;ExecSpec&gt;() { @Override void execute(ExecSpec execSpec) { execSpec.workingDir dynamicWorkingDir execSpec.executable &quot;cmake&quot; execSpec.args(&quot;-DDEMO_INSTALL_PATH=${demoStaticInstallDir.absolutePath}&quot;) execSpec.args(&quot;-DVERSION=${demoVersion}&quot;) execSpec.args(&quot;-DJAVA_INCLUDE=${javaHome}/include&quot;) execSpec.args(&quot;-DJAVA_OS_INCLUDE=${javaHome}/include/${os}&quot;) if (os == &quot;linux&quot; &amp;&amp; currentOS() != &quot;linux&quot;) { execSpec.args &quot;-DCMAKE_TOOLCHAIN_FILE=${project.file(&apos;jni/linux-x86_64.toolchain.cmake&apos;)}&quot; } execSpec.args(&quot;..&quot;) } }) //clean project.exec(new Action&lt;ExecSpec&gt;() { @Override void execute(ExecSpec execSpec) { execSpec.workingDir dynamicWorkingDir execSpec.executable &quot;make&quot; execSpec.args(&quot;clean&quot;) } }) } //make project.exec(new Action&lt;ExecSpec&gt;() { @Override void execute(ExecSpec execSpec) { execSpec.workingDir dynamicWorkingDir execSpec.executable &quot;make&quot; execSpec.args(&quot;VERBOSE=1&quot;) execSpec.args(&quot;-j4&quot;) } }) //install project.exec(new Action&lt;ExecSpec&gt;() { @Override void execute(ExecSpec execSpec) { execSpec.workingDir dynamicWorkingDir execSpec.executable &quot;make&quot; execSpec.args(&quot;install&quot;) } }) } def compileJavaTask = project.tasks.findByName(&quot;compileJava&quot;) if (compileJavaTask) { compileJavaTask.dependsOn demoStaticTask compileJavaTask.dependsOn demoDynamicTask } } } } }}&#x5F53;&#x7136;&#x6253;&#x5305;jar&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x5C06;&#x52A8;&#x6001;&#x5E93;&#x6253;&#x5230;jar&#x5305;&#x91CC;12345678910111213141516171819202122232425262728293031323334353637apply plugin: &apos;java&apos;sourceCompatibility = 1.8static def currentOS() { final String p = System.getProperty(&quot;os.name&quot;).toLowerCase() if (p.contains(&quot;linux&quot;)) { return &quot;linux&quot; } else if (p.contains(&quot;os x&quot;) || p.contains(&quot;darwin&quot;)) { return &quot;darwin&quot; } else if (p.contains(&quot;windows&quot;)) { return &quot;windows&quot; } else { return p.replaceAll(&quot;\\s&quot;, &quot;&quot;) }}static def currentArchitecture() { final String arch = System.getProperty(&quot;os.arch&quot;).toLowerCase() return (arch.equals(&quot;amd64&quot;)) ? &quot;x86_64&quot; : arch}jar { //def osList = [&quot;darwin&quot;, &quot;linux&quot;] //def architectureList = [&quot;x86_64&quot;] def osList = [&quot;${currentOS()}&quot;, &quot;linux&quot;] def architectureList = [&quot;${currentArchitecture()}&quot;] osList.each {os -&gt; architectureList.each {architecture -&gt; //copy shared library to classpath when assemble a jar from(project.file(&quot;jni/demoDynamic/${os}-${architecture}/install/lib&quot;)) { into &quot;com/lizhangqu/lib/dynamic/${os}-${architecture}&quot; } } }}cmake&#x4E2D;&#x9700;&#x8981;&#x6307;&#x5B9A;&#x5B89;&#x88C5;&#x76EE;&#x5F55;1234if(NOT DEFINED CMAKE_INSTALL_PREFIX)set(CMAKE_INSTALL_PREFIX &quot;${CMAKE_BINARY_DIR}/install&quot; CACHE PATH &quot;Installation Directory&quot;)endif()message(STATUS &quot;CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}&quot;)cmake &#x4E2D;install&#x52A8;&#x6001;&#x5E93;1install(TARGETS demodynamic LIBRARY DESTINATION lib)&#x5173;&#x4E8E;java&#x52A0;&#x8F7D;&#x53C2;&#x8003;tensorflow&#x7684;&#x52A8;&#x6001;&#x5E93;&#x52A0;&#x8F7D;&#x65B9;&#x5F0F;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133final class NativeLibrary { private static final boolean DEBUG = true; private static final String PACKAGENAME = &quot;com/lizhangqu/lib/dynamic&quot;; private static final String LIBNAME = &quot;demodynamic&quot;; public static void load() { if (isLoaded() || tryLoadLibrary()) { // Either: // (1) The native library has already been statically loaded, OR // (2) The required native code has been statically linked (through a custom launcher), OR // (3) The native code is part of another library (such as an an application-level libraryh) // that has already been loaded. // // Doesn&apos;t matter how, but it seems the native code is loaded, so nothing else to do. return; } // Native code is not present, perhaps it has been packaged into the .jar file containing this. final String resourceName = makeResourceName(); log(&quot;resourceName: &quot; + resourceName); InputStream resource = NativeLibrary.class.getClassLoader().getResourceAsStream(resourceName); //retry if (resource == null) { String abiName = makeABILibName(); log(&quot;abiName: &quot; + abiName); resource = NativeLibrary.class.getResourceAsStream(abiName); } if (resource == null) { throw new UnsatisfiedLinkError( String.format( &quot;Cannot find bridge native library for OS: %s, architecture: %s. &quot;, os(), architecture())); } try { System.load(extractResource(resource)); } catch (IOException e) { throw new UnsatisfiedLinkError( String.format( &quot;Unable to extract native library into a temporary file (%s)&quot;, e.toString())); } } private static boolean tryLoadLibrary() { try { System.loadLibrary(LIBNAME); return true; } catch (UnsatisfiedLinkError e) { log(&quot;tryLoadLibraryFailed: &quot; + e.getMessage()); return false; } } private static boolean isLoaded() { try { //&#x63D0;&#x4F9B;getVersion&#x65B9;&#x6CD5;&#x7528;&#x4E8E;&#x6D4B;&#x8BD5;&#x662F;&#x5426;&#x52A0;&#x8F7D;&#x6210;&#x529F; String version = DemoDynamic.getVersion(); log(&quot;version: &quot; + version); log(&quot;isLoaded: true&quot;); return true; } catch (UnsatisfiedLinkError e) { return false; } } private static String extractResource(InputStream resource) throws IOException { final String sampleFilename = System.mapLibraryName(LIBNAME); final int dot = sampleFilename.indexOf(&quot;.&quot;); final String prefix = (dot &lt; 0) ? sampleFilename : sampleFilename.substring(0, dot); final String suffix = (dot &lt; 0) ? null : sampleFilename.substring(dot); final File dst = File.createTempFile(prefix, suffix); final String dstPath = dst.getAbsolutePath(); dst.deleteOnExit(); log(&quot;extracting native library to: &quot; + dstPath); final long nbytes = copy(resource, dst); log(String.format(&quot;copied %d bytes to %s&quot;, nbytes, dstPath)); return dstPath; } private static String os() { final String p = System.getProperty(&quot;os.name&quot;).toLowerCase(); if (p.contains(&quot;linux&quot;)) { return &quot;linux&quot;; } else if (p.contains(&quot;os x&quot;) || p.contains(&quot;darwin&quot;)) { return &quot;darwin&quot;; } else if (p.contains(&quot;windows&quot;)) { return &quot;windows&quot;; } else { return p.replaceAll(&quot;\\s&quot;, &quot;&quot;); } } private static String architecture() { final String arch = System.getProperty(&quot;os.arch&quot;).toLowerCase(); return (arch.equals(&quot;amd64&quot;)) ? &quot;x86_64&quot; : arch; } private static void log(String msg) { if (DEBUG) { System.err.println(&quot;com.lizhangqu.lib.dynamic.NativeLibrary: &quot; + msg); } } private static String makeResourceName() { return PACKAGENAME + String.format(&quot;/%s-%s/&quot;, os(), architecture()) + System.mapLibraryName(LIBNAME); } private static String makeABILibName() { return String.format(&quot;%s-%s/&quot;, os(), architecture()) + System.mapLibraryName(LIBNAME); } private static long copy(InputStream src, File dstFile) throws IOException { FileOutputStream dst = new FileOutputStream(dstFile); try { byte[] buffer = new byte[1 &lt;&lt; 20]; // 1MB long ret = 0; int n = 0; while ((n = src.read(buffer)) &gt;= 0) { dst.write(buffer, 0, n); ret += n; } return ret; } finally { dst.close(); src.close(); } }}]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>交叉编译</tag>
        <tag>Mac</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[再谈 brew]]></title>
    <url>%2F2017%2F08%2F16%2F%E5%86%8D%E8%B0%88brew%2F</url>
    <content type="text"><![CDATA[&#x7528;brew&#x4E00;&#x76F4;&#x90FD;&#x662F;&#x50BB;&#x4E4E;&#x4E4E;&#x7684;brew install&#x6765;&#x5B89;&#x88C5;&#x67D0;&#x4E2A;&#x8F6F;&#x4EF6;&#xFF0C;&#x76F4;&#x5230;&#x6709;&#x4E00;&#x5929;&#xFF0C;&#x9700;&#x8981;&#x5B89;&#x88C5;&#x4E00;&#x4E2A;&#x4F4E;&#x7248;&#x672C;&#x7684;&#x8F6F;&#x4EF6;&#xFF0C;&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x4E0D;&#x4F1A;&#xFF0C;&#x4E8E;&#x662F;&#x518D;&#x8C08;&#x8C08;&#x8FD9;&#x4E1C;&#x897F;&#x3002;&#x5B89;&#x88C5;brew1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&#x5347;&#x7EA7;brew&#x81EA;&#x8EAB;1brew update&#x67E5;&#x770B;brew&#x81EA;&#x8EAB;&#x7684;&#x4E00;&#x4E9B;&#x4FE1;&#x606F;1brew config&#x5B89;&#x88C5;&#x67D0;&#x4E2A;&#x8F6F;&#x4EF6;1brew install [FORMULA...]&#x5378;&#x8F7D;&#x67D0;&#x4E2A;&#x8F6F;&#x4EF6;1brew uninstall FORMULA...&#x5347;&#x7EA7;&#x67D0;&#x4E2A;&#x8F6F;&#x4EF6;1brew upgrade [FORMULA...]&#x67E5;&#x770B;&#x67D0;&#x4E2A;&#x8F6F;&#x4EF6;&#x7684;&#x5B89;&#x88C5;&#x8BE6;&#x60C5;1brew info [FORMULA...]&#x6253;&#x5F00;&#x67D0;&#x4E2A;&#x8F6F;&#x4EF6;&#x7684;&#x4E3B;&#x9875;1brew home [FORMULA...]&#x67E5;&#x770B;&#x67D0;&#x4E2A;&#x8F6F;&#x4EF6;&#x7684;&#x5B89;&#x88C5;&#x9009;&#x9879;1brew options [FORMULA...]&#x5217;&#x51FA;&#x67D0;&#x4E2A;&#x8F6F;&#x4EF6;&#x5B89;&#x88C5;&#x7684;&#x6240;&#x6709;&#x4FE1;&#x606F;1brew list [FORMULA...]&#x641C;&#x7D22;&#x67D0;&#x4E2A;&#x8F6F;&#x4EF6;1brew search [TEXT|/REGEX/]&#x5982;1brew search automake&#x4F7F;&#x7528;rb&#x6587;&#x4EF6;&#x6765;&#x5B89;&#x88C5;&#xFF0C;&#x652F;&#x6301;&#x8FDC;&#x7A0B;&#x6587;&#x4EF6;&#x6216;&#x672C;&#x5730;&#x6587;&#x4EF6;&#x5982;1brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/487047e550fa24bc0486c0f0243da837ddaa488c/Formula/cmake.rb&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x672C;&#x5730;&#x6587;&#x4EF6;1brew install cmake.rb&#x5B89;&#x88C5;&#x7279;&#x5B9A;&#x7248;&#x672C;&#x7684;&#x8F6F;&#x4EF6;&#x65B9;&#x6CD5;&#x4E00;&#xFF1A;&#x9996;&#x5148;&#x627E;&#x5230;github&#x4E0A;&#x7684;rb&#x6587;&#x4EF6;&#xFF0C;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x7248;&#x672C;&#x7684;raw&#x6587;&#x4EF6;&#xFF0C;&#x5982;https://raw.githubusercontent.com/Homebrew/homebrew-core/487047e550fa24bc0486c0f0243da837ddaa488c/Formula/cmake.rb&#xFF0C;&#x7136;&#x540E;&#x6267;&#x884C;&#x5982;&#x4E0B;&#x547D;&#x4EE4;&#x6765;&#x5B89;&#x88C5;1brew install &#x8FDC;&#x7A0B;&#x5730;&#x5740;&#x65B9;&#x6CD5;&#x4E8C;&#xFF1A;&#x5982;&#x679C;&#x627E;&#x4E0D;&#x5230;&#x5BF9;&#x5E94;&#x7248;&#x672C;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x6700;&#x65B0;&#x7684;rb&#x6587;&#x4EF6;&#x4E0B;&#x8F7D;&#x5230;&#x672C;&#x5730;&#xFF0C;&#x4FEE;&#x6539;url&#x548C;sha256&#x503C;&#x4E3A;&#x4F60;&#x9700;&#x8981;&#x7684;&#x7248;&#x672C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x6267;&#x884C;&#x5982;&#x4E0B;&#x547D;&#x4EE4;&#x6765;&#x5B89;&#x88C5;1brew install &#x6587;&#x4EF6;&#x8DEF;&#x5F84;mac&#x4E0A;sha256&#x7684;&#x503C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5982;&#x4E0B;&#x547D;&#x4EE4;&#x8BA1;&#x7B97;1shasum -a 256 &#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x53BB;&#x9664;&#x94FE;&#x63A5;1brew unlink formula&#x94FE;&#x63A5;1brew link [FORMULA...]&#x5207;&#x6362;&#x7248;&#x672C;1brew switch &lt;name&gt; &lt;version&gt;]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一种使用 Fresco 非侵入式加载图片的方式]]></title>
    <url>%2F2017%2F07%2F27%2F%E4%B8%80%E7%A7%8D%E4%BD%BF%E7%94%A8Fresco%E9%9D%9E%E4%BE%B5%E5%85%A5%E5%BC%8F%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;Fresco&#x6709;&#x591A;&#x53FC;&#x6211;&#x5C31;&#x4E0D;&#x8BF4;&#x4E86;&#xFF01;SimpleDraweeView&#x7684;&#x4E0D;&#x8DB3;&#x7528;&#x8FC7;Fresco&#x7684;&#x540C;&#x5B66;&#x90FD;&#x77E5;&#x9053;&#xFF0C;&#x4F7F;&#x7528;&#x5B83;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x6210;&#x672C;&#xFF0C;&#x5FC5;&#x987B;&#x628A;&#x6240;&#x6709;ImageView&#x66FF;&#x6362;&#x4E3A;SimpleDraweeView&#xFF0C;&#x4E14;&#x662F;&#x4FB5;&#x5165;&#x5E03;&#x5C40;&#x5F0F;&#x7684;&#x4FEE;&#x6539;&#x3002;&#x7A0D;&#x5FAE;&#x597D;&#x4E00;&#x70B9;&#x7684;&#x65B9;&#x5F0F;&#x662F;&#x4FEE;&#x6539;&#x9879;&#x76EE;&#x4E2D;&#x7684;ImageView&#x7684;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#x3002;&#x5982;&#x4E0B;&#xFF1A;&#x5728;&#x4E00;&#x4E9B;&#x5927;&#x578B;&#x9879;&#x76EE;&#x4E2D;&#xFF0C;&#x53EF;&#x80FD;&#x4E1A;&#x52A1;&#x4E0A;&#x5E76;&#x6CA1;&#x6709;&#x76F4;&#x63A5;&#x5728;&#x5E03;&#x5C40;&#x4E2D;&#x4F7F;&#x7528;android.widget.ImageView&#xFF0C;&#x800C;&#x662F;&#x81EA;&#x5B9A;&#x4E49;&#x4E00;&#x5C42;&#xFF0C;&#x5B9E;&#x73B0;&#x4E1A;&#x52A1;&#x4E0A;&#x7684;&#x90E8;&#x5206;&#x9700;&#x6C42;&#xFF08;&#x5982;webp&#x8F6C;&#x6362;/&#x964D;&#x7EA7;&#x652F;&#x6301;&#xFF0C;&#x5BBD;&#x9AD8;&#x88C1;&#x526A;&#x652F;&#x6301;&#x7B49;&#x7B49;&#xFF09;&#xFF0C;&#x540C;&#x65F6;&#x65B9;&#x4FBF;&#x5230;&#x65F6;&#x5019;&#x53EF;&#x76F4;&#x63A5;&#x901A;&#x8FC7;&#x4FEE;&#x6539;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#x6765;&#x968F;&#x610F;&#x66FF;&#x6362;&#x56FE;&#x7247;&#x5E93;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718192021public class MyImageView extends ImageView { public MyImageView(Context context) { super(context); init(); } public MyImageView(Context context, @Nullable AttributeSet attrs) { super(context, attrs); init(); } public MyImageView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); init(); } private void init() { }}&#x5728;&#x5E03;&#x5C40;&#x91CC;&#x5E76;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x4F7F;&#x7528;android.widget.ImageView&#xFF0C;&#x800C;&#x662F;&#x4F7F;&#x7528;MyImageView123&lt;io.github.lizhangqu.sample.MyImageView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot;/&gt;&#x6240;&#x4EE5;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x4F7F;&#x7528;Fresco&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5C06;MyImageView&#x7684;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#x4FEE;&#x6539;&#x4E3A;&#x7EE7;&#x627F;SimpleDraweeView&#x5373;&#x53EF;&#xFF0C;&#x65E0;&#x9700;&#x6539;&#x52A8;&#x4E1A;&#x52A1;&#x4EE3;&#x7801;&#x3002;&#x4E8B;&#x7269;&#x603B;&#x662F;&#x6709;&#x4E24;&#x9762;&#x6027;&#x7684;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x867D;&#x7136;&#x6709;&#x5176;&#x4F18;&#x70B9;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x6709;&#x5F0A;&#x7AEF;&#xFF0C;&#x5C31;&#x662F;&#x7528;&#x5230;&#x56FE;&#x7247;&#x52A0;&#x8F7D;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x90FD;&#x5FC5;&#x987B;&#x4F7F;&#x7528;MyImageView&#x800C;&#x4E0D;&#x662F;ImageView&#xFF08;&#x867D;&#x7136;SimpleDraweeView&#x4E5F;&#x4E00;&#x6837;&#xFF09;&#x3002;&#x4F46;&#x662F;&#x4ED6;&#x6BD4;&#x76F4;&#x63A5;&#x5728;&#x5E03;&#x5C40;&#x4E2D;&#x4F7F;&#x7528;SimpleDraweeView&#x8981;&#x5F88;&#x591A;&#xFF0C;&#x6536;&#x655B;&#x4E86;&#x56FE;&#x7247;&#x7684;&#x5165;&#x53E3;&#xFF0C;&#x65B9;&#x4FBF;&#x66FF;&#x6362;&#x3002;&#x8FD8;&#x6709;&#x4E00;&#x70B9;&#x5C31;&#x662F;&#x5404;&#x4E2A;&#x57FA;&#x7840;&#x5E93;&#x5F97;&#x4F9D;&#x8D56;&#x8FD9;&#x4E2A;&#x7EE7;&#x627F;&#x4E86;&#x7684;View&#x3002;&#x56FE;&#x7247;&#x9009;&#x62E9;&#x5668;&#x5F15;&#x53D1;&#x7684;&#x95EE;&#x9898;&#x6700;&#x8FD1;&#x60F3;&#x628A;&#x9879;&#x76EE;&#x4E2D;&#x7684;&#x56FE;&#x7247;&#x9009;&#x62E9;&#x5668;&#x7ED9;&#x6362;&#x6389;&#xFF0C;&#x56E0;&#x4E3A;&#x76EE;&#x524D;&#x4F7F;&#x7528;&#x7684;&#x56FE;&#x7247;&#x9009;&#x62E9;&#x5668;&#x6548;&#x679C;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;&#xFF0C;&#x4EE3;&#x7801;&#x4FEE;&#x6539;&#x81EA;github&#x4E0A;&#x4E00;&#x4E2A;&#x9879;&#x76EE;ImageChoose&#xFF0C;&#x9879;&#x76EE;&#x6BD4;&#x8F83;&#x8001;&#xFF0C;&#x76EE;&#x524D;&#x5DF2;&#x7ECF;&#x6CA1;&#x4EBA;&#x7EF4;&#x62A4;&#x4E86;&#x3002;&#x4E8E;&#x662F;&#x6253;&#x7B97;&#x6362;&#x4E00;&#x4E2A;&#x56FE;&#x7247;&#x9009;&#x62E9;&#x5668;&#xFF0C;&#x800C;&#x524D;&#x6BB5;&#x65F6;&#x95F4;&#xFF0C;&#x77E5;&#x4E4E;&#x521A;&#x597D;&#x5F00;&#x6E90;&#x4E86;&#x4E00;&#x4E2A;&#x56FE;&#x7247;&#x9009;&#x62E9;&#x5668;&#xFF0C;&#x5C31;&#x62FF;&#x5B83;&#x5F00;&#x5200;&#x4E86;&#xFF0C;&#x9879;&#x76EE;&#x5730;&#x5740; Matisse&#x3002;&#x5C06;&#x9879;&#x76EE;clone&#x4E0B;&#x6765;&#x4E00;&#x770B;&#xFF0C;&#x61F5;&#x903C;&#x4E86;&#xFF0C;&#x6CA1;&#x6709;&#x5BF9;Fresco&#x7684;&#x652F;&#x6301;&#xFF0C;&#x800C;&#x9879;&#x76EE;&#x4E2D;&#x4F7F;&#x7528;&#x7684;&#x662F;Fresco&#xFF0C;&#x603B;&#x4E0D;&#x80FD;&#x56E0;&#x4E3A;&#x4E00;&#x4E2A;&#x56FE;&#x7247;&#x9009;&#x62E9;&#x5668;&#x5F15;&#x5165;&#x4E24;&#x5957;&#x56FE;&#x7247;&#x5E93;&#x5427;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x5751;&#x7239;&#x7684;&#x505A;&#x6CD5;&#x3002;&#x4E8E;&#x662F;&#x770B;&#x4E86;&#x4E0B;issue&#xFF0C;&#x53D1;&#x73B0;&#x8FD8;&#x662F;&#x6709;&#x5F88;&#x591A;&#x8FD9;&#x6837;&#x7684;&#x8BC9;&#x6C42;&#x7684;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A;Why not add FrescoEngine?&#x5EFA;&#x8BAE;&#x652F;&#x6301;&#x4E0B;frescoHow to support for Fresco?&#x770B;&#x4E00;&#x4E2A;&#x56DE;&#x590D;@Logan676 As you said, why not add FrescoEngine? I&#x2019;ve asked myself the same question. The truth is that Fresco has a lot of customizations, it defines its own view which is SimpleDraweeView. So, if we want to support Fresco, it&#x2019;s not that simple you just implement ImageEngine, a lot more work needed.&#x770B;&#x6765;&#x77E5;&#x4E4E;&#x4E0D;&#x652F;&#x6301;Fresco&#x4E5F;&#x662F;&#x6709;&#x539F;&#x56E0;&#x7684;&#x3002;&#x5BFB;&#x627E;&#x89E3;&#x51B3;&#x65B9;&#x5F0F;&#x662F;&#x5426;&#x5B58;&#x5728;&#x4E00;&#x79CD;&#x4E0D;&#x4F7F;&#x7528;SimpleDraweeView&#x800C;&#x80FD;&#x52A0;&#x8F7D;&#x56FE;&#x7247;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x901A;&#x8FC7;&#x67E5;&#x770B;&#x6587;&#x6863; writing-custom-views &#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;Fresco&#x662F;&#x652F;&#x6301;&#x81EA;&#x5B9A;&#x4E49;View&#x7684;&#x3002;&#x4E3B;&#x8981;&#x9700;&#x8981;&#x5904;&#x7406;&#x4EE5;&#x4E0B;&#x51E0;&#x4EF6;&#x4E8B;&#x60C5;&#x5904;&#x7406;&#x597D;DraweeHolder&#x7684;attach/detach&#x4E8B;&#x4EF6;&#x5982;&#x679C;&#x5F00;&#x542F;&#x4E86;&#x52A0;&#x8F7D;&#x5931;&#x8D25;&#x70B9;&#x51FB;&#x91CD;&#x8BD5;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x9700;&#x8981;&#x5904;&#x7406;&#x597D;View&#x7684;onTouchEvent&#x4E8B;&#x4EF6;DraweeHolder&#x548C;DraweeHierarchy&#x5BF9;&#x8C61;&#x7684;&#x521B;&#x5EFA;&#x5C3D;&#x91CF;&#x53EA;&#x521B;&#x5EFA;&#x4E00;&#x6B21;&#xFF0C;&#x56E0;&#x4E3A;&#x5F00;&#x9500;&#x6BD4;&#x8F83;&#x5927;&#x901A;&#x8FC7;DraweeHolder.getTopLevelDrawable()&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x62FF;&#x5230;Drawable&#x5BF9;&#x8C61;&#xFF0C;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x5373;&#x53EF;&#xFF0C;&#x4F46;&#x662F;&#x4F60;&#x4E0D;&#x80FD;&#x968F;&#x610F;&#x7684;&#x53D8;&#x6362;&#x8FD9;&#x4E2A;Drawable&#x5BF9;&#x8C61;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x73B0;&#x5728;&#x6CA1;&#x6709;&#x7EE7;&#x627F;ImageView&#xFF0C;&#x6240;&#x4EE5;&#x6CA1;&#x529E;&#x6CD5;&#x5904;&#x7406;attach/detach&#x4E8B;&#x4EF6;&#xFF0C;&#x552F;&#x4E00;&#x53EF;&#x884C;&#x7684;&#x5C31;&#x662F;View.OnAttachStateChangeListener&#x4E8B;&#x4EF6;12345678//remove listener if neededtargetView.removeOnAttachStateChangeListener(mDraweeHolderDispatcher);//if is already attached, call method onViewAttachedToWindow.if (isAttachedToWindow(targetView)) { mDraweeHolderDispatcher.onViewAttachedToWindow(targetView);}//add attach state change listenertargetView.addOnAttachStateChangeListener(mDraweeHolderDispatcher);&#x4F46;&#x662F;&#x5728;&#x8C03;&#x7528;addOnAttachStateChangeListener&#x524D;&#xFF0C;&#x53EF;&#x80FD;&#x8BE5;View&#x5DF2;&#x7ECF;AttachedToWindow&#x4E86;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5DF2;&#x7ECF;AttachedToWindow&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x7684;&#x8BDD;&#xFF0C;&#x624B;&#x52A8;&#x8C03;&#x7528;&#x4E00;&#x904D;onViewAttachedToWindow.&#x5BF9;&#x4E8E;&#x70B9;&#x51FB;&#x91CD;&#x8BD5;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x719F;&#x6089;View&#x7684;&#x4E8B;&#x4EF6;&#x673A;&#x5236;&#xFF0C;&#x5C31;&#x5F88;&#x597D;&#x529E;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x5BF9;View&#x8BBE;&#x7F6E;&#x4E86;OnTouchListener&#xFF0C;&#x90A3;&#x4E48;OnTouchListener&#x4F1A;&#x4F18;&#x5148;&#x4E8E;onTouchEvent&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x5BF9;&#x5E94;&#x7684;&#x4E8B;&#x4EF6;&#x5206;&#x53D1;&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;:12345678910ListenerInfo li = mListenerInfo;if (li != null &amp;&amp; li.mOnTouchListener != null &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; li.mOnTouchListener.onTouch(this, event)) { result = true;}if (!result &amp;&amp; onTouchEvent(event)) { result = true;}&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x76F4;&#x63A5;&#x8BBE;&#x7F6E;OnTouchListener&#x5373;&#x53EF;&#xFF0C;&#x6CE8;&#x610F;&#xFF0C;&#x8FD9;&#x4F1A;&#x8986;&#x76D6;&#x5DF2;&#x6709;&#x7684;OnTouchListener&#x4E8B;&#x4EF6;&#xFF0C;&#x8FD9;&#x91CC;&#x662F;&#x4E00;&#x4E2A;&#x5751;&#x70B9;&#x3002;1targetView.setOnTouchListener(mDraweeHolderDispatcher);mDraweeHolderDispatcher&#x662F;DraweeHolderDispatcher&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x5176;&#x4F5C;&#x7528;&#x4E3B;&#x8981;&#x505A;&#x5404;&#x79CD;&#x4E8B;&#x4EF6;&#x7684;&#x5206;&#x53D1;&#xFF0C;&#x5206;&#x53D1;&#x5230;mDraweeHolder&#x5BF9;&#x5E94;&#x7684;&#x4E8B;&#x4EF6;&#x4E0A;&#x53BB;&#xFF0C;&#x5176;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A;1234567891011121314151617181920212223242526private class DraweeHolderDispatcher implements View.OnAttachStateChangeListener, View.OnTouchListener { @Override public void onViewAttachedToWindow(View v) { if (mDraweeHolder != null) { mDraweeHolder.onAttach(); } } @Override public void onViewDetachedFromWindow(View v) { if (mDraweeHolder != null) { mDraweeHolder.onDetach(); } } @Override public boolean onTouch(View v, MotionEvent event) { if (mDraweeHolder != null) { if (mDraweeHolder.onTouchEvent(event)) { return true; } } return false; }}&#x901A;&#x8FC7;&#x7FFB;&#x770B;SimpleDraweeView&#x53CA;&#x5176;&#x7236;&#x7C7B;&#x6E90;&#x7801;&#xFF0C;&#x53D1;&#x73B0;Fresco&#x8FD8;&#x91CD;&#x5199;&#x4E86;View&#x7684;&#x53E6;&#x5916;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x3002;1234567891011@Overridepublic void onStartTemporaryDetach() { super.onStartTemporaryDetach(); onDetach();}@Overridepublic void onFinishTemporaryDetach() { super.onFinishTemporaryDetach(); onAttach();}&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x6709;&#x4EC0;&#x4E48;&#x7528;&#x5462;&#xFF0C;&#x53C2;&#x8003;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;Android&#x4E2D;&#x5224;&#x65AD;&#x5B50;View&#x4ECE;ListView&#x4E2D;&#x79FB;&#x9664;&#xFF0C;&#x5982;&#x679C;&#x4F7F;&#x7528;&#x4E86;AbstractListView&#x5176;&#x5B50;&#x7C7B;&#xFF0C;&#x5982;ListView&#x6216;&#x8005;GridView&#xFF0C;&#x4F60;&#x6700;&#x597D;&#x5904;&#x7406;&#x4E00;&#x4E0B;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x4ED6;&#x4EEC;&#x7684;item&#x88AB;&#x79FB;&#x51FA;&#x5C4F;&#x5E55;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5176;detach&#x5E76;&#x6CA1;&#x6709;&#x8C03;&#x7528;&#xFF0C;&#x800C;&#x662F;&#x8C03;&#x7528;onStartTemporaryDetach&#x548C;onFinishTemporaryDetach&#x3002;&#x4F46;&#x662F;RecyclerView&#x4E0D;&#x5B58;&#x5728;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x5904;&#x7406;&#x65B9;&#x5F0F;&#x5982;&#x4E0B;&#xFF1A;&#x95EE;&#x9898;&#x7684;&#x6700;&#x5927;&#x963B;&#x788D;&#x662F;&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x5E76;&#x6CA1;&#x6709;&#x5411;&#x5916;&#x5206;&#x53D1;&#xFF0C;&#x552F;&#x4E00;&#x7684;&#x9014;&#x5F84;&#x5C31;&#x662F;&#x7EE7;&#x627F;&#x91CD;&#x5199;&#xFF0C;&#x4E8E;&#x662F;&#x727A;&#x7272;&#x4E0B;&#xFF0C;&#x8BA9;&#x5176;&#x53EF;&#x6709;&#x53EF;&#x65E0;&#x5427;&#xFF0C;&#x5982;&#x679C;&#x4ED6;&#x5B58;&#x5728;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x8C03;&#x7528;&#x5BF9;&#x5E94;&#x7684;&#x4E8B;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x5C31;&#x65E0;&#x89C6;&#xFF0C;&#x4E5F;&#x907F;&#x514D;&#x4E86;&#x4FB5;&#x5165;&#x3002;&#x91C7;&#x7528;&#x63A5;&#x53E3;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x5982;&#x679C;&#x4F20;&#x8FDB;&#x6765;&#x7684;View&#x662F;&#x6211;&#x4EEC;&#x5BF9;&#x5E94;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x5219;&#x8BA9;&#x5176;&#x81EA;&#x5DF1;&#x5206;&#x53D1;&#x8FD9;&#x4E24;&#x4E2A;&#x4E8B;&#x4EF6;&#x51FA;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x8C03;&#x7528;&#x5BF9;&#x5E94;&#x7684;attch&#x548C;detach&#x4E8B;&#x4EF6;&#x3002;12345678public interface TemporaryDetachListener { void onSaveTemporaryDetachListener(TemporaryDetachListener listener); void onStartTemporaryDetach(View view); void onFinishTemporaryDetach(View view);}1234//&#x5982;&#x679C;view&#x662F;TemporaryDetachListener&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x5219;&#x5C06;mDraweeHolderDispatcher&#x4F20;&#x5165;&#xFF0C;&#x8BA9;View&#x6301;&#x6709;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x5BF9;&#x5E94;&#x7684;&#x65B9;&#x6CD5;&#x4E2D;&#x5916;&#x8C03;&#xFF0C;&#x5916;&#x8C03;&#x540E;&#x5728;&#x6211;&#x4EEC;&#x7684;mDraweeHolderDispatcher&#x4E2D;&#x5206;&#x53D1;&#x3002;if (targetView instanceof TemporaryDetachListener) { ((TemporaryDetachListener) targetView).onSaveTemporaryDetachListener(mDraweeHolderDispatcher);}&#x5BF9;&#x5E94;&#x7684;ImageView&#x7684;&#x5B50;&#x7C7B;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class MyImageView extends ImageView implements FrescoLoader.TemporaryDetachListener { FrescoLoader.TemporaryDetachListener listener; public MyImageView(Context context) { super(context); } public MyImageView(Context context, @Nullable AttributeSet attrs) { super(context, attrs); } public MyImageView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); } @Override public void onStartTemporaryDetach() { super.onStartTemporaryDetach(); if (this.listener != null) { listener.onStartTemporaryDetach(this); } } @Override public void onFinishTemporaryDetach() { super.onFinishTemporaryDetach(); if (this.listener != null) { listener.onFinishTemporaryDetach(this); } } @Override public void onSaveTemporaryDetachListener(FrescoLoader.TemporaryDetachListener listener) { this.listener = listener; } @Override public void onStartTemporaryDetach(View view) { //empty } @Override public void onFinishTemporaryDetach(View view) { //empty }}&#x8865;&#x5145;DraweeHolderDispatcher&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445private class DraweeHolderDispatcher implements View.OnAttachStateChangeListener, View.OnTouchListener, TemporaryDetachListener { @Override public void onViewAttachedToWindow(View v) { if (mDraweeHolder != null) { mDraweeHolder.onAttach(); } } @Override public void onViewDetachedFromWindow(View v) { if (mDraweeHolder != null) { mDraweeHolder.onDetach(); } } @Override public void onSaveTemporaryDetachListener(TemporaryDetachListener listener) { //empty } @Override public void onStartTemporaryDetach(View view) { if (mDraweeHolder != null) { mDraweeHolder.onDetach(); } } @Override public void onFinishTemporaryDetach(View view) { if (mDraweeHolder != null) { mDraweeHolder.onAttach(); } } @Override public boolean onTouch(View v, MotionEvent event) { if (mDraweeHolder != null) { if (mDraweeHolder.onTouchEvent(event)) { return true; } } return false; }}&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;onStartTemporaryDetach&#x548C;onFinishTemporaryDetach&#x5E76;&#x4E0D;&#x662F;&#x5FC5;&#x8981;&#x7684;&#xFF0C;&#x53EA;&#x6709;&#x4F60;&#x4F7F;&#x7528;&#x4E86;AbstractListView&#x5176;&#x5B50;&#x7C7B;&#xFF0C;&#x4F60;&#x6700;&#x597D;&#x5904;&#x7406;&#x4E00;&#x4E0B;&#xFF0C;&#x5176;&#x4ED6;&#x60C5;&#x51B5;&#x65E0;&#x89C6;&#x5373;&#x53EF;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x59D1;&#x4E14;&#x5C31;&#x65E0;&#x89C6;&#x4ED6;&#x4E86;&#xFF0C;&#x4E0A;&#x9762;&#x5C31;&#x5F53;&#x63D0;&#x4F9B;&#x4E00;&#x79CD;&#x5B9E;&#x73B0;&#x7684;&#x53C2;&#x8003;&#x5427;&#x3002;&#x5F53;&#x7136;&#xFF0C;&#x6700;&#x597D;&#x7684;&#x60C5;&#x51B5;&#x5C31;&#x662F;&#x5904;&#x7406;&#x4E00;&#x4E0B;&#x54AF;&#xFF0C;&#x4E5F;&#x4E0D;&#x6392;&#x9664;AbstractListView&#x5B50;&#x7C7B;&#x4E4B;&#x5916;&#x7684;&#x7C7B;&#x5B58;&#x5728;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5BFC;&#x81F4;&#x7684;&#x76F4;&#x63A5;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x5185;&#x5B58;&#x65E0;&#x6CD5;&#x53CA;&#x65F6;&#x56DE;&#x6536;&#xFF0C;&#x5360;&#x7528;&#x8FC7;&#x9AD8;.&#x6B64;&#x5916;&#xFF0C;&#x6211;&#x7684;&#x5FA1;&#x7528;&#x6316;&#x5751;&#x5C0F;&#x80FD;&#x624B;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x9ED1;&#x79D1;&#x6280;&#x7528;&#x4E8E;&#x68C0;&#x6D4B;&#x8FD9;&#x4E24;&#x4E2A;&#x4E8B;&#x4EF6;&#xFF0C;&#x8D34;&#x51FA;&#x4EE3;&#x7801;&#x4EC5;&#x4F9B;&#x53C2;&#x8003;&#x3002;&#x539F;&#x7406;&#x662F;onStartTemporaryDetach&#x7684;&#x65F6;&#x5019;view.getParent()&#x4E3A;null&#xFF0C;&#x90A3;&#x4E48;&#x53EA;&#x8981;&#x5728;View&#x7684;onPreDraw&#x4E2D;&#x8FDB;&#x884C;&#x68C0;&#x6D4B;&#xFF0C;&#x4E00;&#x76F4;&#x5F80;&#x4E0A;&#x641C;&#x7D22;rootView&#xFF0C;&#x627E;&#x5230;rootView&#x4E0E;view.getRootView()&#x4E0D;&#x4E00;&#x81F4;&#xFF0C;&#x5C31;&#x8BF4;&#x660E;getParent()&#x4E3A;null&#xFF0C;&#x4E2D;&#x95F4;&#x65AD;&#x4E86;&#x4E00;&#x5C42;&#x5173;&#x7CFB;&#x3002;&#x867D;&#x7136;&#x662F;attach&#x72B6;&#x6001;&#xFF0C;&#x4F46;&#x662F;&#x5374;&#x62FF;&#x4E0D;&#x5230;parent&#xFF0C;&#x5373;onStartTemporaryDetach&#x6216;onFinishTemporaryDetach&#xFF0C;&#x5982;&#x679C;&#x662F;&#x6B63;&#x5E38;&#x7684;attach&#x6216;&#x8005;detach&#xFF0C;&#x5219;&#x6700;&#x7EC8;&#x627E;&#x5230;&#x7684;rootView&#x662F;&#x4E00;&#x81F4;&#x7684;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788/** * &#x517C;&#x5BB9;abs listview attach/detach &#x4E0D;&#x56DE;&#x8C03;&#xFF0C;&#x56DE;&#x8C03;onStartTemporaryDetach/onFinishTemporaryDetach&#x95EE;&#x9898; * * @author lizhangqu * @version V1.0 * @since 2017-07-27 15:28 */public class ViewCompat { public static void addOnAttachStateChangeListener(View view, View.OnAttachStateChangeListener listener) { CompatAttachStateChangeListener.addOnAttachStateChangeListener(view, listener); } private static class CompatAttachStateChangeListener implements View.OnAttachStateChangeListener, ViewTreeObserver.OnPreDrawListener { private View mView; private View.OnAttachStateChangeListener mListener; private boolean myAttached; private boolean yourAttached; private static void addOnAttachStateChangeListener(View view, View.OnAttachStateChangeListener listener) { new CompatAttachStateChangeListener(view, listener); } CompatAttachStateChangeListener(View view, View.OnAttachStateChangeListener listener) { mView = view; mListener = listener; myAttached = isAttachedToWindow(mView); yourAttached = false; if (myAttached) mView.getViewTreeObserver().addOnPreDrawListener(this); mView.addOnAttachStateChangeListener(this); update(); } @Override public void onViewAttachedToWindow(View v) { if (myAttached) return; myAttached = true; mView.getViewTreeObserver().addOnPreDrawListener(this); update(); } @Override public void onViewDetachedFromWindow(View v) { if (!myAttached) return; myAttached = false; mView.getViewTreeObserver().removeOnPreDrawListener(this); update(); } @Override public boolean onPreDraw() { update(); return true; } private void update() { boolean attached = attach(); if (yourAttached != attached) { yourAttached = attached; if (yourAttached) { mListener.onViewAttachedToWindow(mView); } else { mListener.onViewDetachedFromWindow(mView); } } } private boolean attach() { if (myAttached) { View root = mView; while (true) { ViewParent parent = root.getParent(); if (!(parent instanceof View)) break; root = (View) parent; } if (root == mView.getRootView()) return true; } return false; } private boolean isAttachedToWindow(View view) { if (Build.VERSION.SDK_INT &gt;= 19) { return view.isAttachedToWindow(); } else { return view.getWindowToken() != null; } } }}&#x5C31;&#x662F;&#x5C06;onStartTemporaryDetach&#x548C;onFinishTemporaryDetach&#x4E8B;&#x4EF6;&#x7B49;&#x6548;&#x4E3A;onViewAttachedToWindow&#x4E3A;onViewDetachedFromWindow&#x4E8B;&#x4EF6;&#x5916;&#x53D1;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x65E0;&#x89C6;onStartTemporaryDetach&#x548C;onFinishTemporaryDetach&#x4E8B;&#x4EF6;&#x4E86;&#x3002;&#x6700;&#x7EC8;&#x52A0;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x63A7;&#x5236;&#x8FD9;&#x79CD;&#x517C;&#x5BB9;&#x903B;&#x8F91;&#xFF0C;&#x7B49;&#x5230;&#x9700;&#x8981;&#x5F00;&#x542F;&#x65F6;&#x4E3B;&#x52A8;&#x4F20;&#x5165;&#x53C2;&#x6570;&#x5F00;&#x542F;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;1234567891011121314151617if (mCompatTemporaryDetach) { ViewCompat.addOnAttachStateChangeListener(targetView, mDraweeHolderDispatcher);} else { //if targetView is instanceof TemporaryDetachListener, set TemporaryDetachListener //you should override onSaveTemporaryDetachListener(TemporaryDetachListener l) to holder the param TemporaryDetachListener. //also override method onStartTemporaryDetach() and onFinishTemporaryDetach() to call the holder&apos;s onStartTemporaryDetach() and onFinishTemporaryDetach() if (targetView instanceof TemporaryDetachListener) { ((TemporaryDetachListener) targetView).onSaveTemporaryDetachListener(mDraweeHolderDispatcher); } //if is already attached, call method onViewAttachedToWindow. if (isAttachedToWindow(targetView)) { mDraweeHolderDispatcher.onViewAttachedToWindow(targetView); } //add attach state change listener targetView.addOnAttachStateChangeListener(mDraweeHolderDispatcher);}targetView.setOnTouchListener(mDraweeHolderDispatcher);&#x63A5;&#x7740;&#x5C31;&#x53EF;&#x4EE5;&#x6109;&#x5FEB;&#x7684;&#x4F7F;&#x7528;&#x4E86;&#x3002;&#x5BF9;mDraweeHolder&#x8BBE;&#x7F6E;&#x4E86;&#x5404;&#x79CD;&#x53C2;&#x6570;&#x540E;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x5BF9;&#x5E94;&#x7684;getTopLevelDrawable&#x65B9;&#x6CD5;&#xFF0C;&#x8FD4;&#x56DE;Drawable&#x5BF9;&#x8C61;&#xFF0C;&#x5C06;&#x5176;&#x8BBE;&#x7F6E;&#x5230;ImageView&#x4E0A;&#x3002;12//set image drawabletargetView.setImageDrawable(mDraweeHolder.getTopLevelDrawable());&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5982;&#x4F55;&#x4FDD;&#x8BC1;DraweeHolder&#x5BF9;&#x8C61;&#x53EA;&#x521B;&#x5EFA;&#x4E00;&#x904D;&#xFF0C;&#x5E76;&#x4E14;&#x4FDD;&#x8BC1;addOnAttachStateChangeListener&#x53EA;&#x4F1A;&#x8C03;&#x7528;&#x4E00;&#x6B21;&#xFF0C;&#x5B9E;&#x5728;&#x662F;&#x592A;&#x96BE;&#x4E86;&#xFF0C;&#x5FC5;&#x987B;&#x727A;&#x7272;&#x4E00;&#x4E0B;&#xFF0C;&#x4E0D;&#x7136;&#x4E0D;&#x4F18;&#x96C5;&#xFF0C;&#x6CE8;&#x610F;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x5FC5;&#x987B;&#x727A;&#x7272;&#x6389;View&#x7684;tag&#x76F8;&#x5173;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x7684;ImageView&#x7528;&#x4E86;Tag&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x7684;Tag&#x4F1A;&#x88AB;&#x6211;&#x4EEC;&#x8986;&#x76D6;&#xFF0C;&#x8BF7;&#x8F6C;&#x79FB;&#x4F60;&#x7684;Tag&#x76F8;&#x5173;&#x529F;&#x80FD;&#xFF0C;&#x4F7F;&#x7528;&#x5176;&#x4ED6;&#x65B9;&#x5F0F;&#x3002;&#x56E0;&#x4E3A;&#x4E3A;&#x4E86;&#x8BA9;View&#x6301;&#x6709;DraweeHolder&#x5BF9;&#x8C61;&#xFF0C;&#x907F;&#x514D;&#x91CD;&#x590D;&#x521B;&#x5EFA;&#xFF0C;&#x53EA;&#x80FD;&#x8FD9;&#x4E48;&#x505A;&#x4E86;&#xFF0C;&#x5148;&#x4ECE;Tag&#x4E2D;&#x53D6;DraweeHolder&#xFF0C;&#x5982;&#x679C;&#x53D6;&#x4E0D;&#x5230;&#xFF0C;&#x5219;&#x521B;&#x5EFA;&#xFF0C;&#x5426;&#x5219;&#xFF0C;&#x590D;&#x7528;&#x73B0;&#x6709;&#x7684;DraweeHolder&#x5BF9;&#x8C61;&#x3002;12345678910111213141516//we should use tagif (mDraweeHolder == null) { Object tag = targetView.getTag(); if (tag instanceof DraweeHolder) { mDraweeHolder = (DraweeHolder&lt;DraweeHierarchy&gt;) tag; }}if (mDraweeHolder == null) mDraweeHolder = DraweeHolder.create(null, targetView.getContext()); if (mDraweeHolderDispatcher == null) { mDraweeHolderDispatcher = new DraweeHolderDispatcher(); } targetView.setTag(mDraweeHolder);} else { //reuse}&#x8FD9;&#x4E9B;&#x4E8B;&#x60C5;&#x641E;&#x5B9A;&#x4E86;&#x5C31;&#x662F;&#x53C2;&#x6570;&#x4F20;&#x9012;&#x7684;&#x4E8B;&#x60C5;&#x4E86;&#xFF0C;&#x5C06;Fresco&#x9700;&#x8981;&#x7684;&#x53C2;&#x6570;&#x5C01;&#x88C5;&#x6210;&#x94FE;&#x5F0F;&#x63A5;&#x53E3;&#x8C03;&#x7528;&#x5BF9;&#x5E94;&#x7684;Fresco&#x65B9;&#x6CD5;&#x8BBE;&#x7F6E;&#x5373;&#x53EF;&#xFF0C;&#x5176;&#x5B8C;&#x6574;&#x5B9E;&#x73B0;&#x6211;&#x5DF2;&#x7ECF;push&#x5230;github&#x4E0A;&#xFF0C;&#x4F20;&#x9001;&#x95E8;FrescoLoader.java&#x8FD9;&#x91CC;&#x4E5F;&#x8D34;&#x4E00;&#x4E0B;&#x5B9E;&#x73B0;&#xFF0C;&#x65B9;&#x4FBF;&#x67E5;&#x770B;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826//Copyright 2017 &#x533A;&#x957F;. All rights reserved.////Redistribution and use in source and binary forms, with or without//modification, are permitted provided that the following conditions are//met:////* Redistributions of source code must retain the above copyright//notice, this list of conditions and the following disclaimer.//* Redistributions in binary form must reproduce the above//copyright notice, this list of conditions and the following disclaimer//in the documentation and/or other materials provided with the//distribution.//* Neither the name of Google Inc. nor the names of its//contributors may be used to endorse or promote products derived from//this software without specific prior written permission.////THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS//&quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT//LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR//A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT//OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,//SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT//LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,//DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY//THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE//OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.package io.github.lizhangqu.fresco;import android.content.Context;import android.graphics.ColorFilter;import android.graphics.Point;import android.graphics.PointF;import android.graphics.drawable.Drawable;import android.graphics.drawable.StateListDrawable;import android.net.Uri;import android.os.Build;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import com.facebook.common.util.UriUtil;import com.facebook.drawee.backends.pipeline.Fresco;import com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder;import com.facebook.drawee.controller.ControllerListener;import com.facebook.drawee.drawable.ScalingUtils;import com.facebook.drawee.generic.GenericDraweeHierarchy;import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder;import com.facebook.drawee.generic.RoundingParams;import com.facebook.drawee.interfaces.DraweeController;import com.facebook.drawee.interfaces.DraweeHierarchy;import com.facebook.drawee.view.DraweeHolder;import com.facebook.imagepipeline.common.ResizeOptions;import com.facebook.imagepipeline.request.ImageRequest;import com.facebook.imagepipeline.request.ImageRequestBuilder;import com.facebook.imagepipeline.request.Postprocessor;import java.io.File;import java.util.Collections;import java.util.List;/** * fresco&#x56FE;&#x7247;&#x52A0;&#x8F7D;&#x5668;, https://www.fresco-cn.org/docs/ * see: https://www.fresco-cn.org/docs/writing-custom-views.html * if you use this FrescoLoader, please make sure you have not use the ImageView&apos;s tag * * @author lizhangqu * @version V1.0 * @since 2017-07-26 13:16 */public class FrescoLoader { private Context mContext; private boolean mCompatTemporaryDetach; private DraweeHolderDispatcher mDraweeHolderDispatcher; private DraweeHolder&lt;DraweeHierarchy&gt; mDraweeHolder; private Postprocessor mPostprocessor; private ControllerListener mControllerListener; private Uri mUri; private Uri mLowerUri; private ResizeOptions mResizeOptions; private float mDesiredAspectRatio; private boolean mUseFixedWidth; private boolean mAutoRotateEnabled = false; private int mFadeDuration; private Drawable mPlaceholderDrawable; private Drawable mRetryDrawable; private Drawable mFailureDrawable; private Drawable mProgressBarDrawable; private Drawable mBackgroundDrawable; /** * &#x7F29;&#x653E;&#x65B9;&#x5F0F; * * @param scaleType &#x652F;&#x6301;&#x4EE5;&#x4E0B;&#x7C7B;&#x578B;&#x53C2;&#x6570; * center &#x5C45;&#x4E2D;&#x65E0;&#x7F29;&#x653E; * centerCrop &#x4FDD;&#x6301;&#x5BBD;&#x9AD8;&#x6BD4;&#x7F29;&#x5C0F;&#x6216;&#x653E;&#x5927;&#xFF0C;&#x4F7F;&#x5F97;&#x4E24;&#x8FB9;&#x90FD;&#x5927;&#x4E8E;&#x6216;&#x7B49;&#x4E8E;&#x663E;&#x793A;&#x8FB9;&#x754C;&#x3002;&#x5C45;&#x4E2D;&#x663E;&#x793A; * focusCrop &#x540C;centerCrop, &#x4F46;&#x5C45;&#x4E2D;&#x70B9;&#x4E0D;&#x662F;&#x4E2D;&#x70B9;&#xFF0C;&#x800C;&#x662F;&#x6307;&#x5B9A;&#x7684;&#x67D0;&#x4E2A;&#x70B9; * centerInside &#x4F7F;&#x4E24;&#x8FB9;&#x90FD;&#x5728;&#x663E;&#x793A;&#x8FB9;&#x754C;&#x5185;&#xFF0C;&#x5C45;&#x4E2D;&#x663E;&#x793A;&#x3002;&#x5982;&#x679C;&#x56FE;&#x5C3A;&#x5BF8;&#x5927;&#x4E8E;&#x663E;&#x793A;&#x8FB9;&#x754C;&#xFF0C;&#x5219;&#x4FDD;&#x6301;&#x957F;&#x5BBD;&#x6BD4;&#x7F29;&#x5C0F;&#x56FE;&#x7247;&#x3002; * fitCenter &#x4FDD;&#x6301;&#x5BBD;&#x9AD8;&#x6BD4;&#xFF0C;&#x7F29;&#x5C0F;&#x6216;&#x8005;&#x653E;&#x5927;&#xFF0C;&#x4F7F;&#x5F97;&#x56FE;&#x7247;&#x5B8C;&#x5168;&#x663E;&#x793A;&#x5728;&#x663E;&#x793A;&#x8FB9;&#x754C;&#x5185;&#x3002;&#x5C45;&#x4E2D;&#x663E;&#x793A; * fitStart &#x540C;&#x4E0A;&#x3002;&#x4F46;&#x4E0D;&#x5C45;&#x4E2D;&#xFF0C;&#x548C;&#x663E;&#x793A;&#x8FB9;&#x754C;&#x5DE6;&#x4E0A;&#x5BF9;&#x9F50; * fitEnd &#x540C;fitCenter&#xFF0C; &#x4F46;&#x4E0D;&#x5C45;&#x4E2D;&#xFF0C;&#x548C;&#x663E;&#x793A;&#x8FB9;&#x754C;&#x53F3;&#x4E0B;&#x5BF9;&#x9F50; * fitXY &#x4E0D;&#x4FDD;&#x5B58;&#x5BBD;&#x9AD8;&#x6BD4;&#xFF0C;&#x586B;&#x5145;&#x6EE1;&#x663E;&#x793A;&#x8FB9;&#x754C; * none &#x5982;&#x8981;&#x4F7F;&#x7528;tile mode&#x663E;&#x793A;, &#x9700;&#x8981;&#x8BBE;&#x7F6E;&#x4E3A;none */ private ScalingUtils.ScaleType mPlaceholderScaleType; private ScalingUtils.ScaleType mRetryScaleType; private ScalingUtils.ScaleType mFailureScaleType; private ScalingUtils.ScaleType mProgressScaleType; private ScalingUtils.ScaleType mActualImageScaleType; private PointF mActualImageFocusPoint; private ColorFilter mActualImageColorFilter; private RoundingParams mRoundingParams; private List&lt;Drawable&gt; mOverlays; private Drawable mPressedStateOverlay; private boolean mTapToRetryEnabled; private boolean mAutoPlayAnimations; private boolean mRetainImageOnFailure; private boolean mProgressiveRenderingEnabled; private boolean mLocalThumbnailPreviewsEnabled; private FrescoLoader(Context context) { this.mContext = context.getApplicationContext(); this.mDraweeHolderDispatcher = null; this.mDesiredAspectRatio = 0; this.mUseFixedWidth = true; this.mFadeDuration = GenericDraweeHierarchyBuilder.DEFAULT_FADE_DURATION; this.mPlaceholderDrawable = null; this.mPlaceholderScaleType = GenericDraweeHierarchyBuilder.DEFAULT_SCALE_TYPE; this.mRetryDrawable = null; this.mRetryScaleType = GenericDraweeHierarchyBuilder.DEFAULT_SCALE_TYPE; this.mFailureDrawable = null; this.mFailureScaleType = GenericDraweeHierarchyBuilder.DEFAULT_SCALE_TYPE; this.mProgressBarDrawable = null; this.mProgressScaleType = GenericDraweeHierarchyBuilder.DEFAULT_SCALE_TYPE; this.mActualImageScaleType = GenericDraweeHierarchyBuilder.DEFAULT_ACTUAL_IMAGE_SCALE_TYPE; this.mActualImageFocusPoint = null; this.mActualImageColorFilter = null; this.mBackgroundDrawable = null; this.mOverlays = null; this.mPressedStateOverlay = null; this.mRoundingParams = null; this.mTapToRetryEnabled = false; this.mAutoPlayAnimations = false; this.mRetainImageOnFailure = false; this.mProgressiveRenderingEnabled = false; this.mLocalThumbnailPreviewsEnabled = false; this.mPostprocessor = null; this.mControllerListener = null; this.mDraweeHolder = null; } public boolean hasHierarchy() { if (mDraweeHolder != null) { return mDraweeHolder.hasHierarchy(); } return false; } public DraweeHierarchy getHierarchy() { if (mDraweeHolder != null) { return mDraweeHolder.getHierarchy(); } return null; } public DraweeController getController() { if (mDraweeHolder != null) { return mDraweeHolder.getController(); } return null; } public boolean hasController() { if (mDraweeHolder != null) { return mDraweeHolder.getController() != null; } return false; } //****************context start******************* public static FrescoLoader with(Context context) { if (context == null) { throw new IllegalArgumentException(&quot;context == null&quot;); } return new FrescoLoader(context); } //****************context start******************* //****************load start******************* public FrescoLoader load(Uri uri) { this.mUri = uri; return this; } public FrescoLoader load(String uri) { return load(Uri.parse(uri)); } public FrescoLoader load(File file) { return load(Uri.fromFile(file)); } public FrescoLoader load(int resourceId) { return load( new Uri.Builder() .scheme(UriUtil.LOCAL_RESOURCE_SCHEME) .path(String.valueOf(resourceId)) .build() ); } //****************load end******************* //**************lowerLoad start************** public FrescoLoader lowerLoad(Uri uri) { this.mLowerUri = uri; return this; } public FrescoLoader lowerLoad(String uri) { return lowerLoad(Uri.parse(uri)); } public FrescoLoader lowerLoad(File file) { return lowerLoad(Uri.fromFile(file)); } public FrescoLoader lowerLoad(int resourceId) { return lowerLoad( new Uri.Builder() .scheme(UriUtil.LOCAL_RESOURCE_SCHEME) .path(String.valueOf(resourceId)) .build() ); } //**************lowerLoad end**************** //**************drawable and scaleType start**************** public FrescoLoader placeholder(Drawable placeholderDrawable) { this.mPlaceholderDrawable = placeholderDrawable; return this; } public FrescoLoader placeholder(int placeholderResId) { return placeholder(mContext.getResources().getDrawable(placeholderResId)); } public FrescoLoader placeholderScaleType(ImageView.ScaleType scaleType) { this.mPlaceholderScaleType = convertToFrescoScaleType(scaleType, GenericDraweeHierarchyBuilder.DEFAULT_SCALE_TYPE); return this; } public FrescoLoader retry(Drawable retryDrawable) { this.mRetryDrawable = retryDrawable; return this; } public FrescoLoader retry(int retryResId) { return retry(mContext.getResources().getDrawable(retryResId)); } public FrescoLoader retryScaleType(ImageView.ScaleType scaleType) { this.mRetryScaleType = convertToFrescoScaleType(scaleType, GenericDraweeHierarchyBuilder.DEFAULT_SCALE_TYPE); return this; } public FrescoLoader failure(Drawable failureDrawable) { this.mFailureDrawable = failureDrawable; return this; } public FrescoLoader failure(int failureResId) { return failure(mContext.getResources().getDrawable(failureResId)); } public FrescoLoader failureScaleType(ImageView.ScaleType scaleType) { this.mFailureScaleType = convertToFrescoScaleType(scaleType, GenericDraweeHierarchyBuilder.DEFAULT_SCALE_TYPE); return this; } public FrescoLoader progressBar(Drawable placeholderDrawable) { this.mProgressBarDrawable = placeholderDrawable; return this; } public FrescoLoader progressBar(int progressResId) { return progressBar(mContext.getResources().getDrawable(progressResId)); } public FrescoLoader progressBarScaleType(ImageView.ScaleType scaleType) { this.mPlaceholderScaleType = convertToFrescoScaleType(scaleType, GenericDraweeHierarchyBuilder.DEFAULT_SCALE_TYPE); return this; } public FrescoLoader backgroundDrawable(Drawable backgroundDrawable) { this.mBackgroundDrawable = backgroundDrawable; return this; } public FrescoLoader backgroundDrawable(int backgroundResId) { return backgroundDrawable(mContext.getResources().getDrawable(backgroundResId)); } public FrescoLoader actualScaleType(ImageView.ScaleType scaleType) { this.mActualImageScaleType = convertToFrescoScaleType(scaleType, GenericDraweeHierarchyBuilder.DEFAULT_ACTUAL_IMAGE_SCALE_TYPE); return this; } public FrescoLoader focusPoint(PointF focusPoint) { this.mActualImageFocusPoint = focusPoint; return this; } //**************drawable and scaleType end**************** //**************overlays start**************** public FrescoLoader overlays(List&lt;Drawable&gt; overlays) { this.mOverlays = overlays; return this; } public FrescoLoader overlay(Drawable overlay) { return overlays(overlay == null ? null : Collections.singletonList(overlay)); } public FrescoLoader overlay(int resId) { return overlay(mContext.getResources().getDrawable(resId)); } public FrescoLoader pressedStateOverlay(Drawable drawable) { if (drawable == null) { this.mPressedStateOverlay = null; } else { StateListDrawable stateListDrawable = new StateListDrawable(); stateListDrawable.addState(new int[]{android.R.attr.state_pressed}, drawable); this.mPressedStateOverlay = stateListDrawable; } return this; } public FrescoLoader pressedStateOverlay(int resId) { return pressedStateOverlay(mContext.getResources().getDrawable(resId)); } //**************overlays end**************** //**************colorFilter start**************** public FrescoLoader colorFilter(ColorFilter colorFilter) { this.mActualImageColorFilter = colorFilter; return this; } //**************colorFilter end**************** //***************RoundingParams start**************** public FrescoLoader cornersRadius(int radius) { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setCornersRadius(radius); return this; } public FrescoLoader border(int borderColor, float borderWidth) { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setBorder(borderColor, borderWidth); return this; } public FrescoLoader borderColor(int borderColor) { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setBorderColor(borderColor); return this; } public FrescoLoader borderWidth(float borderWidth) { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setBorderWidth(borderWidth); return this; } public FrescoLoader roundAsCircle() { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setRoundAsCircle(true); return this; } public FrescoLoader cornersRadii(float topLeft, float topRight, float bottomRight, float bottomLeft) { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setCornersRadii(topLeft, topRight, bottomRight, bottomLeft); return this; } public FrescoLoader cornersRadii(float[] radii) { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setCornersRadii(radii); return this; } public FrescoLoader overlayColor(int overlayColor) { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setOverlayColor(overlayColor); return this; } public FrescoLoader padding(float padding) { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setPadding(padding); return this; } public FrescoLoader roundingMethodWithOverlayColor() { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setRoundingMethod(RoundingParams.RoundingMethod.OVERLAY_COLOR); return this; } public FrescoLoader roundingMethodWithBitmapOnly() { if (this.mRoundingParams == null) { this.mRoundingParams = new RoundingParams(); } this.mRoundingParams.setRoundingMethod(RoundingParams.RoundingMethod.BITMAP_ONLY); return this; } //***************RoundingParams end**************** //***************resize start**************** public FrescoLoader resize(Point point) { this.mResizeOptions = new ResizeOptions(point.x, point.y); return this; } public FrescoLoader resize(int targetWidth, int targetHeight) { this.mResizeOptions = new ResizeOptions(targetWidth, targetHeight); return this; } //***************resize end**************** //***************fadeDuration start**************** public FrescoLoader fadeDuration(int fadeDuration) { this.mFadeDuration = fadeDuration; return this; } //***************fadeDuration end**************** //***************desiredAspectRatio start**************** public FrescoLoader desiredAspectRatioWithWidth(float desiredAspectRatio) { this.mUseFixedWidth = true; this.mDesiredAspectRatio = desiredAspectRatio; return this; } public FrescoLoader desiredAspectRatioWithHeight(float desiredAspectRatio) { this.mUseFixedWidth = false; this.mDesiredAspectRatio = desiredAspectRatio; return this; } //***************desiredAspectRatio end**************** //***************boolean start**************** public FrescoLoader autoRotateEnabled(boolean enabled) { this.mAutoRotateEnabled = enabled; return this; } public FrescoLoader autoPlayAnimations(boolean enabled) { this.mAutoPlayAnimations = enabled; return this; } public FrescoLoader retainImageOnFailure(boolean enabled) { this.mRetainImageOnFailure = enabled; return this; } public FrescoLoader progressiveRenderingEnabled(boolean enabled) { this.mProgressiveRenderingEnabled = enabled; return this; } public FrescoLoader localThumbnailPreviewsEnabled(boolean enabled) { this.mLocalThumbnailPreviewsEnabled = enabled; return this; } public FrescoLoader tapToRetryEnabled(boolean tapToRetryEnabled) { this.mTapToRetryEnabled = tapToRetryEnabled; return this; } //***************boolean end**************** //use fresco class method //you&apos;d better not use @Deprecated public FrescoLoader postProcessor(Postprocessor postProcessor) { this.mPostprocessor = postProcessor; return this; } //you&apos;d better not use @Deprecated public FrescoLoader controllerListener(ControllerListener controllerListener) { this.mControllerListener = controllerListener; return this; } /** * &#x517C;&#x5BB9;listview&#x7684;onStartTemporaryDetach&#x548C;onFinishTemporaryDetach * * @param compatTemporaryDetach * @return */ public FrescoLoader compatTemporaryDetach(boolean compatTemporaryDetach) { this.mCompatTemporaryDetach = compatTemporaryDetach; return this; } //load into an ImageView public void into(ImageView targetView) { if (targetView == null) { return; } if (mUri == null) { return; } //we should use tag if (mDraweeHolder == null) { Object tag = targetView.getTag(); if (tag instanceof DraweeHolder) { mDraweeHolder = (DraweeHolder&lt;DraweeHierarchy&gt;) tag; } } if (mDraweeHolder == null) { mDraweeHolder = DraweeHolder.create(null, targetView.getContext()); if (mDraweeHolderDispatcher == null) { mDraweeHolderDispatcher = new DraweeHolderDispatcher(); } GenericDraweeHierarchy hierarchy = new GenericDraweeHierarchyBuilder(targetView.getResources()) .setPlaceholderImage(mPlaceholderDrawable) .setPlaceholderImageScaleType(mPlaceholderScaleType) .setFailureImage(mFailureDrawable) .setFailureImageScaleType(mFailureScaleType) .setProgressBarImage(mProgressBarDrawable) .setProgressBarImageScaleType(mProgressScaleType) .setRetryImage(mRetryDrawable) .setRetryImageScaleType(mRetryScaleType) .setFadeDuration(mFadeDuration) .setActualImageFocusPoint(mActualImageFocusPoint) .setActualImageColorFilter(mActualImageColorFilter) .setActualImageScaleType(mActualImageScaleType) .setBackground(mBackgroundDrawable) .setOverlays(mOverlays) .setPressedStateOverlay(mPressedStateOverlay) .setRoundingParams(mRoundingParams) .build(); //set hierarchy mDraweeHolder.setHierarchy(hierarchy); //image request ImageRequest request = ImageRequestBuilder.newBuilderWithSource(mUri) .setAutoRotateEnabled(mAutoRotateEnabled) .setLocalThumbnailPreviewsEnabled(mLocalThumbnailPreviewsEnabled) .setPostprocessor(mPostprocessor) .setProgressiveRenderingEnabled(mProgressiveRenderingEnabled) .setResizeOptions(mResizeOptions) .build(); //controller PipelineDraweeControllerBuilder controllerBuilder = Fresco.newDraweeControllerBuilder() .setAutoPlayAnimations(mAutoPlayAnimations) .setControllerListener(mControllerListener) .setImageRequest(request) .setOldController(mDraweeHolder.getController()) .setRetainImageOnFailure(mRetainImageOnFailure) .setTapToRetryEnabled(mTapToRetryEnabled); //if set the mLowerUri, then pass this param if (mLowerUri != null) { controllerBuilder.setLowResImageRequest(ImageRequest.fromUri(mLowerUri)); } //build controller DraweeController draweeController = controllerBuilder.build(); //set controller mDraweeHolder.setController(draweeController); if (mCompatTemporaryDetach) { ViewCompat.addOnAttachStateChangeListener(targetView, mDraweeHolderDispatcher); } else { //if targetView is instanceof TemporaryDetachListener, set TemporaryDetachListener //you should override onSaveTemporaryDetachListener(TemporaryDetachListener l) to holder the param TemporaryDetachListener. //also override method onStartTemporaryDetach() and onFinishTemporaryDetach() to call the holder&apos;s onStartTemporaryDetach() and onFinishTemporaryDetach() if (targetView instanceof TemporaryDetachListener) { ((TemporaryDetachListener) targetView).onSaveTemporaryDetachListener(mDraweeHolderDispatcher); } //if is already attached, call method onViewAttachedToWindow. if (isAttachedToWindow(targetView)) { mDraweeHolderDispatcher.onViewAttachedToWindow(targetView); } //add attach state change listener targetView.addOnAttachStateChangeListener(mDraweeHolderDispatcher); } targetView.setOnTouchListener(mDraweeHolderDispatcher); targetView.setTag(mDraweeHolder); } else { GenericDraweeHierarchy hierarchy = new GenericDraweeHierarchyBuilder(targetView.getResources()) .setPlaceholderImage(mPlaceholderDrawable) .setPlaceholderImageScaleType(mPlaceholderScaleType) .setFailureImage(mFailureDrawable) .setFailureImageScaleType(mFailureScaleType) .setProgressBarImage(mProgressBarDrawable) .setProgressBarImageScaleType(mProgressScaleType) .setRetryImage(mRetryDrawable) .setRetryImageScaleType(mRetryScaleType) .setFadeDuration(mFadeDuration) .setActualImageFocusPoint(mActualImageFocusPoint) .setActualImageColorFilter(mActualImageColorFilter) .setActualImageScaleType(mActualImageScaleType) .setBackground(mBackgroundDrawable) .setOverlays(mOverlays) .setPressedStateOverlay(mPressedStateOverlay) .setRoundingParams(mRoundingParams) .build(); //set hierarchy mDraweeHolder.setHierarchy(hierarchy); //image request ImageRequest request = ImageRequestBuilder.newBuilderWithSource(mUri) .setAutoRotateEnabled(mAutoRotateEnabled) .setLocalThumbnailPreviewsEnabled(mLocalThumbnailPreviewsEnabled) .setPostprocessor(mPostprocessor) .setProgressiveRenderingEnabled(mProgressiveRenderingEnabled) .setResizeOptions(mResizeOptions) .build(); //controller PipelineDraweeControllerBuilder controllerBuilder = Fresco.newDraweeControllerBuilder() .setAutoPlayAnimations(mAutoPlayAnimations) .setControllerListener(mControllerListener) .setImageRequest(request) .setOldController(mDraweeHolder.getController()) .setRetainImageOnFailure(mRetainImageOnFailure) .setTapToRetryEnabled(mTapToRetryEnabled); //if set the mLowerUri, then pass this param if (mLowerUri != null) { controllerBuilder.setLowResImageRequest(ImageRequest.fromUri(mLowerUri)); } //build controller DraweeController draweeController = controllerBuilder.build(); //set controller mDraweeHolder.setController(draweeController); } //compat for desiredAspectRatio if (mDesiredAspectRatio != 0) { ViewGroup.LayoutParams layoutParams = targetView.getLayoutParams(); if (layoutParams != null) { int width = layoutParams.width; int height = layoutParams.height; int newWidth = -1; int newHeight = -1; //mDesiredAspectRatio= width/height; if (mUseFixedWidth) { //with must &gt; 0 &amp; height=0 if (width &gt; 0 &amp;&amp; height == 0) { newWidth = width; newHeight = (int) (width * 1.0 / mDesiredAspectRatio + 0.5); } } else { //height must &gt; 0 &amp; width=0 if (height &gt; 0 &amp;&amp; width == 0) { newHeight = height; newWidth = (int) (height * mDesiredAspectRatio + 0.5); } } if (newWidth != -1 &amp;&amp; newHeight != -1) { layoutParams.width = newWidth; layoutParams.height = newHeight; targetView.requestLayout(); } } } //set image drawable targetView.setImageDrawable(mDraweeHolder.getTopLevelDrawable()); } private static boolean isAttachedToWindow(View view) { if (Build.VERSION.SDK_INT &gt;= 19) { return view.isAttachedToWindow(); } else { return view.getWindowToken() != null; } } private static ScalingUtils.ScaleType convertToFrescoScaleType(ImageView.ScaleType scaleType, ScalingUtils.ScaleType defaultScaleType) { switch (scaleType) { case CENTER: return ScalingUtils.ScaleType.CENTER; case CENTER_CROP: return ScalingUtils.ScaleType.CENTER_CROP; case CENTER_INSIDE: return ScalingUtils.ScaleType.CENTER_INSIDE; case FIT_CENTER: return ScalingUtils.ScaleType.FIT_CENTER; case FIT_START: return ScalingUtils.ScaleType.FIT_START; case FIT_END: return ScalingUtils.ScaleType.FIT_END; case FIT_XY: return ScalingUtils.ScaleType.FIT_XY; case MATRIX: //NOTE this case //you should set FocusPoint to make sentence return ScalingUtils.ScaleType.FOCUS_CROP; default: return defaultScaleType; } } //if needed, let&apos;s your image view implement this interface //also it&apos;s not must be required to implement this interface public interface TemporaryDetachListener { void onSaveTemporaryDetachListener(TemporaryDetachListener listener); void onStartTemporaryDetach(View view); void onFinishTemporaryDetach(View view); } //DraweeHolder event dispatch private class DraweeHolderDispatcher implements View.OnAttachStateChangeListener, View.OnTouchListener, TemporaryDetachListener { @Override public void onViewAttachedToWindow(View v) { if (mDraweeHolder != null) { mDraweeHolder.onAttach(); } } @Override public void onViewDetachedFromWindow(View v) { if (mDraweeHolder != null) { mDraweeHolder.onDetach(); } } @Override public void onSaveTemporaryDetachListener(TemporaryDetachListener listener) { //empty } @Override public void onStartTemporaryDetach(View view) { if (mDraweeHolder != null) { mDraweeHolder.onDetach(); } } @Override public void onFinishTemporaryDetach(View view) { if (mDraweeHolder != null) { mDraweeHolder.onAttach(); } } @Override public boolean onTouch(View v, MotionEvent event) { if (mDraweeHolder != null) { if (mDraweeHolder.onTouchEvent(event)) { return true; } } return false; } }}&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5751;&#x5F53;&#x4F60;&#x770B;&#x5230;&#x8FD9;&#x91CC;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5176;&#x5B9E;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x5751;&#xFF0C;&#x5C31;&#x662F;&#x867D;&#x7136;DraweeHolder&#x4E00;&#x4E2A;View&#x53EA;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#xFF0C;&#x4F46;&#x662F;GenericDraweeHierarchy&#xFF0C;ImageRequest&#xFF0C;PipelineDraweeControllerBuilder&#x7B49;&#x5BF9;&#x8C61;&#x8FD8;&#x662F;&#x591A;&#x6B21;&#x521B;&#x5EFA;&#x4E86;&#xFF0C;&#x5176;&#x5B9E;&#x8FD9;&#x4E9B;&#x4E5F;&#x662F;&#x53EF;&#x4EE5;&#x590D;&#x7528;&#x7684;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x59D1;&#x4E14;&#x5148;&#x4E0D;&#x590D;&#x7528;&#x4E86;&#x603B;&#x7ED3;&#x727A;&#x7272;&#x4E86;View&#x7684;Tag&#x76F8;&#x5173;&#x529F;&#x80FD;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x7528;&#x4E86;&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x5176;&#x4ED6;&#x65B9;&#x5F0F;&#x5B9E;&#x73B0;&#x4F60;&#x7684;Tag&#x76F8;&#x5173;&#x529F;&#x80FD;&#xFF08;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4F7F;&#x7528;Tag&#xFF0C;&#x90A3;&#x66F4;&#x597D;&#x4E86;&#xFF09;&#x727A;&#x7272;&#x4E86;View&#x7684;OnTouchListener&#x4E8B;&#x4EF6;&#xFF08;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4F7F;&#x7528;OnTouchListener&#xFF0C;&#x90A3;&#x66F4;&#x597D;&#x4E86;&#xFF09;GenericDraweeHierarchy&#xFF0C;ImageRequest&#xFF0C;PipelineDraweeControllerBuilder&#x7B49;&#x5BF9;&#x8C61;&#x7684;&#x591A;&#x6B21;&#x521B;&#x5EFA;&#x95EE;&#x9898;&#xFF08;&#x53EF;&#x7EE7;&#x7EED;&#x4F18;&#x5316;&#x4EE3;&#x7801;&#xFF0C;&#x53EA;&#x521B;&#x5EFA;&#x4E00;&#x6B21;&#xFF0C;&#x53CD;&#x6B63;&#x6211;&#x662F;&#x61D2;&#x5F97;&#x4F18;&#x5316;&#x4E86;&#xFF09;onStartTemporaryDetach&#x548C;onFinishTemporaryDetach&#x4E8B;&#x4EF6;&#x5916;&#x53D1;&#x7684;&#x63A5;&#x53E3;&#x4FB5;&#x5165;&#x6027;&#xFF08;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4F7F;&#x7528;AbstractListView&#x5176;&#x5B50;&#x7C7B;&#x5219;&#x53EF;&#x4E0D;&#x5B9E;&#x73B0;&#xFF0C;&#x5426;&#x5219;&#x6700;&#x597D;&#x5C06;item&#x4E2D;&#x4F7F;&#x7528;&#x5230;&#x7684;ImageView&#x5B9E;&#x73B0;TemporaryDetachListener&#x63A5;&#x53E3;&#xFF0C;&#x8FD9;&#x4E0D;&#x5F97;&#x4E0D;&#x52A0;&#x5165;&#x4E00;&#x5C42;&#x63A5;&#x53E3;&#x5B9E;&#x73B0;&#x5173;&#x7CFB;&#xFF09;&#xFF0C;&#x53EF;&#x4F7F;&#x7528;mCompatTemporaryDetach&#x53C2;&#x6570;&#x4E3B;&#x52A8;&#x5F00;&#x542F;&#x9ED1;&#x79D1;&#x6280;&#xFF0C;&#x8FD9;&#x6837;&#x4E5F;&#x5C31;&#x4E0D;&#x7528;&#x4FB5;&#x5165;&#x4E86;&#x5982;&#x679C;&#x4F60;&#x63A5;&#x53D7;&#x5F97;&#x4E86;&#x4EE5;&#x4E0A;&#x51E0;&#x70B9;&#x95EE;&#x9898;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x653E;&#x5FC3;&#x4F7F;&#x7528;&#x5427;&#xFF0C;&#x5426;&#x5219;&#xFF0C;&#x8FD8;&#x662F;&#x8001;&#x8001;&#x5B9E;&#x5B9E;&#x7684;&#x7528;&#x6700;&#x5F00;&#x5934;&#x63D0;&#x5230;&#x7684;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#x5F0F;&#x53BB;&#x5B9E;&#x73B0;&#x3002;&#x4E0D;&#x8FC7;&#x8FD9;&#x5BF9;&#x4E8E;&#x5B9E;&#x73B0;&#x77E5;&#x4E4E;&#x56FE;&#x7247;&#x9009;&#x62E9;&#x5668;&#x7684;FrescoEngine&#x5DF2;&#x7ECF;&#x7EF0;&#x7EF0;&#x6709;&#x4F59;&#x4E86;&#x3002;&#x6700;&#x540E;&#x4F7F;&#x7528;FrescoLoader12345678910111213141516171819202122232425262728293031323334FrescoLoader.with(view.getContext()) .progressiveRenderingEnabled(true) .fadeDuration(2000) .autoPlayAnimations(true) .autoRotateEnabled(true) .retainImageOnFailure(true) .desiredAspectRatioWithHeight(0.5F) .tapToRetryEnabled(true) .focusPoint(new PointF(30, 50)) .resize(400, 400) .fadeDuration(1000) .border(Color.RED, 10) .borderColor(Color.RED) .borderWidth(10) .cornersRadii(10, 10, 10, 10) .cornersRadius(10) .roundAsCircle() .backgroundDrawable(ContextCompat.getDrawable(getApplicationContext(), R.mipmap.bg_zero)) .progressBar(ContextCompat.getDrawable(getApplicationContext(), R.mipmap.icon_progress_bar)) .progressBarScaleType(ImageView.ScaleType.CENTER_CROP) .placeholder(ContextCompat.getDrawable(getApplicationContext(), R.mipmap.icon_placeholder)) .placeholderScaleType(ImageView.ScaleType.CENTER_CROP) .failure(ContextCompat.getDrawable(getApplicationContext(), R.mipmap.icon_failure)) .failureScaleType(ImageView.ScaleType.CENTER_CROP) .retry(ContextCompat.getDrawable(getApplicationContext(), R.mipmap.icon_retry)) .retryScaleType(ImageView.ScaleType.CENTER_CROP) .colorFilter(new PorterDuffColorFilter(Color.RED, PorterDuff.Mode.DARKEN)) .overlays(overlays) .pressedStateOverlay(ContextCompat.getDrawable(getApplicationContext(), R.mipmap.bg_one)) .actualScaleType(ImageView.ScaleType.CENTER_CROP) .lowerLoad(R.mipmap.ic_launcher_round) .load(&quot;http://desk.fd.zol-img.com.cn/t_s960x600c5/g5/M00/0D/01/ChMkJlgq0z-IC78PAA1UbwykJUgAAXxIwMAwQcADVSH340.jpg&quot;) .localThumbnailPreviewsEnabled(true) .into(image);&#x77E5;&#x4E4E;&#x56FE;&#x7247;&#x9009;&#x62E9;&#x5668;Fresco&#x7684;&#x5B9E;&#x73B0;&#x4E5F;&#x5C31;&#x5F88;&#x7B80;&#x5355;&#x4E86;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class FrescoEngine implements ImageEngine { @Override public void loadThumbnail(Context context, int resize, Drawable placeholder, ImageView imageView, Uri uri) { FrescoLoader.with(context) .placeholder(placeholder) .resize(resize, resize) .progressiveRenderingEnabled(true) .load(uri) .fadeDuration(300) .actualScaleType(ImageView.ScaleType.CENTER_CROP) .into(imageView); } @Override public void loadGifThumbnail(Context context, int resize, Drawable placeholder, ImageView imageView, Uri uri) { FrescoLoader.with(context) .placeholder(placeholder) .resize(resize, resize) .progressiveRenderingEnabled(true) .load(uri) .fadeDuration(300) .actualScaleType(ImageView.ScaleType.CENTER_CROP) .autoPlayAnimations(true) .into(imageView); } @Override public void loadImage(Context context, int resizeX, int resizeY, ImageView imageView, Uri uri) { FrescoLoader.with(context) .resize(resizeX, resizeY) .progressiveRenderingEnabled(true) .load(uri) .fadeDuration(300) .actualScaleType(ImageView.ScaleType.CENTER_CROP) .into(imageView); } @Override public void loadGifImage(Context context, int resizeX, int resizeY, ImageView imageView, Uri uri) { FrescoLoader.with(context) .resize(resizeX, resizeY) .progressiveRenderingEnabled(true) .load(uri) .fadeDuration(300) .actualScaleType(ImageView.ScaleType.CENTER_CROP) .autoPlayAnimations(true) .into(imageView); } @Override public boolean supportAnimatedGif() { return true; }}]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Fresco</tag>
        <tag>ImageLoader</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android 代理系统级 HttpUrlConnection 请求到第三方网络库 - 支持 Http/2.0 及 HttpDNS]]></title>
    <url>%2F2017%2F07%2F13%2FAndroid%E4%BB%A3%E7%90%86%E7%B3%BB%E7%BB%9F%E7%BA%A7HttpUrlConnection%E8%AF%B7%E6%B1%82%E5%88%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BD%91%E7%BB%9C%E5%BA%93-%E6%94%AF%E6%8C%81Http-2-0%E5%8F%8AHttpDNS%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x770B;&#x5230;&#x8FD9;&#x4E2A;&#x6807;&#x9898;&#xFF0C;&#x597D;&#x957F;&#x54C7;&#xFF08;&#x6069;&#xFF0C;&#x597D;&#x957F;&#xFF09;&#xFF01;&#x5206;&#x89E3;&#x4E00;&#x4E0B;&#xFF1A;&#x4F7F;&#x7528;&#x539F;&#x751F;&#x7684;HttpUrlConnection&#x8BF7;&#x6C42;&#x4EE3;&#x7801;.&#x5728;&#x4E0D;&#x6539;&#x53D8;&#x73B0;&#x6709;&#x4EE3;&#x7801;&#x7684;&#x524D;&#x63D0;&#x4E0B;&#x5C06;&#x8BF7;&#x6C42;&#x4EE3;&#x7406;&#x5230;&#x7B2C;&#x4E09;&#x65B9;&#x7F51;&#x7EDC;&#x5E93;&#xFF0C;&#x5982;OkHttp, Chromium&#x7F51;&#x7EDC;&#x6808;, CURL&#x7B49;.&#x4EE3;&#x7406;&#x5230;&#x7B2C;&#x4E09;&#x65B9;&#x7F51;&#x7EDC;&#x5E93;&#x540E;&#x53EF;&#x4EE5;&#x652F;&#x6301;Http/2.0, HttpDNS&#x7B49;&#x7279;&#x6027;.&#x8981;&#x8FBE;&#x5230;&#x600E;&#x4E48;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x76EE;&#x7684;&#x5462;&#xFF0C;&#x65E0;&#x4EE3;&#x7801;&#x65E0;fuck12345678try { URL url = new URL(&quot;https://www.weidian.com&quot;); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod(&quot;GET&quot;); connection.connect();} catch (Exception e) { e.printStackTrace();}&#x6700;&#x7EC8;&#x7684;&#x76EE;&#x7684;&#x5C31;&#x662F;&#x4F7F;&#x7528;&#x4EE5;&#x4E0A;&#x4EE3;&#x7801;&#xFF0C;&#x4F46;&#x662F;&#x771F;&#x6B63;&#x7684;&#x8BF7;&#x6C42;&#x662F;&#x7B2C;&#x4E09;&#x65B9;&#x7F51;&#x7EDC;&#x5E93;&#x4EE3;&#x7406;&#x53D1;&#x51FA;&#x53BB;&#x7684;&#x3002;&#x5751;&#x7239;&#x7684;Google&#x7238;&#x7238;&#x5728;Android 4.4&#x4E4B;&#x540E;&#xFF0C;Google&#x7238;&#x7238;&#x5C06;Android&#x4E0A;&#x7684;HttpUrlConnection&#x5B9E;&#x73B0;&#x4FEE;&#x6539;&#x6210;&#x4E86;OkHttp&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x652F;&#x6301;&#x663E;&#x5F97;&#x6709;&#x70B9;&#x5751;&#x7239;&#xFF0C;&#x5B83;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x9ED1;&#x76D2;&#x5B50;&#xFF0C;&#x6CA1;&#x6709;&#x5C06;&#x4EFB;&#x4F55;&#x63A7;&#x5236;OkHttp&#x7684;&#x5C5E;&#x6027;&#x66B4;&#x9732;&#x51FA;&#x6765;&#xFF0C;&#x5176;&#x5B9E;&#x8FD9;&#x624D;&#x662F;&#x5408;&#x7406;&#x7684;&#xFF0C;&#x6BD5;&#x7ADF;&#x4E0D;&#x80FD;&#x8BA9;&#x5F00;&#x53D1;&#x8005;&#x611F;&#x77E5;&#x5230;&#x5E95;&#x5C42;&#x7684;&#x5B9E;&#x73B0;&#x561B;&#x3002;&#x4F46;&#x662F;&#x7FFB;&#x770B;AOSP&#x7684;&#x5B9E;&#x73B0; HttpsHandler.java&#xFF0C;&#x4F1A;&#x770B;&#x5230;&#x4E00;&#x6BB5;&#x5751;&#x7239;&#x7684;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930private static final List&lt;Protocol&gt; HTTP_1_1_ONLY = Collections.singletonList(Protocol.HTTP_1_1); /** * Creates an OkHttpClient suitable for creating {@link HttpsURLConnection} instances on * Android. */// Visible for android.net.Network.public static OkUrlFactory createHttpsOkUrlFactory(Proxy proxy) { // The HTTPS OkHttpClient is an HTTP OkHttpClient with extra configuration. OkUrlFactory okUrlFactory = HttpHandler.createHttpOkUrlFactory(proxy); // All HTTPS requests are allowed. okUrlFactory.setUrlFilter(null); OkHttpClient okHttpClient = okUrlFactory.client(); // Only enable HTTP/1.1 (implies HTTP/1.0). Disable SPDY / HTTP/2.0. okHttpClient.setProtocols(HTTP_1_1_ONLY); okHttpClient.setConnectionSpecs(Collections.singletonList(TLS_CONNECTION_SPEC)); // Android support certificate pinning via NetworkSecurityConfig so there is no need to // also expose OkHttp&apos;s mechanism. The OkHttpClient underlying https HttpsURLConnections // in Android should therefore always use the default certificate pinner, whose set of // {@code hostNamesToPin} is empty. okHttpClient.setCertificatePinner(CertificatePinner.DEFAULT); // OkHttp does not automatically honor the system-wide HostnameVerifier set with // HttpsURLConnection.setDefaultHostnameVerifier(). okUrlFactory.client().setHostnameVerifier(HttpsURLConnection.getDefaultHostnameVerifier()); // OkHttp does not automatically honor the system-wide SSLSocketFactory set with // HttpsURLConnection.setDefaultSSLSocketFactory(). // See https://github.com/square/okhttp/issues/184 for details. okHttpClient.setSslSocketFactory(HttpsURLConnection.getDefaultSSLSocketFactory()); return okUrlFactory;}&#x770B;&#x5230;okHttpClient.setProtocols(HTTP_1_1_ONLY);&#x8FD9;&#x4E00;&#x884C;&#xFF0C;&#x6CA1;&#x9519;&#xFF0C;&#x5BF9;OkHttp&#x8BBE;&#x7F6E;&#x4E86;&#x53EA;&#x652F;&#x6301;Http/1.1&#x534F;&#x8BAE;&#xFF0C;&#x5373;&#x4F7F;OkHttp&#x652F;&#x6301;&#x4E86;SPDY&#x548C;Http/2.0&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x88AB;Google&#x7238;&#x7238;&#x7981;&#x7528;&#x4E86;&#x3002;&#x6069;&#xFF0C;&#x6240;&#x4EE5;&#x522B;&#x4EE5;&#x4E3A;&#x5E95;&#x5C42;&#x66FF;&#x6362;&#x6210;&#x4E86;OkHttp&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x5C31;&#x4EE5;&#x4E3A;OkHttp&#x7684;&#x6240;&#x6709;&#x7279;&#x6027;&#x90FD;&#x88AB;&#x7EE7;&#x627F;&#x8FC7;&#x6765;&#x4E86;&#xFF0C;&#x8FD9;&#x662F;&#x5927;&#x9519;&#x7279;&#x9519;&#x7684;&#x3002;&#x7EC6;&#x8BFB;java.net.URL&#x7C7B;&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x518D;&#x53BB;&#x770B;&#x770B;java.net.URL&#x7C7B;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x627E;&#x4E00;&#x627E;&#x6709;&#x6CA1;&#x6709;&#x5176;&#x4ED6;&#x65B9;&#x5F0F;&#xFF0C;&#x5C06;&#x7CFB;&#x7EDF;&#x7EA7;&#x8BF7;&#x6C42;&#x4EE3;&#x7406;&#x5230;&#x7B2C;&#x4E09;&#x65B9;&#x7F51;&#x7EDC;&#x5E93;&#x4E0A;&#x3002;AOSP&#x4E0A;&#x7684;&#x4EE3;&#x7801;&#x5728;URL.javaURL.openConnection()&#x9996;&#x5148;&#x770B;&#x5230;openConnection&#x65B9;&#x6CD5;&#x7684;&#x5B9E;&#x73B0;123public URLConnection openConnection() throws java.io.IOException { return handler.openConnection(this);}&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x8F6C;&#x4EA4;&#x7ED9;&#x4E86;handler&#x5BF9;&#x8C61;&#x7684;openConnection&#xFF0C;&#x5165;&#x53C2;&#x662F;this&#xFF0C;&#x4E5F;&#x5C31;&#x662F;URL&#x5BF9;&#x8C61;&#x3002;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;handler&#x662F;&#x4EC0;&#x4E48;&#x4E1C;&#x897F;&#x5462;&#xFF0C;&#x7EE7;&#x7EED;&#x5F80;&#x4E0B;&#x770B;URLStreamHandlerhandler&#x5176;&#x5B9E;&#x5C31;&#x662F;URLStreamHandler&#x5BF9;&#x8C61;&#x5728;URL&#x4E2D;&#x67E5;&#x627E;&#x4E00;&#x4E0B;&#x4EE3;&#x7801;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5B83;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x6709;&#x8FD9;&#x4E48;&#x4E00;&#x6BB5;&#x83B7;&#x53D6;handler&#x7684;&#x4EE3;&#x7801;12345if (handler == null &amp;&amp; (handler = getURLStreamHandler(protocol)) == null) { throw new MalformedURLException(&quot;unknown protocol: &quot; + protocol);}this.handler = handler;&#x4ECE;&#x4EE3;&#x7801;&#x4E2D;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;handler&#x5C31;&#x662F;&#x5904;&#x7406;&#x67D0;&#x4E2A;&#x534F;&#x8BAE;&#x7684;&#x771F;&#x6B63;&#x5E55;&#x540E;&#x64CD;&#x7EB5;&#x8005;&#xFF0C;&#x63A5;&#x7740;&#x5230;&#x4E86;getURLStreamHandler&#x65B9;&#x6CD5;&#xFF0C;&#x65B9;&#x6CD5;&#x7684;&#x5165;&#x53C2;&#x5C31;&#x662F;&#x534F;&#x8BAE;&#xFF0C;&#x5982;http, http, ftp&#x7B49;&#xFF0C;&#x5982;&#x679C;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x7A7A;&#xFF0C;&#x5219;&#x5F53;&#x524D;&#x8BF7;&#x6C42;&#x4F1A;&#x629B;&#x51FA;&#x4E00;&#x4E2A;&#x672A;&#x77E5;&#x534F;&#x8BAE;&#x7684;&#x5F02;&#x5E38;&#x3002;getURLStreamHandler&#x6765;&#x770B;&#x770B;getURLStreamHandler&#x7684;&#x771F;&#x6B63;&#x5B9E;&#x73B0;&#x90E8;&#x5206;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798/** * A table of protocol handlers. */static Hashtable&lt;String,URLStreamHandler&gt; handlers = new Hashtable&lt;&gt;();private static Object streamHandlerLock = new Object();/** * Returns the Stream Handler. * @param protocol the protocol to use */static URLStreamHandler getURLStreamHandler(String protocol) { URLStreamHandler handler = handlers.get(protocol); if (handler == null) { boolean checkedWithFactory = false; // Use the factory (if any) if (factory != null) { handler = factory.createURLStreamHandler(protocol); checkedWithFactory = true; } // Try java protocol handler if (handler == null) { final String packagePrefixList = System.getProperty(protocolPathProp,&quot;&quot;); StringTokenizer packagePrefixIter = new StringTokenizer(packagePrefixList, &quot;|&quot;); while (handler == null &amp;&amp; packagePrefixIter.hasMoreTokens()) { String packagePrefix = packagePrefixIter.nextToken().trim(); try { String clsName = packagePrefix + &quot;.&quot; + protocol + &quot;.Handler&quot;; Class&lt;?&gt; cls = null; try { ClassLoader cl = ClassLoader.getSystemClassLoader(); cls = Class.forName(clsName, true, cl); } catch (ClassNotFoundException e) { ClassLoader contextLoader = Thread.currentThread().getContextClassLoader(); if (contextLoader != null) { cls = Class.forName(clsName, true, contextLoader); } } if (cls != null) { handler = (URLStreamHandler)cls.newInstance(); } } catch (ReflectiveOperationException ignored) { } } } // Fallback to built-in stream handler. // Makes okhttp the default http/https handler if (handler == null) { try { // BEGIN Android-changed // Use of okhttp for http and https // Removed unnecessary use of reflection for sun classes if (protocol.equals(&quot;file&quot;)) { handler = new sun.net.www.protocol.file.Handler(); } else if (protocol.equals(&quot;ftp&quot;)) { handler = new sun.net.www.protocol.ftp.Handler(); } else if (protocol.equals(&quot;jar&quot;)) { handler = new sun.net.www.protocol.jar.Handler(); } else if (protocol.equals(&quot;http&quot;)) { handler = (URLStreamHandler)Class. forName(&quot;com.android.okhttp.HttpHandler&quot;).newInstance(); } else if (protocol.equals(&quot;https&quot;)) { handler = (URLStreamHandler)Class. forName(&quot;com.android.okhttp.HttpsHandler&quot;).newInstance(); } // END Android-changed } catch (Exception e) { throw new AssertionError(e); } } synchronized (streamHandlerLock) { URLStreamHandler handler2 = null; // Check again with hashtable just in case another // thread created a handler since we last checked handler2 = handlers.get(protocol); if (handler2 != null) { return handler2; } // Check with factory if another thread set a // factory since our last check if (!checkedWithFactory &amp;&amp; factory != null) { handler2 = factory.createURLStreamHandler(protocol); } if (handler2 != null) { // The handler from the factory must be given more // importance. Discard the default handler that // this thread created. handler = handler2; } // Insert this handler into the hashtable if (handler != null) { handlers.put(protocol, handler); } } } return handler;}&#x9996;&#x5148;&#x4ECE;handlers&#x4E2D;&#x6839;&#x636E;&#x534F;&#x8BAE;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;URLStreamHandler&#x5BF9;&#x8C61;&#xFF0C;handlers&#x662F;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x7684;Hashtable&#xFF0C;&#x4E3B;&#x8981;&#x8D77;&#x5230;&#x4E00;&#x4E2A;&#x7F13;&#x5B58;&#x7684;&#x4F5C;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x83B7;&#x53D6;&#x4E0D;&#x5230;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x4E0B;&#x4E00;&#x6B65;&#x64CD;&#x4F5C;&#x3002;&#x5224;&#x65AD;factory&#x5BF9;&#x8C61;&#x662F;&#x5426;&#x4E3A;&#x7A7A;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x8C03;&#x7528;factory.createURLStreamHandler&#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x4E00;&#x4E2A;URLStreamHandler&#x5BF9;&#x8C61;&#xFF0C;&#x5982;&#x679C;URLStreamHandler&#x5BF9;&#x8C61;&#x4E0D;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x6807;&#x8BB0;checkedWithFactory&#x53D8;&#x91CF;&#x4E3A;true&#xFF0C;&#x7528;&#x4E8E;&#x540E;&#x9762;&#x68C0;&#x67E5;&#x65F6;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x8FD4;&#x56DE;&#x7A7A;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x4E0B;&#x4E00;&#x6B65;&#x64CD;&#x4F5C;&#x83B7;&#x53D6;&#x7CFB;&#x7EDF;java.protocol.handler.pkgs&#x5C5E;&#x6027;&#xFF0C;&#x8BE5;&#x503C;&#x662F;JVM&#x7684;&#x542F;&#x52A8;&#x53C2;&#x6570;&#xFF0C;&#x901A;&#x8FC7;-D java.protocol.handler.pkgs&#x6765;&#x8BBE;&#x7F6E;URLStreamHandler&#x5B9E;&#x73B0;&#x7C7B;&#x7684;&#x5305;&#x8DEF;&#x5F84;&#xFF0C;&#x4F8B;&#x5982;-D java.protocol.handler.pkgs=com.sample.protocol&#xFF0C;&#x4EE3;&#x8868;&#x5904;&#x7406;&#x5B9E;&#x73B0;&#x7C7B;&#x7686;&#x5728;&#x8FD9;&#x4E2A;&#x5305;&#x4E0B;&#x3002;&#x5982;&#x679C;&#x9700;&#x8981;&#x591A;&#x4E2A;&#x5305;&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x4F7F;&#x7528;&#x201C;|&#x201D; &#x5206;&#x5272;&#x3002;&#x6BD4;&#x5982;-D java.protocol.handler.pkgs=com.sample.protocol1|com.sample.protocol2&#xFF1B;&#x800C;JDK&#x5185;&#x90E8;&#x9ED8;&#x8BA4;&#x5B9E;&#x73B0;&#x7C7B;&#x5747;&#x662F;&#x5728;sun.net.www.protocol&#x5305;&#x4E0B;&#x3002;&#x8BBE;&#x7F6E;&#x8FDB;&#x53BB;&#x7684;&#x5305;&#x4E0B;&#x7684;&#x7C7B;&#x7684;&#x547D;&#x540D;&#x6A21;&#x5F0F;&#x5FC5;&#x987B;&#x4E3A;[package_path].[protocol].Handler&#xFF0C;&#x6BD4;&#x5982;&#x6211;&#x5B9E;&#x73B0;&#x4E86;http&#x534F;&#x8BAE;&#xFF0C;&#x5219;&#x5BF9;&#x5E94;&#x7684;&#x5B9E;&#x73B0;&#x7C7B;&#x4E3A;com.sample.protocol.http.Handler&#xFF0C;&#x518D;&#x6BD4;&#x5982;&#x6211;&#x5B9E;&#x73B0;&#x4E86;https&#x534F;&#x8BAE;&#xFF0C;&#x5219;&#x5BF9;&#x5E94;&#x7684;&#x5B9E;&#x73B0;&#x7C7B;&#x4E3A;com.sample.protocol.https.Handler&#xFF0C;&#x56E0;&#x4E3A;&#x662F;&#x9700;&#x8981;&#x7528;&#x5230;&#x53CD;&#x5C04;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E9B;&#x5B9E;&#x73B0;&#x7C7B;&#x5FC5;&#x987B;&#x6709;&#x4E00;&#x4E2A;&#x9ED8;&#x8BA4;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x3002;&#x4E86;&#x89E3;&#x4E86;&#x8FD9;&#x4E2A;&#x539F;&#x7406;&#x4E4B;&#x540E;&#xFF0C;&#x4E4B;&#x540E;&#x5C31;&#x662F;&#x904D;&#x5386;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7684;&#x6240;&#x6709;URLStreamHandler&#xFF0C;&#x76F4;&#x5230;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x5BF9;&#x5E94;&#x534F;&#x8BAE;&#x7684;URLStreamHandler&#xFF0C;&#x53CD;&#x5C04;&#x6784;&#x9020;&#x5B83;&#xFF1B;&#x5982;&#x679C;&#x627E;&#x4E0D;&#x5230;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x4E0B;&#x4E00;&#x6B65;&#x64CD;&#x4F5C;&#x3002;&#x5982;&#x679C;&#x534F;&#x8BAE;&#x662F;file&#x534F;&#x8BAE;&#xFF0C;&#x5219;&#x4F7F;&#x7528;&#x9ED8;&#x8BA4;&#x5305;&#x4E0B;&#x7684;package_path.file.Handler&#x5BF9;&#x8C61;&#xFF0C;&#x5373;sun.net.www.protocol.file.Handler&#x5BF9;&#x8C61;&#x5982;&#x679C;&#x534F;&#x8BAE;&#x662F;ftp&#x534F;&#x8BAE;&#xFF0C;&#x5219;&#x4F7F;&#x7528;&#x9ED8;&#x8BA4;&#x5305;&#x4E0B;&#x7684;package_path.ftp.Handler&#x5BF9;&#x8C61;&#xFF0C;&#x5373;sun.net.www.protocol.ftp.Handler&#x5BF9;&#x8C61;&#x5982;&#x679C;&#x534F;&#x8BAE;&#x662F;jar&#x534F;&#x8BAE;&#xFF0C;&#x5219;&#x4F7F;&#x7528;&#x9ED8;&#x8BA4;&#x5305;&#x4E0B;&#x7684;package_path.jar.Handler&#x5BF9;&#x8C61;&#xFF0C;&#x5373;sun.net.www.protocol.jar.Handler&#x5BF9;&#x8C61;&#x5982;&#x679C;&#x534F;&#x8BAE;&#x662F;http&#x534F;&#x8BAE;&#xFF0C;&#x5219;&#x4F7F;&#x7528;com.android.okhttp.HttpHandler&#xFF0C;&#x6CE8;&#x610F;&#x6B64;&#x65F6;OkHttp&#x767B;&#x573A;&#x4E86;&#xFF0C;&#x8C03;&#x7528;&#x7684;&#x65B9;&#x5F0F;&#x662F;&#x53CD;&#x5C04;&#x8C03;&#x7528;&#x3002;&#x5BF9;&#x5E94;&#x7684;&#x5B9E;&#x73B0;&#x7C7B;&#x5728;HttpsHandler.java&#x5982;&#x679C;&#x534F;&#x8BAE;&#x662F;https&#x534F;&#x8BAE;&#xFF0C;&#x5219;&#x4F7F;&#x7528;com.android.okhttp.HttpsHandler&#xFF0C;&#x4E5F;&#x662F;&#x53CD;&#x5C04;&#x8C03;&#x7528;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x5B9E;&#x73B0;&#x7C7B;&#x5728;HttpsHandler.java&#x7EC6;&#x5FC3;&#x7684;&#x4F60;&#x4F1A;&#x53D1;&#x73B0;&#xFF0C;&#x4EE3;&#x7801;&#x4E2D;&#x53CD;&#x5C04;&#x7684;&#x662F;com.android.okhttp.HttpHandler&#x548C;com.android.okhttp.HttpsHandler&#xFF0C;&#x4F46;&#x662F;AOSP&#x4E0A;&#x7684;&#x6E90;&#x7801;&#x5374;&#x662F;com.squareup.okhttp.HttpHandler&#x548C;com.android.okhttp.HttpsHandler&#xFF0C;&#x8FD9;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x5462;&#xFF0C;&#x56E0;&#x4E3A;&#x9879;&#x76EE;&#x76EE;&#x5F55;&#x4E0B;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x53EB;jarjar-rules.txt&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x5B83;&#x4F1A;&#x5C06;com.squareup&#x91CD;&#x547D;&#x540D;&#x4E3A;com.android&#xFF0C;&#x4EE5;&#x53CA;&#x5C06;okio&#x91CD;&#x547D;&#x540D;&#x4E3A;com.android.okhttp.okio&#x6700;&#x540E;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x68C0;&#x67E5;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x68C0;&#x67E5;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x662F;&#x4E0D;&#x662F;&#x521B;&#x5EFA;&#x4E86;&#x76F8;&#x5173;&#x7684;&#x7C7B;&#xFF0C;&#x9996;&#x5148;&#x4ECE;handlers&#x7F13;&#x5B58;&#x4E2D;&#x67E5;&#x627E;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#x4E86;&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#xFF0C;&#x65E0;&#x8BBA;&#x5F53;&#x524D;&#x7684;hander&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x521B;&#x5EFA;&#xFF0C;&#x90FD;&#x76F4;&#x63A5;&#x4E22;&#x5F03;&#x5F53;&#x524D;&#x7684;handler&#x5BF9;&#x8C61;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x4E0D;&#x5230;&#xFF0C;&#x5219;&#x68C0;&#x67E5;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x662F;&#x4E0D;&#x662F;&#x521B;&#x5EFA;&#x4E86;factory&#x5BF9;&#x8C61;&#xFF0C;&#x8FD9;&#x4E2A;&#x524D;&#x63D0;&#x6761;&#x4EF6;&#x662F;&#x6700;&#x5F00;&#x59CB;&#x65F6;factory&#x5E76;&#x6CA1;&#x6709;&#x88AB;&#x521B;&#x5EFA;&#xFF0C;&#x4ECE;&#x800C;&#x907F;&#x514D;&#x91CD;&#x590D;&#x521B;&#x5EFA;handler&#x3002;&#x5982;&#x679C;&#x8FD9;&#x65F6;&#x5019;&#x68C0;&#x67E5;&#x7684;handler2&#x4E0D;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x5C06;&#x5176;&#x8D4B;&#x503C;&#x7ED9;handler&#xFF0C;&#x5E76;&#x4E14;&#x5C06;handler&#x5BF9;&#x8C61;&#x5B58;&#x5165;handlers&#x7F13;&#x5B58;&#x4E2D;&#xFF0C;&#x5C06;hanler&#x5BF9;&#x8C61;&#x8FD4;&#x56DE;&#x3002;&#x4ECE;&#x4EE5;&#x4E0A;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x5F88;&#x5FEB;&#x7684;&#x627E;&#x5230;&#x6211;&#x4EEC;&#x6709;&#x4E24;&#x4E2A;&#x5207;&#x5165;&#x70B9;&#x6211;&#x4EEC;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x4ECE;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x4F20;&#x5165;URLStreamHandler&#x5BF9;&#x8C61;&#xFF0C;&#x4EE3;&#x7406;&#x6240;&#x6709;&#x8BF7;&#x6C42;&#x6211;&#x4EEC;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x5168;&#x5C40;&#x4EE3;&#x7406;&#x6389;URLStreamHandler&#x7684;&#x521B;&#x5EFA;&#x5BF9;&#x4E8E;&#x7B2C;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x67E5;&#x627E;URL&#x6784;&#x9020;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x786E;&#x5B9E;&#x5B58;&#x5728;&#x8FD9;&#x4E48;&#x4E00;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x4E0D;&#x6B62;&#x4E00;&#x4E2A;12345678public URL(String protocol, String host, int port, String file, URLStreamHandler handler) throws MalformedURLException {}public URL(URL context, String spec, URLStreamHandler handler) throws MalformedURLException {}&#x4F46;&#x662F;&#x8FD9;&#x5DF2;&#x7ECF;&#x8FDD;&#x80CC;&#x4E86;&#x6211;&#x4EEC;&#x4E0D;&#x4FEE;&#x6539;&#x73B0;&#x6709;&#x4EE3;&#x7801;&#x7684;&#x539F;&#x5219;&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x6784;&#x9020;URL&#x5BF9;&#x8C61;&#x7684;&#x4EE3;&#x7801;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x653E;&#x5F03;&#x5B83;&#x3002;&#x90A3;&#x4E48;&#x95EE;&#x9898;&#x5C31;&#x5230;&#x4E86;&#x7B2C;&#x4E8C;&#x4E2A;&#x4E0A;&#xFF0C;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x5168;&#x5C40;&#x4EE3;&#x7406;&#x6389;URLStreamHandler&#x7684;&#x521B;&#x5EFA;&#xFF0C;&#x7ECF;&#x8FC7;&#x521A;&#x624D;&#x7684;&#x4E00;&#x756A;&#x5206;&#x6790;&#xFF0C;&#x4E0D;&#x96BE;&#x53D1;&#x73B0;&#xFF0C;&#x786E;&#x5B9E;&#x662F;&#x6709;&#x90A3;&#x4E48;&#x4E00;&#x4E2A;&#x89D2;&#x8272;&#xFF0C;&#x8D1F;&#x8D23;&#x5168;&#x5C40;&#x4EE3;&#x7406;URLStreamHandler&#x7684;&#x521B;&#x5EFA;&#xFF0C;&#x5E76;&#x4E14;&#x5176;&#x4F18;&#x5148;&#x7EA7;&#x662F;&#x76F8;&#x5F53;&#x7684;&#x9AD8;&#x7684;&#x3002;&#x6CA1;&#x9519;&#xFF0C;&#x5C31;&#x662F;factory&#x5BF9;&#x8C61;&#x53CA;&#x5176;createURLStreamHandler&#x65B9;&#x6CD5;URLStreamHandlerFactory&#x90A3;&#x4E48;factory&#x5BF9;&#x8C61;&#x662F;&#x600E;&#x4E48;&#x6765;&#x7684;&#x5462;&#xFF0C;&#x5B83;&#x5176;&#x5B9E;&#x662F;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x53D8;&#x91CF;1static URLStreamHandlerFactory factory;&#x9ED8;&#x8BA4;&#x4E3A;&#x7A7A;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x4E0D;&#x8BBE;&#x7F6E;&#xFF0C;&#x5B83;&#x5C31;&#x4F1A;&#x4E00;&#x76F4;&#x4E3A;&#x7A7A;&#xFF0C;&#x8FD9;&#x4E0D;&#x5C31;&#x662F;&#x4E13;&#x95E8;&#x7528;&#x4E8E;&#x81EA;&#x5B9A;&#x4E49;&#x7528;&#x7684;&#x5417;&#xFF01;&#x770B;&#x4E0B;&#x5B83;&#x7684;&#x8BBE;&#x7F6E;&#x65B9;&#x6CD5;12345678910111213public static void setURLStreamHandlerFactory(URLStreamHandlerFactory fac) { synchronized (streamHandlerLock) { if (factory != null) { throw new Error(&quot;factory already defined&quot;); } SecurityManager security = System.getSecurityManager(); if (security != null) { security.checkSetFactory(); } handlers.clear(); factory = fac; }}&#x9996;&#x5148;&#x4F1A;&#x5224;&#x65AD;factory&#x662F;&#x4E0D;&#x662F;null&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4E3A;null&#xFF0C;&#x5219;&#x4F1A;&#x629B;&#x51FA;&#x4E00;&#x4E2A;Error&#xFF0C;&#x4ECE;&#x8FD9;&#x91CC;&#x770B;&#x51FA;&#xFF0C;factory&#x6700;&#x591A;&#x4EC5;&#x4E14;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x4E00;&#x6B21;&#x8C03;&#x7528;handlers&#x7684;clear&#x65B9;&#x6CD5;&#xFF0C;&#x6E05;&#x7A7A;&#x4E4B;&#x524D;&#x7F13;&#x5B58;&#x7684;&#x6240;&#x6709;handler&#x5BF9;&#x8C61;&#xFF0C;&#x8FD9;&#x4E2A;&#x76EE;&#x7684;&#x662F;&#x5565;&#x5462;&#xFF1F;&#x5F53;&#x7136;&#x662F;&#x4E3A;&#x4E86;&#x8BA9;&#x8BBE;&#x7F6E;&#x7684;factory&#x751F;&#x6548;&#x5566;&#xFF0C;&#x6BD5;&#x7ADF;&#x5B83;&#x662F;&#x9AD8;&#x4F18;&#x5148;&#x7EA7;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x53EF;&#x80FD;&#x5728;&#x8BBE;&#x7F6E;&#x5B83;&#x4E4B;&#x524D;&#xFF0C;&#x5DF2;&#x7ECF;&#x6709;&#x4E00;&#x4E9B;handler&#x88AB;&#x521B;&#x5EFA;&#x4E86;&#xFF0C;&#x8BA9;&#x90A3;&#x4E9B;&#x5DF2;&#x7ECF;&#x521B;&#x5EFA;&#x7684;handler&#x5931;&#x6548;&#x3002;&#x5168;&#x5C40;&#x4EE3;&#x7406;&#x8BF7;&#x6C42;&#x5230;OkHttpokhttp&#x6709;&#x5BF9;httpurlconnection&#x7684;&#x652F;&#x6301;&#x6A21;&#x5757;&#xFF0C;&#x4E0D;&#x8FC7;&#x5176;&#x5DF2;&#x7ECF;&#x88AB;square&#x5E9F;&#x5F03;&#x4E86;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5C06;&#x6765;&#x4E0D;&#x518D;&#x7EF4;&#x62A4;&#x4E86;&#x3002;&#x4E0D;&#x8FC7;&#x6211;&#x4EEC;&#x8FD8;&#x662F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7684;&#x5F15;&#x5165;okhttp&#x53CA;okhttp-httpurlconnection&#x7684;&#x6A21;&#x5757;12compile &apos;com.squareup.okhttp3:okhttp:3.8.1&apos;compile &apos;com.squareup.okhttp3:okhttp-urlconnection:3.8.1&apos;&#x8BBE;&#x7F6E;URLStreamHandlerFactory&#x5BF9;&#x8C61;&#x4E3A;OkUrlFactory123456try { OkUrlFactory okUrlFactory = new OkUrlFactory(client); URL.setURLStreamHandlerFactory(okUrlFactory);} catch(Exception e) { //ignore}&#x8FD9;&#x65F6;&#x5019;&#x4F60;&#x7684;&#x8BF7;&#x6C42;&#x5C31;&#x88AB;&#x4EE3;&#x7406;&#x5230;okhttp&#x4E0A;&#x4E86;&#x3002;&#x5982;&#x4F55;&#x8BA9;OkHttp&#x652F;&#x6301;Http/2.0&#x4E0D;&#x7528;&#x8BBE;&#x7F6E;&#xFF0C;&#x9ED8;&#x8BA4;5.0&#x4EE5;&#x4E0A;&#x652F;&#x6301;&#xFF0C;&#x53EA;&#x8981;&#x540E;&#x7AEF;&#x670D;&#x52A1;&#x5668;&#x652F;&#x6301;alpn&#x9009;&#x62E9;&#x534F;&#x8BAE;&#xFF0C;&#x5B83;&#x5C31;&#x80FD;&#x652F;&#x6301;&#x3002;&#x5982;&#x4F55;&#x8BA9;OkHttp&#x652F;&#x6301;HttpDNS&#x4F7F;&#x7528;OkHttp&#x7684;Dns&#x63A5;&#x53E3;&#x5373;&#x53EF;12345678910111213OkHttpClient client = new OkHttpClient.Builder() .dns(new Dns() { @Override public List&lt;InetAddress&gt; lookup(String hostname) throws UnknownHostException { if (httpdns) { return getHttpdnsByHost(hostname); } return Dns.SYSTEM.lookup(hostname); } }) .build();OkUrlFactory okUrlFactory = new OkUrlFactory(client);URL.setURLStreamHandlerFactory(okUrlFactory);&#x5751;&#x70B9;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x7684;OkHttp&#x4EE3;&#x7406;&#xFF0C;&#x5207;&#x8BB0;&#x4E0D;&#x8981;&#x4F7F;&#x7528;&#x4EFB;&#x4F55;&#x62E6;&#x622A;&#x5668;&#xFF0C;&#x56E0;&#x4E3A;&#x8BBE;&#x7F6E;&#x4E86;&#x4E5F;&#x6CA1;&#x6709;&#x7528;&#xFF0C;&#x5728;OkHttpURLConnection.java&#x4E2D;&#x6709;&#x4E2A;buildCall()&#x65B9;&#x6CD5;&#xFF0C;&#x8D1F;&#x8D23;&#x521B;&#x5EFA;OkHttp&#x7684;Call&#x5BF9;&#x8C61;&#xFF0C;&#x5728;&#x8BE5;&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x4F1A;&#x5C06;&#x6211;&#x4EEC;&#x8BBE;&#x7F6E;&#x8FDB;&#x53BB;&#x7684;client&#x7684;&#x62E6;&#x622A;&#x5668;&#x5168;&#x90E8;&#x6E05;&#x7A7A;&#xFF0C;&#x5982;&#x4E0B;&#x4EE3;&#x7801;12345678910111213141516171819202122private Call buildCall() throws IOException { if (call != null) { return call; } //&#x6B64;&#x5904;&#x7701;&#x7565;n&#x884C;&#x4EE3;&#x7801; OkHttpClient.Builder clientBuilder = client.newBuilder(); clientBuilder.interceptors().clear(); clientBuilder.interceptors().add(UnexpectedException.INTERCEPTOR); clientBuilder.networkInterceptors().clear(); clientBuilder.networkInterceptors().add(networkInterceptor); // Use a separate dispatcher so that limits aren&apos;t impacted. But use the same executor service! clientBuilder.dispatcher(new Dispatcher(client.dispatcher().executorService())); // If we&apos;re currently not using caches, make sure the engine&apos;s client doesn&apos;t have one. if (!getUseCaches()) { clientBuilder.cache(null); } return call = clientBuilder.build().newCall(request); }&#x6240;&#x4EE5;&#x5C06;OkHttp&#x7684;OkUrlFactory&#x8BBE;&#x7F6E;&#x4E3A;URLStreamHandlerFactory&#x65F6;&#xFF0C;&#x8BBE;&#x7F6E;&#x7684;OkHttpClient&#x4E0D;&#x8981;&#x6DFB;&#x52A0;&#x4EFB;&#x4F55;&#x62E6;&#x622A;&#x5668;&#x5373;&#x53EF;&#xFF0C;&#x6DFB;&#x52A0;&#x4E86;&#x4E5F;&#x4F1A;&#x5931;&#x6548;&#xFF0C;&#x6216;&#x8BB8;&#x8FD9;&#x5C31;&#x662F;Square&#x6BD4;&#x8F83;&#x5751;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x548C;Google&#x7238;&#x7238;&#x4E00;&#x6837;&#x5751;&#x3002;chromium&#x7F51;&#x7EDC;&#x6808;&#x7684;&#x4EE3;&#x7406;&#x5982;&#x679C;&#x4F60;&#x7684;&#x9879;&#x76EE;&#x5F15;&#x7528;&#x4E86;chromium&#x7684;&#x7F51;&#x7EDC;&#x6808;&#xFF0C;&#x90A3;&#x4E48;&#x4E5F;&#x662F;&#x652F;&#x6301;&#x5168;&#x5C40;&#x4EE3;&#x7406;HttpUrlConnection&#x7684;&#x8BF7;&#x6C42;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;chromium&#x4E5F;&#x662F;&#x6709;URLStreamHandlerFactory&#x6A21;&#x5757;&#x7684;&#x652F;&#x6301;&#xFF0C;&#x53C2;&#x8003; Chromium &#x7F51;&#x7EDC;&#x6808;&#x7684;&#x7F16;&#x8BD1;&#x4E0E;&#x4F7F;&#x7528;&#x5F15;&#x5165;cronet&#x4F9D;&#x8D56;1compile &apos;io.github.lizhangqu:cronet:0.0.1&apos;&#x8BBE;&#x7F6E;URLStreamHandlerFactory&#x5BF9;&#x8C61;&#x4E3A;CronetURLStreamHandlerFactory12345678910111213141516171819202122CronetEngine.Builder builder = new CronetEngine.Builder(context);builder. enableHttpCache(CronetEngine.Builder.HTTP_CACHE_IN_MEMORY, 100 * 1024) // cache .enableHttp2(true) // Http/2.0 Supprot .enableQuic(true) // Quic Supprot .setHostResolver(new HostResolver() { @Override public List&lt;InetAddress&gt; resolve(String hostname) throws UnknownHostException { if (hostname == null) throw new UnknownHostException(&quot;hostname == null&quot;); if (httpdns) { return getHttpdnsByHost(hostname); } return Arrays.asList(InetAddress.getAllByName(hostname)); } }) // custom dns, you can use httpdns here .enableSDCH(true) // SDCH Supprot .setLibraryName(&quot;cronet&quot;); // lib so nameCronetEngine cronetEngine = builder.build();CronetURLStreamHandlerFactory cronetURLStreamHandlerFactory = new CronetURLStreamHandlerFactory(cronetEngine);URL.setURLStreamHandlerFactory(cronetURLStreamHandlerFactory);&#x5982;&#x4E0A;&#x4EE3;&#x7801;&#xFF0C;&#x5DF2;&#x7ECF;&#x5F00;&#x8D77;&#x4E86;http/2.0&#x53CA;httpdns&#x7684;&#x652F;&#x6301;&#x603B;&#x7ED3;&#x6B64;&#x5904;&#x6CA1;&#x6709;&#x603B;&#x7ED3;&#xFF01;&#x5751;&#x5DF2;&#x6316;&#xFF0C;&#x5C11;&#x5E74;&#x5FEB;&#x53BB;&#x586B;&#x5751;&#x5427;&#xFF01;]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>HttpUrlConnection</tag>
        <tag>URLStreamHandlerFactory</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[又掌握了一项新技能 - 断点调试 Gradle 插件]]></title>
    <url>%2F2017%2F07%2F05%2F%E5%8F%88%E6%8E%8C%E6%8F%A1%E4%BA%86%E4%B8%80%E9%A1%B9%E6%96%B0%E6%8A%80%E8%83%BD-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95Gradle%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x6700;&#x521D;&#x5F00;&#x53D1;Android&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x80AF;&#x5B9A;&#x662F;&#x5728;&#x6253;log&#x8C03;&#x8BD5;&#xFF0C;&#x7136;&#x540E;&#x6162;&#x6162;&#x5730;&#x89C9;&#x5F97;&#x6253;log&#x6548;&#x7387;&#x592A;&#x4F4E;&#x4E0B;&#x4E86;&#xFF0C;&#x4E0D;&#x80FD;&#x5FEB;&#x901F;&#x5B9A;&#x4F4D;&#x95EE;&#x9898;&#xFF0C;&#x4E8E;&#x662F;&#x8D70;&#x4E0A;&#x4E86;&#x65AD;&#x70B9;&#x8C03;&#x8BD5;&#x4E4B;&#x8DEF;&#x3002;Gradle&#x63D2;&#x4EF6;&#x4E5F;&#x4E00;&#x6837;&#xFF0C;&#x4ECE;&#x4F1A;&#x5199;&#x63D2;&#x4EF6;&#x90A3;&#x4E00;&#x523B;&#x8D77;&#x5230;&#x73B0;&#x5728;&#xFF0C;&#x4E00;&#x76F4;&#x7528;&#x7684;&#x662F;&#x6253;log&#x8C03;&#x8BD5;&#x529F;&#x80FD;&#xFF0C;&#x4F46;&#x662F;&#x540C;&#x6837;&#x7684;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x6548;&#x7387;&#x4E5F;&#x592A;&#x4F4E;&#x4E0B;&#x4E86;&#xFF0C;&#x8FD9;&#x4E4B;&#x524D;&#xFF0C;&#x6211;&#x4E5F;&#x5C1D;&#x8BD5;&#x8FC7;&#x5BFB;&#x627E;&#x65AD;&#x70B9;&#x8C03;&#x8BD5;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x4F46;&#x662F;&#x4E00;&#x76F4;&#x6CA1;&#x6709;&#x6210;&#x529F;&#xFF0C;&#x6628;&#x5929;&#x5076;&#x7136;&#x4E4B;&#x95F4;&#x8C03;&#x901A;&#x4E86;&#xFF0C;&#x4E8E;&#x662F;&#x8BB0;&#x5F55;&#x4E00;&#x53D1;&#x3002;&#x4E4B;&#x524D;&#x5931;&#x8D25;&#x7684;&#x65B9;&#x5F0F;&#x4E4B;&#x524D;&#x6D4B;&#x8BD5;&#x65AD;&#x70B9;&#x8C03;&#x8BD5;&#x7684;&#x529F;&#x80FD;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E00;&#x76F4;&#x5728;build.gradle&#x4E2D;&#x76F4;&#x63A5;&#x6D4B;&#x4EE3;&#x7801;&#xFF0C;&#x6D4B;&#x8BD5;&#x7684;&#x4EE3;&#x7801;&#x4E5F;&#x662F;&#x5728;project.afterEvaluate&#x4E4B;&#x540E;&#xFF0C;&#x7136;&#x540E;&#x904D;&#x5386;android..applicationVariants&#xFF0C;&#x83B7;&#x53D6;&#x5404;&#x4E2A;&#x4FE1;&#x606F;&#xFF0C;&#x5C31;&#x50CF;&#x8FD9;&#x6837;&#x5B50;12345678910111213141516171819202122232425262728293031buildscript { repositories { jcenter() } dependencies { classpath &apos;com.android.tools.build:gradle:2.3.3&apos; }}dependencies { compile gradleApi() compile localGroovy()}import com.android.build.gradle.api.TestVariantimport com.android.build.gradle.api.UnitTestVariantimport com.android.build.gradle.internal.variant.ApplicationVariantDataimport com.android.build.gradle.internal.api.ApplicationVariantImplproject.afterEvaluate { if (project.plugins.hasPlugin(&quot;com.android.application&quot;)) { def android = project.extensions.getByName(&quot;android&quot;) android.applicationVariants.all {ApplicationVariantImpl variant -&gt; project.logger.error &quot;DebuggerPlugin:${variant}&quot; ApplicationVariantData apkVariantData = variant.getApkVariantData() ApplicationVariantData variantData = variant.getVariantData() TestVariant testVariant = variant.getTestVariant() UnitTestVariant unitTestVariant = variant.getUnitTestVariant() } }}&#x4E8E;&#x662F;&#x8FD9;&#x4E2A;&#x65AD;&#x70B9;&#x6211;&#x6253;&#x4E86;&#x4E00;&#x5E74;&#x786C;&#x662F;&#x6CA1;&#x6253;&#x4F4F;&#xFF0C;&#x6069;&#xFF0C;&#x6CA1;&#x9519;&#xFF0C;&#x8FD9;&#x4E2A;&#x4E1C;&#x897F;&#x6211;&#x65AD;&#x65AD;&#x7EED;&#x7EED;&#x5B9E;&#x9A8C;&#x4E86;&#x4E00;&#x5E74;&#x4E5F;&#x6CA1;&#x6709;&#x6210;&#x529F;&#x8FC7;&#xFF0C;&#x4E5F;&#x6709;&#x70B9;&#x65E0;&#x8BED;&#xFF0C;&#x539F;&#x56E0;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x3002;&#x6628;&#x65E5;&#x53D1;&#x73B0;&#xFF0C;&#x5FC5;&#x987B;&#x5F97;&#x5728;&#x5916;&#x9762;&#x5305;&#x4E00;&#x5C42;plugin&#x624D;&#x80FD;&#x6253;&#x4F4F;&#x65AD;&#x70B9;&#xFF0C;&#x5C31;&#x50CF;&#x8FD9;&#x6837;&#x5B50;123456789101112131415161718192021222324252627282930313233343536373839buildscript { repositories { jcenter() } dependencies { classpath &apos;com.android.tools.build:gradle:2.3.3&apos; }}dependencies { compile gradleApi() compile localGroovy()}apply plugin: DebuggerPluginimport com.android.build.gradle.api.TestVariantimport com.android.build.gradle.api.UnitTestVariantimport com.android.build.gradle.internal.variant.ApplicationVariantDataimport com.android.build.gradle.internal.api.ApplicationVariantImplclass DebuggerPlugin implements Plugin&lt;Project&gt; { void apply(Project project) { project.afterEvaluate { if (project.plugins.hasPlugin(&quot;com.android.application&quot;)) { def android = project.extensions.getByName(&quot;android&quot;) android.applicationVariants.all {ApplicationVariantImpl variant -&gt; project.logger.error &quot;DebuggerPlugin:${variant}&quot; ApplicationVariantData apkVariantData = variant.getApkVariantData() ApplicationVariantData variantData = variant.getVariantData() TestVariant testVariant = variant.getTestVariant() UnitTestVariant unitTestVariant = variant.getUnitTestVariant() } } } }}&#x5177;&#x4F53;&#x539F;&#x56E0;&#x4E5F;&#x627E;&#x4E0D;&#x5230;&#xFF0C;&#x7406;&#x8BBA;&#x4E0A;&#x6765;&#x8BB2;&#xFF0C;&#x4E24;&#x8005;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x5927;&#x7684;&#x533A;&#x522B;&#xFF0C;&#x9664;&#x975E;&#x4E0D;&#x5305;plugin&#x7684;&#x4EE3;&#x7801;&#x7F16;&#x8BD1;&#x540E;&#x4EE3;&#x7801;&#x4F4D;&#x7F6E;&#x53D1;&#x751F;&#x4E86;&#x53D8;&#x5316;&#xFF0C;&#x5BFC;&#x81F4;&#x6253;&#x4E0D;&#x5230;&#x65AD;&#x70B9;&#x3002;&#x5176;&#x5B9E;&#x8FD9;&#x4E8B;&#x4E5F;&#x602A;&#x81EA;&#x5DF1;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x5F00;&#x59CB;&#x76F4;&#x63A5;&#x7528;&#x63D2;&#x4EF6;&#x9879;&#x76EE;&#x6765;&#x6D4B;&#xFF0C;&#x5C06;&#x5176;&#x53D1;&#x5E03;&#x5230;&#x672C;&#x5730;maven&#xFF0C;&#x7136;&#x540E;&#x6267;&#x884C;&#x53BB;&#x6253;&#x65AD;&#x70B9;&#xFF0C;&#x4F30;&#x8BA1;&#x8001;&#x65E9;&#x5C31;&#x6210;&#x529F;&#x4E86;&#xFF0C;&#x786C;&#x662F;&#x5728;build.gradle&#x4E2D;&#x5199;&#x96F6;&#x788E;&#x7684;&#x4EE3;&#x7801;&#x6765;&#x6D4B;&#x8BD5;&#xFF0C;&#x5F80;&#x4E8B;&#x4E0D;&#x63D0;&#x4E5F;&#x7F62;&#x3002;&#x4E00;&#x4E2A;&#x5751;&#x4EE5;&#x4E0A;&#x4EE3;&#x7801;&#x6267;&#x884C;&#x8FC7;&#x7A0B;&#x4F1A;&#x5148;&#x51FA;&#x73B0;&#x4E00;&#x4E2A;&#x9519;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A;1Error:The closure &apos;DebuggerPlugin$_apply_closure1$_closure2@20825b3e&apos; is not valid as an action for argument &apos;com.android.build.gradle.internal.api.ApplicationVariantImpl_Decorated@1103b69d&apos;. It should accept no parameters, or one compatible with type &apos;com.android.build.gradle.internal.api.ApplicationVariantImpl_Decorated&apos;. It accepts (com.android.build.gradle.internal.api.ApplicationVariantImpl).&#x8FD9;&#x4E2A;&#x9519;&#x51FA;&#x73B0;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5C06;ApplicationVariantImpl variant&#x6539;&#x6210;def variant&#x5373;&#x53EF;&#xFF0C;&#x7136;&#x540E;&#x7EE7;&#x7EED;&#x8FD0;&#x884C;&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;&#x53E6;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x5373;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;cannot cast object with class A to A&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5982;&#x4E0B;1Error:Cannot cast object &apos;ApplicationVariantData{debug}&apos; with class &apos;com.android.build.gradle.internal.variant.ApplicationVariantData&apos; to class &apos;com.android.build.gradle.internal.variant.ApplicationVariantData&apos;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x867D;&#x7136;&#x4E24;&#x4E2A;&#x5BF9;&#x8C61;obj1&#x548C;obj2&#x7684;&#x7C7B;&#x7684;&#x540D;&#x5B57;&#x76F8;&#x540C;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E24;&#x4E2A;&#x7C7B;&#x662F;&#x7531;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5B9E;&#x4F8B;&#x6765;&#x52A0;&#x8F7D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x88AB;&#x865A;&#x62DF;&#x673A;&#x8BA4;&#x4E3A;&#x662F;&#x76F8;&#x540C;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x629B;&#x51FA;&#x4E86;ClassCastException&#x5F02;&#x5E38;&#x3002;&#x90A3;&#x4E48;&#x600E;&#x4E48;&#x89E3;&#x51B3;&#x5462;&#xFF0C;&#x5C06;&#x9879;&#x76EE;&#x4E2D;&#x6240;&#x6709;buildscript&#x4E2D;&#x7684;dependencies&#x4E0B;&#x5F15;&#x7528;&#x7684;android gradle plugin &#x7248;&#x672C;&#x90FD;&#x6539;&#x6210;&#x540C;&#x4E00;&#x4E2A;&#xFF0C;&#x5373;12345678buildscript { repositories { jcenter() } dependencies { classpath &quot;com.android.tools.build:gradle:${global_gradle_plugin_version}&quot; }}&#x4E4B;&#x540E;&#x5C06;~/.gradle/daemon/&#x76EE;&#x5F55;&#x4E0B;&#x5185;&#x5BB9;&#x5168;&#x90E8;&#x5220;&#x9664;&#xFF0C;&#x7136;&#x540E;&#x770B;&#x770B;&#x662F;&#x5426;&#x89E3;&#x51B3;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x89E3;&#x51B3;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x5220;&#x9664;~/.gradle/daemon/&#xFF0C;&#x7136;&#x540E;&#x91CD;&#x542F;&#x7535;&#x8111;&#x3002;TM&#x7684;&#x5982;&#x679C;&#x8FD8;&#x6CA1;&#x597D;&#xFF0C;&#x90A3;&#x4E48;&#x8BF7;&#x786E;&#x5B9A;&#x9879;&#x76EE;&#x4E2D;&#x6240;&#x6709;&#x5F15;&#x7528;&#x7684;&#x63D2;&#x4EF6;&#x4E2D;&#x7684;compile&#x7684;android gradle plugin&#x7248;&#x672C;&#x662F;&#x5426;&#x90FD;&#x4E00;&#x81F4;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4E00;&#x81F4;&#xFF0C;&#x8BF7;&#x4FDD;&#x6301;&#x4E00;&#x81F4;&#xFF0C;&#x4E0D;&#x7136;&#x4E5F;&#x6709;&#x95EE;&#x9898;&#x3002;&#x8FD9;&#x95EE;&#x9898;&#x5C31;&#x7B97;&#x5B8C;&#x4E8B;&#x4E86;&#xFF0C;&#x5927;&#x6982;&#x53EF;&#x80FD;&#x548C;Gradle&#x7684;&#x5B88;&#x62A4;&#x8FDB;&#x7A0B;&#x3001;&#x63D2;&#x4EF6;&#x5F15;&#x7528;&#x7684;android gradle plugin&#x7248;&#x672C;&#x4E0D;&#x4E00;&#x81F4;&#x6709;&#x90A3;&#x4E48;&#x4E00;&#x70B9;&#x5173;&#x7CFB;&#x3002;&#x65AD;&#x70B9;&#x8C03;&#x8BD5;&#x65B9;&#x5F0F;1&#x8BF4;&#x5B8C;&#x4E86;&#x4EE5;&#x4E0A;&#x5751;&#xFF0C;&#x6B63;&#x5F0F;&#x8FDB;&#x5165;&#x65AD;&#x70B9;&#x8C03;&#x8BD5;&#x7684;&#x73AF;&#x8282;&#xFF0C;&#x65B9;&#x5F0F;&#x4E00;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x76F4;&#x63A5;&#x5229;&#x7528;gradle&#x7684;&#x53C2;&#x6570;&#x8BA9;&#x5176;&#x7B49;&#x5F85;&#x6211;&#x4EEC;&#x7684;&#x8C03;&#x8BD5;&#x8FDB;&#x7A0B;attach&#x4E0A;&#x53BB;&#x3002;&#x6BD4;&#x5982;&#x6211;&#x8981;&#x6267;&#x884C;gradle clean&#x8FD9;&#x4E2A;task&#xFF0C;&#x5219;&#x52A0;&#x4E0A;&#x4E24;&#x4E2A;&#x989D;&#x5916;&#x53C2;&#x6570;&#x5373;&#x53EF;&#x4E00;&#x4E2A;&#x662F;&#x5F00;&#x542F;debug&#x4E00;&#x4E2A;&#x662F;&#x4E0D;&#x4F7F;&#x7528;&#x5B88;&#x62A4;&#x8FDB;&#x7A0B;&#x5177;&#x4F53;&#x4F8B;&#x5B50;&#x5982;&#x4E0B;&#xFF1A;1gradle :app:clean -Dorg.gradle.debug=true --no-daemon&#x4E4B;&#x540E;&#x8FD9;&#x4E2A;&#x8FDB;&#x7A0B;&#x5C31;&#x4F1A;&#x4E00;&#x76F4;&#x7B49;&#x5F85;&#xFF0C;&#x76F4;&#x5230;&#x6211;&#x4EEC;attach&#x6211;&#x4EEC;&#x7684;&#x8C03;&#x8BD5;&#x8FDB;&#x7A0B;&#x3002;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#xFF1A;&#x7136;&#x540E;&#x53C2;&#x8003;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;Intellij-IDEA&#x8FDC;&#x7A0B;&#x8C03;&#x8BD5;&#xFF0C;&#x5229;&#x7528;Android Studio&#x6216;&#x8005;Intellij IDEA&#x7684;remote debug&#x8FDB;&#x884C;&#x8C03;&#x8BD5;&#xFF0C;&#x7AEF;&#x53E3;&#x53F7;&#x586B;5005.&#x5982;&#x56FE;&#x7136;&#x540E;&#x8FD0;&#x884C;remote&#x4E4B;&#x540E;&#x5C31;&#x4F1A;attach&#x4E0A;&#x53BB;&#x6211;&#x4EEC;&#x7684;&#x8FDB;&#x7A0B;&#x7136;&#x540E;&#x770B;&#x770B;&#x6548;&#x679C;&#x4ECE;&#x6B64;&#x53EF;&#x4EE5;&#x6109;&#x5FEB;&#x7684;&#x65AD;&#x70B9;&#x8C03;&#x8BD5;&#x4E86;&#x3002;&#x65AD;&#x70B9;&#x8C03;&#x8BD5;&#x65B9;&#x5F0F;2&#x548C;&#x65B9;&#x5F0F;&#x4E00;&#x5DEE;&#x4E0D;&#x591A;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x4E0D;&#x662F;&#x7528;gradle&#x7684;&#x53C2;&#x6570;&#x6765;&#x5F00;&#x542F;debug&#xFF0C;&#x800C;&#x662F;&#x7528;&#x73AF;&#x5883;&#x53D8;&#x91CF;1export GRADLE_OPTS=&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&quot;&#x4E4B;&#x540E;&#x5C31;&#x8DDF;&#x6B63;&#x5E38;&#x6267;&#x884C;&#x4EFB;&#x52A1;&#x4E00;&#x6837;1gradle clean&#x5269;&#x4E0B;&#x7684;&#x64CD;&#x4F5C;&#x548C;&#x65B9;&#x5F0F;1&#x4E00;&#x6837;&#x3002;]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Gradle Plugin</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cmake 交叉编译]]></title>
    <url>%2F2017%2F06%2F27%2Fcmake-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;Android&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;google&#x5B98;&#x65B9;&#x51FA;&#x7684;android.toolchain.cmake&#x7B2C;&#x4E09;&#x65B9;android-cmake&#xFF0C;&#x53EF;&#x4EE5;&#x88AB;android.toolchain.cmake&#x517C;&#x5BB9;http://gitlab.vdian.net/WD-INPUT/toolchain/iOS&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;cristeab/ios-cmake&#xFF0C;&#x4E24;&#x4E09;&#x5E74;&#x6CA1;&#x66F4;&#x65B0;&#x4E86;leetal/ios-cmake&#xFF0C;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x524D;&#x7684;&#x51C6;&#x5907;clone&#x9879;&#x76EE;&#x5230;&#x672C;&#x5730;&#x67D0;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;android&#x7684;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;ndk&#x76EE;&#x5F55;&#x4E0B;&#x7684;cmake&#xFF0C;&#x4F4D;&#x4E8E;ndk/build/cmake/android.toolchain.cmake&#xFF1B;iOS&#x53EF;&#x4EE5;&#x4F7F;&#x7528;https://github.com/leetal/ios-cmake&#xFF0C;&#x5C06;&#x5176;clone&#x5230;&#x672C;&#x5730;&#x3002;Android&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;android&#x7684;cmake&#x5FC5;&#x987B;&#x4F7F;&#x7528;sdk&#x76EE;&#x5F55;&#x4E0B;&#x7684;cmake&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#xFF0C;google&#x5BF9;&#x5176;&#x4FEE;&#x6539;&#x4E86;&#x6E90;&#x7801;&#xFF0C;&#x5982;&#x679C;&#x4F7F;&#x7528;&#x7CFB;&#x7EDF;&#x7684;cmake&#xFF0C;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x7F16;&#x8BD1;&#x51FA;&#x9519;&#x751F;&#x6210;cmake&#x7F16;&#x8BD1;&#x6240;&#x9700;&#x7684;&#x6587;&#x4EF6;1234567891011121314151617181920212223242526272829#-H&#x6307;&#x5411;CMakeLists.txt&#x6587;&#x4EF6;&#x7236;&#x7EA7;&#x76EE;&#x5F55;#-B&#x6307;&#x5411;&#x4E2D;&#x95F4;&#x4EA7;&#x7269;&#x76EE;&#x5F55;#-DCMAKE_LIBRARY_OUTPUT_DIRECTORY&#x6307;&#x5411;so&#x8F93;&#x51FA;&#x76EE;&#x5F55;#-DCMAKE_TOOLCHAIN_FILE&#x6307;&#x5411;android.toolchain.cmake&#x6587;&#x4EF6;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;ndk&#x81EA;&#x5E26;&#x7684;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;clone&#x4E0B;&#x6765;&#x7684;&#x9879;&#x76EE;&#x4E2D;&#x7684;&#x6587;&#x4EF6;#-DANDROID_NDK&#x6307;&#x5411;ndk&#x76EE;&#x5F55;#-DANDROID_ABI&#x5B9A;&#x4E49;&#x76EE;&#x6807;cpu&#x7ED3;&#x6784;&#xFF0C;&#x53D6;&#x503C;armeabi&#xFF0C;armeabi-v7a&#xFF0C;arm64-v8a&#xFF0C;x86&#xFF0C;x86_64&#xFF0C;mips&#xFF0C;mips64&#x4E2D;&#x7684;&#x4E00;&#x4E2A;#-DCMAKE_BUILD_TYPE&#x5B9A;&#x4E49;&#x6784;&#x5EFA;&#x7C7B;&#x578B;&#xFF0C;&#x53D6;&#x503C;Debug&#x6216;Release&#xFF0C;Release&#x6784;&#x5EFA;&#x505A;-O3&#x4E09;&#x7EA7;&#x4F18;&#x5316;#-DANDROID_PLATFORM&#x5B9A;&#x4E49;&#x6700;&#x4F4E;api&#x7248;&#x672C;#-DANDROID_TOOLCHAIN&#x8868;&#x793A;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x94FE;&#x7C7B;&#x578B;&#xFF0C;&#x53D6;&#x503C;gcc&#x6216;&#x8005;clang&#xFF0C;gcc&#x5DF2;&#x7ECF;&#x88AB;&#x5E9F;&#x5F03;#-DANDROID_STL&#x6307;&#x660E;&#x4F7F;&#x7528;&#x7684;stl#-DCMAKE_C_FLAGS&#x4EE3;&#x8868;c&#x7F16;&#x8BD1;&#x5668;&#x53C2;&#x6570;#-DCMAKE_CXX_FLAGS&#x4EE3;&#x8868;c++&#x7F16;&#x8BD1;&#x5668;&#x53C2;&#x6570;#&#x66F4;&#x591A;&#x53C2;&#x6570;&#x89C1;google&#x5B98;&#x65B9;&#x6587;&#x6863; https://developer.android.com/ndk/guides/cmake.html#&#x5982;&#x679C;&#x9700;&#x8981;&#x4F7F;&#x7528;ninja&#x6784;&#x5EFA;&#xFF0C;&#x8FFD;&#x52A0;-GAndroid Gradle - Ninja&#x53C2;&#x6570;&#xFF0C;&#x8BE5;&#x53C2;&#x6570;&#x6807;&#x51C6;cmake&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#x4E0D;&#x652F;&#x6301;&#xFF0C;&#x53EA;&#x6709;sdk&#x4E0B;&#x7684;cmake&#x652F;&#x6301; /Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/cmake \-H&quot;../jni&quot; \-B&quot;../build/android/armeabi-v7a&quot; \-DANDROID_ABI=&quot;armeabi-v7a&quot; \-DANDROID_NDK=&quot;/Users/lizhangqu/AndroidNDK/android-ndk-r14b&quot; \-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=&quot;../build/android/libs/armeabi-v7a&quot; \-DCMAKE_BUILD_TYPE=&quot;Release&quot; \-DCMAKE_TOOLCHAIN_FILE=&quot;/Users/lizhangqu/AndroidNDK/android-ndk-r14b/build/cmake/android.toolchain.cmake&quot; \-DANDROID_PLATFORM=&quot;android-14&quot; \-DANDROID_TOOLCHAIN=&quot;clang&quot; \-DCMAKE_C_FLAGS=&quot;-fpic -fexceptions -frtti&quot; \-DCMAKE_CXX_FLAGS=&quot;-fpic -fexceptions -frtti&quot; \-DANDROID_STL=&quot;c++_static&quot; \#-GAndroid Gradle - Ninja #&#x9700;&#x8981;&#x652F;&#x6301;&#x81EA;&#x884C;&#x6253;&#x5F00;&#x6CE8;&#x91CA;clean&#x53CA;&#x6784;&#x5EFA;&#x76EE;&#x6807;&#x4EA7;&#x7269;123456789101112131415#--build&#x4EE3;&#x8868;cmake&#x751F;&#x6210;&#x7684;&#x4E2D;&#x95F4;&#x4EA7;&#x7269;&#x76EE;&#x5F55;&#xFF0C;&#x5373;&#x4E0A;&#x9762;-B&#x6307;&#x5B9A;&#x7684;&#x76EE;&#x5F55;#--target&#x4EE3;&#x8868;&#x6784;&#x5EFA;&#x54EA;&#x4E2A;target#-- -j4&#x4EE3;&#x8868;&#x6267;&#x884C;make&#x7684;&#x65F6;&#x5019;&#x8FFD;&#x52A0;-j4&#xFF0C;&#x5E76;&#x884C;&#x7F16;&#x8BD1; #clean /Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/cmake \--build &quot;../build/android/armeabi-v7a&quot; \--target clean # build your target/Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/cmake \--build &quot;../build/android/armeabi-v7a&quot; \--target &#x6784;&#x5EFA;&#x7684;&#x76EE;&#x6807;target \-- -j4iOS&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x751F;&#x6210;cmake&#x7F16;&#x8BD1;&#x6240;&#x9700;&#x7684;&#x6587;&#x4EF6;1234567891011121314151617#-H&#x6307;&#x5411;CMakeLists.txt&#x6587;&#x4EF6;&#x7236;&#x7EA7;&#x76EE;&#x5F55;#-B&#x6307;&#x5411;&#x4E2D;&#x95F4;&#x4EA7;&#x7269;&#x76EE;&#x5F55;#-DCMAKE_BUILD_TYPE&#x5B9A;&#x4E49;&#x6784;&#x5EFA;&#x7C7B;&#x578B;&#xFF0C;&#x53D6;&#x503C;Debug&#x6216;Release&#xFF0C;Release&#x6784;&#x5EFA;&#x505A;-O3&#x4E09;&#x7EA7;&#x4F18;&#x5316;#-DIOS_PLATFORM&#x5B9A;&#x4E49;&#x6784;&#x5EFA;&#x7684;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#xFF0C;OS&#x8868;&#x793A;&#x6784;&#x5EFA;iPhoneOS&#x6240;&#x9700;&#x7684;lib&#xFF0C;SIMULATOR&#x4EE3;&#x8868;&#x6784;&#x5EFA;x86&#x6A21;&#x62DF;&#x5668;&#x6240;&#x9700;&#x7684;lib&#xFF0C;SIMULATOR64&#x4EE3;&#x8868;&#x6784;&#x5EFA;x86_64&#x6A21;&#x62DF;&#x5668;&#x6240;&#x9700;&#x7684;lib#-DCMAKE_TOOLCHAIN_FILE&#x6307;&#x5411;ios.toolchain.cmake&#x6587;&#x4EF6;&#xFF0C;&#x4F7F;&#x7528;clone&#x4E0B;&#x6765;&#x7684;&#x9879;&#x76EE;&#x4E2D;&#x7684;&#x6587;&#x4EF6;cmake \-H&quot;../jni&quot; \-B&quot;../build/ios&quot; \-DCMAKE_BUILD_TYPE=&quot;Release&quot; \-DCMAKE_TOOLCHAIN_FILE=&quot;../toolchain/ios.toolchain.cmake&quot; \-DIOS_PLATFORM=OS# IOS_PLATFORM# OS = Build for iPhoneOS.# SIMULATOR = Build for x86 i386 iPhone Simulator.# SIMULATOR64 = Build for x86 x86_64 iPhone Simulator.# CMAKE_BUILD_TYPE# Debug or Releaseclean&#x53CA;&#x6784;&#x5EFA;&#x76EE;&#x6807;&#x4EA7;&#x7269;12345678910111213141516#--build&#x4EE3;&#x8868;cmake&#x751F;&#x6210;&#x7684;&#x4E2D;&#x95F4;&#x4EA7;&#x7269;&#x76EE;&#x5F55;&#xFF0C;&#x5373;&#x4E0A;&#x9762;-B&#x6307;&#x5B9A;&#x7684;&#x76EE;&#x5F55;#--target&#x4EE3;&#x8868;&#x6784;&#x5EFA;&#x54EA;&#x4E2A;target#-- -j4&#x4EE3;&#x8868;&#x6267;&#x884C;make&#x7684;&#x65F6;&#x5019;&#x8FFD;&#x52A0;-j4&#xFF0C;&#x5E76;&#x884C;&#x7F16;&#x8BD1; #clean cmake \--build &quot;../build/android/armeabi-v7a&quot; \--target clean # build your targetcmake \--build &quot;../build/ios&quot; \--target &#x6784;&#x5EFA;&#x7684;&#x76EE;&#x6807;target \-- -j4]]></content>
      <categories>
        <category>cmake</category>
      </categories>
      <tags>
        <tag>cmake</tag>
        <tag>Android，ndk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Gradle Plugin 源码解析之 externalNativeBuild]]></title>
    <url>%2F2017%2F06%2F24%2FAndroid-Gradle-Plugin%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8BexternalNativeBuild%2F</url>
    <content type="text"><![CDATA[&#x5728;Android Studio 2.2&#x5F00;&#x59CB;&#x7684;Android Gradle Plugin&#x7248;&#x672C;&#x4E2D;&#xFF0C;Google&#x96C6;&#x6210;&#x4E86;&#x5BF9;cmake&#x7684;&#x5B8C;&#x7F8E;&#x652F;&#x6301;&#xFF0C;&#x800C;&#x539F;&#x5148;&#x7684;ndkBuild&#x7684;&#x65B9;&#x5F0F;&#x652F;&#x6301;&#x4E5F;&#x53D8;&#x5F97;&#x66F4;&#x52A0;&#x826F;&#x597D;&#x3002;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x5C31;&#x6765;&#x8BF4;&#x8BF4;Android Gradle Plugin&#x4E0E;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x4E9B;&#x4E8B;&#xFF0C;&#x5373;externalNativeBuild&#x76F8;&#x5173;&#x7684;task&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x89E3;&#x8BFB;&#x4E00;&#x4E0B;gradle&#x6784;&#x5EFA;&#x7CFB;&#x7EDF;&#x76F8;&#x5173;&#x7684;&#x6E90;&#x7801;&#x3002;&#x524D;&#x8A00;&#x5982;&#x679C;&#x4F60;&#x5728;gradle&#x4E2D;&#x4F7F;&#x7528;&#x8FC7;cmake&#xFF0C;&#x4F60;&#x4F1A;&#x53D1;&#x73B0;&#x5728;gradle&#x6267;&#x884C;sync&#x64CD;&#x4F5C;&#x540E;&#xFF0C;&#x9879;&#x76EE;&#x7684;module&#x76EE;&#x5F55;&#x4E0B;&#x5C31;&#x4F1A;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x53EB;.externalNativeBuild&#x7684;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x8BE5;&#x6587;&#x4EF6;&#x5939;&#x7528;&#x6765;&#x8FDB;&#x884C;C/C++&#x4EE3;&#x7801;&#x7684;&#x7F16;&#x8BD1;&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x7528;&#x7684;&#x662F;ndkBuild&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x8BE5;&#x6587;&#x4EF6;&#x5939;&#x4E0B;&#x7684;&#x6587;&#x4EF6;&#x4F1A;&#x53D1;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x6587;&#x4EF6;&#x8F83;cmake&#x4F1A;&#x5C11;&#x5F88;&#x591A;&#x3002;cmake&#x65B9;&#x5F0F;&#x4EA7;&#x751F;&#x7684;&#x6587;&#x4EF6;&#x5217;&#x8868;&#x5982;&#x4E0B;&#xFF1A;&#x800C;ndkBuild&#x65B9;&#x5F0F;&#x4EA7;&#x751F;&#x7684;&#x6587;&#x4EF6;&#x5217;&#x8868;&#x5982;&#x4E0B;&#xFF1A;&#x4ED6;&#x4EEC;&#x7684;&#x5171;&#x540C;&#x70B9;&#x662F;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x53EB;android_gradle_build.json&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x7528;&#x6765;&#x88AB;Android Gradle Plugin&#x4E2D;&#x7684;externalNativeBuild&#x4EFB;&#x52A1;&#x89E3;&#x6790;&#xFF0C;&#x5C06;&#x6784;&#x5EFA;&#x547D;&#x4EE4;&#x89E3;&#x6790;&#x51FA;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x7F16;&#x8BD1;C/C++&#x4EE3;&#x7801;&#xFF0C;&#x6700;&#x540E;&#x4EA7;&#x751F;&#x76EE;&#x6807;so&#x6587;&#x4EF6;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;&#x8FD8;&#x6709;x_build_command.txt&#x548C;x_build_output.txt&#x4E24;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x5176;&#x4E2D;x&#x8868;&#x793A;&#x6784;&#x5EFA;&#x65B9;&#x5F0F;&#xFF0C;&#x4F7F;&#x7528;cmake&#x7684;&#x8BDD;x&#x5C31;&#x7B49;&#x4E8E;cmake&#xFF0C;&#x4F7F;&#x7528;ndkBuild&#x7684;&#x8BDD;x&#x5C31;&#x7B49;&#x4E8E;ndkBuild&#x3002;x_build_command.txt&#x6587;&#x4EF6;&#x627F;&#x8F7D;&#x7740;&#x6784;&#x5EFA;&#x547D;&#x4EE4;&#xFF0C;android_gradle_build.json&#x7684;&#x751F;&#x6210;&#x4F9D;&#x8D56;&#x5B83;&#xFF0C;&#x800C;x_build_output.txt&#x6587;&#x4EF6;&#x662F;&#x6267;&#x884C;x_build_command.txt&#x4E2D;&#x7684;&#x6784;&#x5EFA;&#x547D;&#x4EE4;&#x540E;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x51FA;&#x7684;&#x5185;&#x5BB9;&#x3002;cmake&#x901A;&#x8FC7;&#x67E5;&#x770B;android gradle plugin&#x7684;&#x6E90;&#x7801;&#xFF0C;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#x751F;&#x6210;cmake_build_command.txt&#x6587;&#x4EF6;&#x751F;&#x6210;&#x7684;&#x65B9;&#x5F0F;&#x5176;&#x5B9E;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x65AD;&#x62FC;&#x63A5;&#x53C2;&#x6570;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x5176;&#x6E90;&#x7801;&#x5728;CmakeExternalNativeJsonGenerator&#x4E2D;&#x7684;getProcessBuilder&#xFF0C;&#x5982;&#x4E0B;&#xFF1A;1234567891011121314151617181920212223242526272829303132333435363738394041424344@NonNull@OverrideProcessInfoBuilder getProcessBuilder(@NonNull String abi, int abiPlatformVersion, @NonNull File outputJson) { checkConfiguration(); ProcessInfoBuilder builder = new ProcessInfoBuilder(); // CMake requires a folder. Trim the filename off. File cmakeListsFolder = getMakefile().getParentFile(); builder.setExecutable(getCmakeExecutable()); builder.addArgs(String.format(&quot;-H%s&quot;, cmakeListsFolder)); builder.addArgs(String.format(&quot;-B%s&quot;, outputJson.getParentFile())); // TODO: possibly remove the Android Gradle part. // Depends on how upstream CMake accepts our JSON patch. builder.addArgs(&quot;-GAndroid Gradle - Ninja&quot;); builder.addArgs(String.format(&quot;-DANDROID_ABI=%s&quot;, abi)); builder.addArgs(String.format(&quot;-DANDROID_NDK=%s&quot;, getNdkFolder())); builder.addArgs( String.format(&quot;-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=%s&quot;, new File(getObjFolder(), abi))); builder.addArgs( String.format(&quot;-DCMAKE_BUILD_TYPE=%s&quot;, isDebuggable() ? &quot;Debug&quot; : &quot;Release&quot;)); builder.addArgs(String.format(&quot;-DCMAKE_MAKE_PROGRAM=%s&quot;, getNinjaExecutable().getAbsolutePath())); builder.addArgs(String.format(&quot;-DCMAKE_TOOLCHAIN_FILE=%s&quot;, getToolChainFile().getAbsolutePath())); builder.addArgs(String.format(&quot;-DANDROID_PLATFORM=android-%s&quot;, abiPlatformVersion)); if (!getcFlags().isEmpty()) { builder.addArgs(String.format(&quot;-DCMAKE_C_FLAGS=%s&quot;, Joiner.on(&quot; &quot;).join(getcFlags()))); } if (!getCppFlags().isEmpty()) { builder.addArgs(String.format(&quot;-DCMAKE_CXX_FLAGS=%s&quot;, Joiner.on(&quot; &quot;).join(getCppFlags()))); } for (String argument : getBuildArguments()) { builder.addArgs(argument); } return builder;}&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;ProcessInfoBuilder&#xFF0C;&#x8BE5;&#x5BF9;&#x8C61;&#x4E13;&#x95E8;&#x7528;&#x4E8E;&#x643A;&#x5E26;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#x4EE5;&#x53CA;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#x6267;&#x884C;&#x65F6;&#x9700;&#x8981;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4F20;&#x9012;&#x7ED9;project.exec&#x6267;&#x884C;&#x3002;&#x8BBE;&#x7F6E;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#x4E3A;cmake&#xFF0C;&#x8C03;&#x7528;getCmakeExecutable&#x65B9;&#x6CD5;&#xFF0C;&#x83B7;&#x53D6;cmake&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#xFF0C;&#x8C03;&#x7528;setExecutable&#x65B9;&#x6CD5;&#x8BBE;&#x7F6E;&#x5B83;&#x62FC;&#x63A5;-H&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x4E3A;CMakeList.txt&#x6587;&#x4EF6;&#x6240;&#x5728;&#x76EE;&#x5F55;&#x62FC;&#x63A5;-B&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x4E3A;cmake&#x4EA7;&#x751F;&#x7684;&#x4E2D;&#x95F4;&#x4EA7;&#x7269;&#xFF0C;&#x4E00;&#x822C;&#x5C31;&#x662F;cmake_build_command.txt&#x6240;&#x5728;&#x76EE;&#x5F55;&#x7684;&#x7236;&#x76EE;&#x5F55;&#xFF0C;cmake&#x6784;&#x5EFA;&#x4EA7;&#x751F;&#x7684;&#x4E2D;&#x95F4;&#x4EA7;&#x7269;&#x5168;&#x90FD;&#x4F4D;&#x4E8E;&#x6B64;&#x76EE;&#x5F55;&#x3002;&#x62FC;&#x63A5;-G&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x4E3A;Android Gradle - Ninja&#xFF0C;&#x544A;&#x8BC9;cmake&#x751F;&#x6210;Android Gradle&#x9700;&#x8981;&#x7684;&#x9879;&#x76EE;&#x6587;&#x4EF6;&#xFF0C;&#x5E76;&#x4E14;&#x4F7F;&#x7528;ninja&#x6784;&#x5EFA;&#xFF0C;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x8BE5;&#x503C;&#x5728;&#x6807;&#x51C6;&#x7684;cmake&#x4E2D;&#x662F;&#x4E0D;&#x652F;&#x6301;&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;as&#x4F7F;&#x7528;&#x7684;cmake&#x662F;google&#x4FEE;&#x6539;&#x8FC7;&#x7684;&#xFF0C;&#x901A;&#x8FC7;&#x67E5;&#x770B;&#x5176;&#x6CE8;&#x91CA; possibly remove the Android Gradle part. Depends on how upstream CMake accepts our JSON patch. &#x4E5F;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;google&#x53EF;&#x80FD;&#x4F1A;&#x79FB;&#x9664;&#x8BE5;&#x503C;&#x4E2D;Android Gradle&#x90E8;&#x5206;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x662F;&#x8981;&#x53D6;&#x51B3;&#x4E8E;cmake&#x5982;&#x679C;&#x63A5;&#x53D7;google&#x7684;patch&#x3002;&#x8BBE;&#x7F6E;ANDROID_ABI&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x4E3A;armeabi&#xFF0C;armeabi-v7a&#xFF0C;arm64-v8a&#xFF0C;x86&#xFF0C;x86_64&#xFF0C;mips&#xFF0C;mips64&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x3002;&#x8BBE;&#x7F6E;ANDROID_NDK&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x4E3A;ndk&#x7684;&#x8DEF;&#x5F84;&#x3002;&#x8BBE;&#x7F6E;CMAKE_LIBRARY_OUTPUT_DIRECTORY&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x4E3A;so&#x7684;&#x8F93;&#x51FA;&#x8DEF;&#x5F84;&#xFF0C;&#x4E00;&#x822C;&#x5176;&#x503C;&#x4E3A;&#x9879;&#x76EE;&#x7684;build&#x8DEF;&#x5F84;&#x4E0B;&#x7684;intermediates/cmake/debug/obj/$ANDROID_ABI&#x8BBE;&#x7F6E;CMAKE_BUILD_TYPE&#x53C2;&#x6570;&#xFF0C;&#x662F;&#x5426;&#x662F;debug&#xFF0C;&#x5176;&#x503C;&#x4E3A;Debug&#x6216;&#x8005;Release&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#xFF0C;debug&#x542B;&#x7B26;&#x53F7;&#x4FE1;&#x606F;&#xFF0C;so&#x5F88;&#x5927;&#xFF0C;&#x4FBF;&#x4E8E;&#x8C03;&#x8BD5;&#xFF0C;Release&#x79FB;&#x9664;&#x4E86;debug&#x4FE1;&#x606F;&#xFF0C;&#x5C0F;&#x5F88;&#x591A;&#x3002;&#x5176;&#x503C;&#x6765;&#x6E90;&#x4E8E;build.gradle&#x4E2D;&#x7684;debuggable&#x503C;&#x3002;&#x8BBE;&#x7F6E;CMAKE_MAKE_PROGRAM&#x53C2;&#x6570;&#x3002;&#x5176;&#x503C;&#x4E3A;ninja&#x8DEF;&#x5F84;&#xFF0C;&#x56E0;&#x4E3A;&#x751F;&#x6210;&#x7684;&#x662F;ninja&#x6784;&#x5EFA;&#x7684;&#x9879;&#x76EE;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x6307;&#x5B9A;&#x5176;&#x8DEF;&#x5F84;&#x3002;&#x8BE5;&#x503C;gradle&#x4F1A;&#x6839;&#x636E;sdk&#x548C;ndk&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x81EA;&#x52A8;&#x63A8;&#x65AD;&#x51FA;&#x3002;&#x8BBE;&#x7F6E;CMAKE_TOOLCHAIN_FILE&#x53C2;&#x6570;&#xFF0C;&#x8BE5;&#x53C2;&#x6570;&#x662F;cmake&#x7528;&#x4E8E;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x65F6;&#x8BBE;&#x7F6E;&#x7684;&#x5FC5;&#x8981;&#x53C2;&#x6570;&#xFF0C;&#x4E3B;&#x8981;&#x8BBE;&#x7F6E;&#x4E00;&#x4E9B;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x9700;&#x8981;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5982;CC&#xFF0C;CXX&#xFF0C;AR&#xFF0C;AS&#xFF0C;CFLAGS&#xFF0C;CXXFLAGS&#x7B49;&#xFF0C;&#x53EF;&#x4EE5;&#x67E5;&#x770B;NDK &#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5E38;&#x7528;&#x53D8;&#x91CF;&#xFF0C;android.toolchain.cmake&#x6587;&#x4EF6;&#x7684;&#x4EE3;&#x7801;&#x5728;android.toolchain.cmake&#xFF0C;&#x517C;&#x5BB9;android-cmake&#xFF0C;&#x8BE5;&#x503C;gradle&#x4F1A;&#x6839;&#x636E;sdk&#x548C;ndk&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x81EA;&#x52A8;&#x63A8;&#x65AD;&#x51FA;&#x3002;&#x8BBE;&#x7F6E;ANDROID_PLATFORM&#x53C2;&#x6570;&#xFF0C;&#x4E00;&#x822C;&#x8BBE;&#x6210;&#x548C;&#x9879;&#x76EE;&#x7684;&#x6700;&#x5C0F;api&#x7248;&#x672C;&#x4E00;&#x6837;&#x5373;&#x53EF;&#xFF0C;gradle&#x4F1A;&#x901A;&#x8FC7;&#x5B83;&#x548C;minSdk&#x67E5;&#x627E;&#x51FA;&#x5408;&#x9002;&#x7684;&#x503C;&#x8BBE;&#x7F6E;&#x53EF;&#x9009;&#x9879;CMAKE_C_FLAGS&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x8BBE;&#x7F6E;&#xFF0C;&#x5176;&#x503C;&#x4E3A;&#x7F16;&#x8BD1;C&#x65F6;&#x7684;&#x4E00;&#x4E9B;&#x53C2;&#x6570;&#x8BBE;&#x7F6E;&#x53EF;&#x9009;&#x9879;CMAKE_CXX_FLAGS&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x8BBE;&#x7F6E;&#xFF0C;&#x5176;&#x503C;&#x4E3A;&#x7F16;&#x8BD1;C++&#x65F6;&#x7684;&#x4E00;&#x4E9B;&#x53C2;&#x6570;&#x8BBE;&#x7F6E;&#x53EF;&#x9009;&#x9879;arguments&#xFF0C;&#x5176;&#x503C;&#x4E3A;gradle&#x4F20;&#x8FDB;&#x6765;&#x7684;arguments&#x53C2;&#x6570;&#x3002;&#x66F4;&#x591A;&#x53C2;&#x6570;&#x8BF4;&#x660E;&#x89C1;CMake&#x7136;&#x540E;&#x5C06;&#x8BE5;&#x8FD4;&#x56DE;&#x503C;&#x8F6C;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x8F93;&#x51FA;&#x5230;&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x8BE5;&#x6587;&#x4EF6;&#x5373;cmake_build_command.txt&#x5176;&#x5185;&#x5BB9;&#x5927;&#x81F4;&#x5982;&#x4E0B;:12345678910111213141516Executable : /Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/cmakearguments : -Hpath/to/CMakeFiles Parent Dir-Bpath/to/moduleDir/.externalNativeBuild/cmake/debug/armeabi-v7a-GAndroid Gradle - Ninja-DANDROID_ABI=armeabi-v7a-DANDROID_NDK=/Users/lizhangqu/AndroidNDK/android-ndk-r14b-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=path/to/moduleDir/build/intermediates/cmake/debug/obj/armeabi-v7a-DCMAKE_BUILD_TYPE=Debug-DCMAKE_MAKE_PROGRAM=/Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/ninja-DCMAKE_TOOLCHAIN_FILE=/Users/lizhangqu/AndroidNDK/android-ndk-r14b/build/cmake/android.toolchain.cmake-DANDROID_PLATFORM=android-14-DCMAKE_C_FLAGS=-fpic -fexceptions -frtti-DCMAKE_CXX_FLAGS=-fpic -fexceptions -frtti-DANDROID_STL=c++_staticjvmArgs :&#x5F53;&#x7136;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5728;&#x547D;&#x4EE4;&#x884C;&#x8C03;&#x7528;&#x4E4B;&#xFF0C;&#x751F;&#x6210;cmake&#x9879;&#x76EE;&#x7ED3;&#x6784;&#xFF0C;&#x5982;&#x4E0B;1234567891011121314/Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/cmake \-H&quot;path/to/CMakeFiles Parent Dir&quot; \-B&quot;path/to/moduleDir/.externalNativeBuild/cmake/debug/armeabi-v7a&quot; \-G&quot;Android Gradle - Ninja&quot; \-DANDROID_ABI=&quot;armeabi-v7a&quot; \-DANDROID_NDK=&quot;/Users/lizhangqu/AndroidNDK/android-ndk-r14b&quot; \-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=&quot;path/to/moduleDir/build/intermediates/cmake/debug/obj/armeabi-v7a&quot; \-DCMAKE_BUILD_TYPE=&quot;Debug&quot; \-DCMAKE_MAKE_PROGRAM=&quot;/Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/ninja&quot; \-DCMAKE_TOOLCHAIN_FILE=&quot;/Users/lizhangqu/AndroidNDK/android-ndk-r14b/build/cmake/android.toolchain.cmake&quot; \-DANDROID_PLATFORM=&quot;android-14&quot; \-DCMAKE_C_FLAGS=&quot;-fpic -fexceptions -frtti&quot; \-DCMAKE_CXX_FLAGS=&quot;-fpic -fexceptions -frtti&quot; \-DANDROID_STL=&quot;c++_static&quot;&#x5176;&#x5BF9;&#x5E94;&#x7684;gradle&#x8C03;&#x7528;&#x4EE3;&#x7801;&#x5927;&#x81F4;&#x5982;&#x4E0B;12345// See whether the current build command matches a previously written build command.String currentBuildCommand = processBuilder.toString();boolean rebuildDueToMissingPreviousCommand = false;File commandFile = new File(expectedJson.getParentFile(), String.format(&quot;%s_build_command.txt&quot;, getNativeBuildSystem().getName()));&#x5C31;&#x662F;&#x5C06;processBuilder&#x5BF9;&#x8C61;&#x4E2D;&#x643A;&#x5E26;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x8C03;&#x7528;project.exec&#x6267;&#x884C;&#x5373;&#x53EF;&#x3002;12345678String buildOutput = executeProcess(processBuilder);// Write the captured process output to a file for diagnostic purposes.File outputTextFile = new File( expectedJson.getParentFile(), String.format(&quot;%s_build_output.txt&quot;, getNativeBuildSystem().getName()));diagnostic(&quot;write build output %s&quot;, outputTextFile.getAbsolutePath());Files.write(buildOutput, outputTextFile, Charsets.UTF_8);executeProcess&#x6267;&#x884C;&#x5B8C;&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x4F1A;&#x4EA7;&#x751F;cmake_build_output.txt&#x6587;&#x4EF6;&#xFF0C;&#x8BE5;&#x6587;&#x4EF6;&#x5C31;&#x662F;&#x6267;&#x884C;cmake_build_command.txt&#x4E2D;&#x7684;&#x547D;&#x4EE4;&#x4E4B;&#x540E;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x51FA;&#x7684;&#x5185;&#x5BB9;&#x3002;&#x5927;&#x81F4;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415-- Check for working C compiler: /Users/lizhangqu/AndroidNDK/android-ndk-r14b/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang-- Check for working C compiler: /Users/lizhangqu/AndroidNDK/android-ndk-r14b/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang -- works-- Detecting C compiler ABI info-- Detecting C compiler ABI info - done-- Detecting C compile features-- Detecting C compile features - done-- Check for working CXX compiler: /Users/lizhangqu/AndroidNDK/android-ndk-r14b/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang++-- Check for working CXX compiler: /Users/lizhangqu/AndroidNDK/android-ndk-r14b/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang++ -- works-- Detecting CXX compiler ABI info-- Detecting CXX compiler ABI info - done-- Detecting CXX compile features-- Detecting CXX compile features - done-- Configuring done-- Generating done-- Build files have been written to: path/to/moduleDir/.externalNativeBuild/cmake/debug/armeabi-v7a&#x6B64;&#x5916;&#xFF0C;&#x5176;&#x4ED6;&#x6587;&#x4EF6;&#x4E5F;&#x88AB;&#x4E00;&#x5E76;&#x4EA7;&#x751F;&#xFF0C;&#x5982;android_gradle_build.json&#xFF0C;build.ninja&#xFF0C;cmake_insatll.cmake&#xFF0C;CMakeCache.txt&#xFF0C;rules.ninja&#xFF0C;CMakefiles&#x6587;&#x4EF6;&#x5939;&#x7B49;&#x7B49;&#x3002;&#x800C;executeProcess&#x65B9;&#x6CD5;&#xFF0C;&#x6700;&#x7EC8;&#x8C03;&#x7528;&#x7684;&#x662F;GradleProcessExecutor&#x7684;execute&#x65B9;&#x6CD5;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x5176;&#x5185;&#x90E8;&#x7C7B;ExecAction&#x7684;execute&#x65B9;&#x6CD5;&#x6784;&#x9020;ExecSpec&#x5BF9;&#x8C61;&#xFF0C;&#x8C03;&#x7528;project.exec&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x4E4B;&#x3002;&#x5176;&#x5927;&#x81F4;&#x6E90;&#x7801;&#x5982;&#x4E0B;:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859@NonNull@Overridepublic ProcessResult execute( @NonNull ProcessInfo processInfo, @NonNull ProcessOutputHandler processOutputHandler) { ProcessOutput output = processOutputHandler.createOutput(); ExecResult result; try { result = project.exec(new ExecAction(processInfo, output)); } finally { try { output.close(); } catch (IOException e) { project.getLogger().warn(&quot;Exception while closing sub process streams&quot;, e); } } try { processOutputHandler.handleOutput(output); } catch (final ProcessException e) { return new OutputHandlerFailedGradleProcessResult(e); } return new GradleProcessResult(result, processInfo);}private static class ExecAction implements Action&lt;ExecSpec&gt; { @NonNull private final ProcessInfo processInfo; @NonNull private final ProcessOutput processOutput; ExecAction(@NonNull final ProcessInfo processInfo, @NonNull final ProcessOutput processOutput) { this.processInfo = processInfo; this.processOutput = processOutput; } @Override public void execute(ExecSpec execSpec) { /* * Gradle doesn&apos;t work correctly when there are empty args. */ List&lt;String&gt; args = processInfo.getArgs().stream() .map(a -&gt; a.isEmpty()? &quot;\&quot;\&quot;&quot; : a) .collect(Collectors.toList()); execSpec.setExecutable(processInfo.getExecutable()); execSpec.args(args); execSpec.environment(processInfo.getEnvironment()); execSpec.setStandardOutput(processOutput.getStandardOutput()); execSpec.setErrorOutput(processOutput.getErrorOutput()); // we want the caller to be able to do its own thing. execSpec.setIgnoreExitValue(true); }}json&#x6587;&#x4EF6;&#x751F;&#x6210;&#x4E86;&#xFF0C;&#x4E4B;&#x540E;&#x5C31;&#x662F;&#x751F;&#x4EA7;so&#x6587;&#x4EF6;&#x4E86;&#xFF0C;&#x751F;&#x6210;so&#x6587;&#x4EF6;&#x7531;ExternalNativeBuildTask&#x8D1F;&#x8D23;&#xFF0C;&#x5176;&#x4E3B;&#x8981;&#x804C;&#x8D23;&#x5C31;&#x662F;&#x89E3;&#x6790;&#x51FA;android_gradle_build.json&#x6587;&#x4EF6;&#x4E2D;libraries&#x7684;&#x5404;&#x9879;&#x4E2D;&#x7684;&#x7684;artifactName&#x548C;buildCommand&#xFF0C;&#x4F20;&#x5165;&#x5BF9;&#x5E94;&#x7684;executeProcessBatch&#x51FD;&#x6570;&#xFF0C;&#x6267;&#x884C;buildCommand&#x4E2D;&#x7684;&#x503C;&#xFF0C;&#x6267;&#x884C;&#x7684;&#x65B9;&#x5F0F;&#x4E5F;&#x662F;&#x901A;&#x8FC7;GradleProcessExecutor&#x7684;execute&#x65B9;&#x6CD5;&#xFF0C;&#x6700;&#x7EC8;&#x4EA7;&#x751F;so&#x3002;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x770B;android_gradle_build.json&#x7684;&#x5927;&#x81F4;&#x5185;&#x5BB9;&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051{ &quot;buildFiles&quot; : [ &quot;path/to/CMakeLists.txt&quot; ], &quot;cleanCommands&quot; : [ &quot;/Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/cmake --build path/to/.externalNativeBuild/cmake/debug/armeabi-v7a --target clean&quot; ], &quot;cppFileExtensions&quot; : [&quot;cpp&quot; ], &quot;libraries&quot; : { &quot;so&#x540D;&#x5B57;-Debug-armeabi-v7a&quot; : { &quot;abi&quot; : &quot;armeabi-v7a&quot;, &quot;artifactName&quot; : &quot;so&#x540D;&#x5B57;&quot;, &quot;buildCommand&quot; : &quot;/Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/cmake --build path/to/.externalNativeBuild/cmake/debug/armeabi-v7a --target so&#x540D;&#x5B57;&quot;, &quot;buildType&quot; : &quot;debug&quot;, &quot;files&quot; : [ { &quot;flags&quot; : &quot;&#x5185;&#x5BB9;&quot;, &quot;src&quot; : &quot;&#x5185;&#x5BB9;&quot;, &quot;workingDirectory&quot; : &quot;path/to/.externalNativeBuild/cmake/debug/armeabi-v7a&quot; }, { &quot;flags&quot; : &quot;&#x5185;&#x5BB9;&quot;, &quot;src&quot; : &quot;&#x5185;&#x5BB9;&quot;, &quot;workingDirectory&quot; : &quot;path/to/.externalNativeBuild/cmake/debug/armeabi-v7a&quot; }, { &quot;flags&quot; : &quot;&#x5185;&#x5BB9;&quot;, &quot;src&quot; : &quot;&#x5185;&#x5BB9;&quot;, &quot;workingDirectory&quot; : &quot;path/to/.externalNativeBuild/cmake/debug/armeabi-v7a&quot; } ], &quot;output&quot; : &quot;path/to/build/intermediates/cmake/debug/obj/armeabi-v7a/so&#x540D;&#x5B57;.so&quot;, &quot;toolchain&quot; : &quot;12644252315582812689&quot; } }, &quot;toolchains&quot; : { &quot;12644252315582812689&quot; : { &quot;cCompilerExecutable&quot; : &quot;/Users/lizhangqu/AndroidNDK/android-ndk-r14b/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang&quot;, &quot;cppCompilerExecutable&quot; : &quot;/Users/lizhangqu/AndroidNDK/android-ndk-r14b/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang++&quot; } }}&#x6CA1;&#x9519;&#x89E3;&#x6790;&#x7684;&#x5C31;&#x662F;libraries&#x4E0B;&#x201D;so&#x540D;&#x5B57;-Debug-armeabi-v7a&#x201D;&#x4E0B;&#x7684;artifactName&#x548C;buildCommand&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BD5;&#x8BD5;&#x76F4;&#x63A5;&#x5C06;buildCommand&#x4E2D;&#x7684;&#x547D;&#x4EE4;&#x590D;&#x5236;&#x5230;&#x547D;&#x4EE4;&#x884C;&#x6267;&#x884C;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x5230;so&#x5C31;&#x4F1A;&#x7F16;&#x8BD1;&#x4EA7;&#x751F;&#x3002;&#x9664;&#x4E86;&#x76F4;&#x63A5;&#x590D;&#x5236;buildCommand&#x4E2D;&#x7684;&#x547D;&#x4EE4;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x8FDB;&#x5165;&#x5230;cmake&#x751F;&#x6210;&#x7684;&#x6587;&#x4EF6;&#x76EE;&#x5F55;&#xFF0C;&#x5373;-B&#x6307;&#x5B9A;&#x7684;&#x76EE;&#x5F55;&#xFF0C;&#x8C03;&#x7528;ninja&#x8FDB;&#x884C;&#x6784;&#x5EFA;&#x3002;&#x5982;&#xFF1A;123/Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/ninja clean/Users/lizhangqu/AndroidSDK/cmake/3.6.3155560/bin/ninjaninja&#x662F;chromium&#x7684;&#x6838;&#x5FC3;&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;Ninja - chromium&#x6838;&#x5FC3;&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#x5B66;&#x4E60;&#x4E0B;&#x76F8;&#x5173;&#x7684;&#x5185;&#x5BB9;&#x3002;&#x800C;clean&#x64CD;&#x4F5C;&#xFF0C;&#x5219;&#x7531;ExternalNativeCleanTask&#x8D1F;&#x8D23;&#xFF0C;&#x5176;&#x4E3B;&#x8981;&#x804C;&#x8D23;&#x5C31;&#x662F;&#x89E3;&#x6790;&#x51FA;android_gradle_build.json&#x4E2D;&#x7684;cleanCommands&#x547D;&#x4EE4;&#xFF0C;&#x7136;&#x540E;&#x6267;&#x884C;&#x3002;ndkBuild&#x548C;cmake&#x7C7B;&#x4F3C;&#xFF0C;&#x9996;&#x5148;&#x5C31;&#x662F;ndkBuild_build_command.txt&#x7684;&#x751F;&#x6210;&#xFF0C;&#x5176;&#x751F;&#x6210;&#x6240;&#x9700;&#x7684;&#x5173;&#x952E;&#x53C2;&#x6570;&#x7531;NdkBuildExternalNativeJsonGenerator&#x4E2D;&#x7684;getProcessBuilder&#x51FD;&#x6570;&#x548C;getBaseArgs&#x51FD;&#x6570;&#x8D1F;&#x8D23;&#xFF0C;&#x5176;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677@NonNull@OverrideProcessInfoBuilder getProcessBuilder(@NonNull String abi, int abiPlatformVersion, @NonNull File outputJson) { checkConfiguration(); // Discover Application.mk if one exists next to Android.mk // If there is an Application.mk file next to Android.mk then pick it up. File applicationMk = new File(getMakeFile().getParent(), &quot;Application.mk&quot;); ProcessInfoBuilder builder = new ProcessInfoBuilder(); builder.setExecutable(getNdkBuild()) .addArgs(getBaseArgs(abi, abiPlatformVersion, applicationMk)) // Disable response files so we can parse the command line. .addArgs(&quot;APP_SHORT_COMMANDS=false&quot;) .addArgs(&quot;LOCAL_SHORT_COMMANDS=false&quot;) .addArgs(&quot;-B&quot;) // Build as if clean .addArgs(&quot;-n&quot;); return builder;}/** * Get the base list of arguments for invoking ndk-build. */@NonNullprivate List&lt;String&gt; getBaseArgs(@NonNull String abi, int abiPlatformVersion, @NonNull File applicationMk) { List&lt;String&gt; result = Lists.newArrayList(); result.add(&quot;NDK_PROJECT_PATH=null&quot;); result.add(&quot;APP_BUILD_SCRIPT=&quot; + getMakeFile()); if (applicationMk.exists()) { // NDK_APPLICATION_MK specifies the Application.mk file. result.add(&quot;NDK_APPLICATION_MK=&quot; + applicationMk.getAbsolutePath()); } // APP_ABI and NDK_ALL_ABIS work together. APP_ABI is the specific ABI for this build. // NDK_ALL_ABIS is the universe of all ABIs for this build. NDK_ALL_ABIS is set to just the // current ABI. If we don&apos;t do this, then ndk-build will erase build artifacts for all abis // aside from the current. result.add(&quot;APP_ABI=&quot; + abi); result.add(&quot;NDK_ALL_ABIS=&quot; + abi); if (isDebuggable()) { result.add(&quot;NDK_DEBUG=1&quot;); } else { result.add(&quot;NDK_DEBUG=0&quot;); } result.add(&quot;APP_PLATFORM=android-&quot; + abiPlatformVersion); // getObjFolder is set to the &quot;local&quot; subfolder in the user specified directory, therefore, // NDK_OUT should be set to getObjFolder().getParent() instead of getObjFolder(). String ndkOut = getObjFolder().getParent(); if (CURRENT_PLATFORM == PLATFORM_WINDOWS) { // Due to b.android.com/219225, NDK_OUT on Windows requires forward slashes. // ndk-build.cmd is supposed to escape the back-slashes but it doesn&apos;t happen. // Workaround here by replacing back slash with forward. // ndk-build will have a fix for this bug in r14 but this gradle fix will make it // work back to r13, r12, r11, and r10. ndkOut = ndkOut.replace(&apos;\\&apos;, &apos;/&apos;); } result.add(&quot;NDK_OUT=&quot; + ndkOut); result.add(&quot;NDK_LIBS_OUT=&quot; + getSoFolder().getAbsolutePath()); for (String flag : getcFlags()) { result.add(String.format(&quot;APP_CFLAGS+=\&quot;%s\&quot;&quot;, flag)); } for (String flag : getCppFlags()) { result.add(String.format(&quot;APP_CPPFLAGS+=\&quot;%s\&quot;&quot;, flag)); } for (String argument : getBuildArguments()) { result.add(argument); } return result;}&#x8BBE;&#x7F6E;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#x4E3A;ndk-Build&#x8BBE;&#x7F6E;NDK_PROJECT_PATH=null&#x8BBE;&#x7F6E;APP_BUILD_SCRIPT&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x6307;&#x5411;Android.mk&#x6587;&#x4EF6;&#x8BBE;&#x7F6E;NDK_APPLICATION_MK&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x6307;&#x5411;Application.mk&#x6587;&#x4EF6;&#xFF08;&#x5982;&#x679C;&#x5B58;&#x5728;&#x7684;&#x8BDD;&#xFF0C;&#x4E0D;&#x5B58;&#x5728;&#x5C31;&#x4E0D;&#x4F1A;&#x8BBE;&#x7F6E;&#x8BE5;&#x53C2;&#x6570;&#xFF09;&#x8BBE;&#x7F6E;APP_ABI&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x4E3A;armeabi&#xFF0C;armeabi-v7a&#xFF0C;arm64-v8a&#xFF0C;x86&#xFF0C;x86_64&#xFF0C;mips&#xFF0C;mips64&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x3002;&#x8BBE;&#x7F6E;NDK_ALL_ABIS&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x7B49;&#x540C;&#x4E8E;APP_ABI&#x8BBE;&#x7F6E;NDK_DEBUG&#x53C2;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x5341;&#x5206;&#x662F;debug&#x6784;&#x5EFA;&#xFF0C;debug&#x542B;&#x7B26;&#x53F7;&#x4FE1;&#x606F;&#xFF0C;so&#x5F88;&#x5927;&#xFF0C;&#x4FBF;&#x4E8E;&#x8C03;&#x8BD5;&#xFF0C;release&#x79FB;&#x9664;&#x4E86;debug&#x4FE1;&#x606F;&#xFF0C;&#x5C0F;&#x5F88;&#x591A;&#x3002;&#x5176;&#x503C;&#x6765;&#x6E90;&#x4E8E;build.gradle&#x4E2D;&#x7684;debuggable&#x503C;&#x3002;&#x8BBE;&#x7F6E;APP_PLATFORM&#x53C2;&#x6570;&#xFF0C;&#x4E00;&#x822C;&#x8BBE;&#x6210;&#x548C;&#x9879;&#x76EE;&#x7684;&#x6700;&#x5C0F;api&#x7248;&#x672C;&#x4E00;&#x6837;&#x5373;&#x53EF;&#xFF0C;gradle&#x4F1A;&#x901A;&#x8FC7;&#x5B83;&#x548C;minSdk&#x67E5;&#x627E;&#x51FA;&#x5408;&#x9002;&#x7684;&#x503C;&#x8BBE;&#x7F6E;NDK_OUT&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x4E3A;obj&#x6587;&#x4EF6;&#x4EA7;&#x751F;&#x76EE;&#x5F55;&#xFF0C;&#x4E00;&#x822C;&#x6307;&#x5411;&#x9879;&#x76EE;&#x7684;build&#x8DEF;&#x5F84;&#x4E0B;&#x7684;intermediates/ndkBuild/$buildType/obj&#x76EE;&#x5F55;&#x8BBE;&#x7F6E;NDK_LIBS_OUT&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x503C;&#x4E3A;libs&#x53C2;&#x6570;&#x76EE;&#x5F55;&#xFF0C;&#x7528;&#x4E8E;so&#x7684;&#x5B58;&#x50A8;&#xFF0C;&#x4E00;&#x822C;&#x6307;&#x5411;&#x9879;&#x76EE;&#x7684;build&#x8DEF;&#x5F84;&#x4E0B;&#x7684;intermediates/ndkBuild/$buildType/lib&#x76EE;&#x5F55;&#x8BBE;&#x7F6E;&#x53EF;&#x9009;&#x9879;APP_CFLAGS&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x8BBE;&#x7F6E;&#xFF0C;&#x5176;&#x503C;&#x4E3A;&#x7F16;&#x8BD1;C&#x65F6;&#x7684;&#x4E00;&#x4E9B;&#x53C2;&#x6570;&#x8BBE;&#x7F6E;&#x53EF;&#x9009;&#x9879;APP_CPPFLAGS&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x8BBE;&#x7F6E;&#xFF0C;&#x5176;&#x503C;&#x4E3A;&#x7F16;&#x8BD1;C++&#x65F6;&#x7684;&#x4E00;&#x4E9B;&#x53C2;&#x6570;&#x8BBE;&#x7F6E;&#x53EF;&#x9009;&#x9879;arguments&#xFF0C;&#x5176;&#x503C;&#x4E3A;gradle&#x4F20;&#x8FDB;&#x6765;&#x7684;arguments&#x53C2;&#x6570;&#x3002;&#x8BBE;&#x7F6E;APP_SHORT_COMMANDS=false&#x8BBE;&#x7F6E;LOCAL_SHORT_COMMANDS=false&#x6DFB;&#x52A0;-B&#x53C2;&#x6570;&#x6DFB;&#x52A0;-n&#x53C2;&#x6570;&#x6700;&#x7EC8;&#x751F;&#x6210;&#x7684;&#x6587;&#x4EF6;&#x5927;&#x81F4;&#x5185;&#x5BB9;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718Executable : /Users/lizhangqu/AndroidSDK/ndk-bundle/ndk-buildarguments : NDK_PROJECT_PATH=nullAPP_BUILD_SCRIPT=path/to/Android.mkNDK_APPLICATION_MK=path/to/Application.mkAPP_ABI=armeabiNDK_ALL_ABIS=armeabiNDK_DEBUG=1APP_PLATFORM=android-14NDK_OUT=path/to/moduleDir/build/intermediates/ndkBuild/debug/objNDK_LIBS_OUT=path/to/moduleDir/build/intermediates/ndkBuild/debug/libAPP_CFLAGS+=&quot;-fpic -fexceptions -frtti&quot;APP_CPPFLAGS+=&quot;-fpic -fexceptions -frtti&quot;APP_SHORT_COMMANDS=falseLOCAL_SHORT_COMMANDS=false-B-njvmArgs :&#x540C;&#x7406;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5728;&#x547D;&#x4EE4;&#x884C;&#x8C03;&#x7528;&#x4ED6;&#x4EEC;&#x6267;&#x884C;12345678910111213141516/Users/lizhangqu/AndroidSDK/ndk-bundle/ndk-build \NDK_PROJECT_PATH=null \APP_BUILD_SCRIPT=path/to/Android.mk \NDK_APPLICATION_MK=path/to/Application.mk \APP_ABI=armeabi \NDK_ALL_ABIS=armeabi \NDK_DEBUG=1 \APP_PLATFORM=android-14 \NDK_OUT=path/to/moduleDir/build/intermediates/ndkBuild/debug/obj \NDK_LIBS_OUT=path/to/moduleDir/build/intermediates/ndkBuild/debug/lib \APP_CFLAGS+=&quot;-fpic -fexceptions -frtti&quot; \APP_CPPFLAGS+=&quot;-fpic -fexceptions -frtti&quot; \APP_SHORT_COMMANDS=false \LOCAL_SHORT_COMMANDS=false \-B \-n \&#x5176;&#x4EE3;&#x7801;&#x8C03;&#x7528;&#x8FC7;&#x7A0B;&#x540C;cmake&#xFF0C;&#x6700;&#x7EC8;&#x751F;&#x6210;ndkBuild_build_output.txt&#xFF0C;&#x8BE5;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x5C31;&#x662F;&#x8C03;&#x7528;ndkBuild_build_command.txt&#x4E2D;&#x7684;&#x547D;&#x4EE4;&#x540E;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x51FA;&#x7684;&#x5185;&#x5BB9;&#x3002;&#x800C;&#x540C;cmake&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;android_gradle_build.json&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x4E0D;&#x518D;&#x662F;&#x7531;cmake&#x6784;&#x5EFA;&#x7CFB;&#x7EDF;&#x4EA7;&#x751F;&#xFF0C;&#x800C;&#x662F;gradle&#x89E3;&#x6790;ndkBuild_build_command.txt&#x4EA7;&#x751F;&#x7684;&#x3002;&#x5176;&#x4EE3;&#x7801;&#x5927;&#x81F4;&#x5982;&#x4E0B;12345678910111213141516171819202122232425262728293031323334NativeBuildConfigValue buildConfig = new NativeBuildConfigValueBuilder( getMakeFile(), projectDir) .addCommands( getBuildCommand(abi, abiPlatformVersion, applicationMk), variantName, buildOutput, isWindows()) .build();if (applicationMk.exists()) { diagnostic(&quot;found application make file %s&quot;, applicationMk.getAbsolutePath()); Preconditions.checkNotNull(buildConfig.buildFiles); buildConfig.buildFiles.add(applicationMk);}String actualResult = new GsonBuilder() .registerTypeAdapter(File.class, new PlainFileGsonTypeAdaptor()) .setPrettyPrinting() .create() .toJson(buildConfig);// Write the captured ndk-build output to JSON fileFile expectedJson = ExternalNativeBuildTaskUtils.getOutputJson(getJsonFolder(), abi);Files.write(actualResult, expectedJson, Charsets.UTF_8);/** * ExternalNativeBuildTaskUtils.getOutputJson * Utility function that gets the name of the output JSON for a particular ABI. */@NonNullpublic static File getOutputJson(@NonNull File jsonFolder, @NonNull String abi) { return new File(getOutputFolder(jsonFolder, abi), &quot;android_gradle_build.json&quot;);}NativeBuildConfigValue&#x7684;build&#x65B9;&#x6CD5;&#x5982;&#x4E0B;&#xFF0C;&#x603B;&#x800C;&#x8A00;&#x4E4B;&#x5C31;&#x662F;&#x8C03;&#x7528;&#x5404;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x83B7;&#x53D6;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x3002;1234567891011121314151617181920/** * Builds the {@link NativeBuildConfigValue} from the given information. */@NonNullpublic NativeBuildConfigValue build() { findLibraryNames(); findToolchainNames(); findToolChainCompilers(); NativeBuildConfigValue config = new NativeBuildConfigValue(); // Sort by library name so that output is stable Collections.sort(outputs, (o1, o2) -&gt; o1.libraryName.compareTo(o2.libraryName)); config.cleanCommands = generateCleanCommands(); config.buildFiles = Lists.newArrayList(androidMk); config.libraries = generateLibraries(); config.toolchains = generateToolchains(); config.cFileExtensions = generateExtensions(cFileExtensions); config.cppFileExtensions = generateExtensions(cppFileExtensions); return config;}&#x751F;&#x6210;&#x7684;json&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x5C31;&#x4E0D;&#x8D34;&#x4E86;&#xFF0C;&#x540C;cmake&#x3002;]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>NDK</tag>
        <tag>Android Gradle Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NDK 交叉编译常用变量]]></title>
    <url>%2F2017%2F06%2F22%2FNDK%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%B8%B8%E7%94%A8%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[&#x603B;&#x7ED3;&#x4E00;&#x53D1;NDK&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x7684;&#x5957;&#x8DEF;&#x5DE5;&#x5177;&#x8BF4;&#x660E;addr2line &#x628A;&#x7A0B;&#x5E8F;&#x5730;&#x5740;&#x8F6C;&#x6362;&#x4E3A;&#x6587;&#x4EF6;&#x540D;&#x548C;&#x884C;&#x53F7;&#x3002;&#x5728;&#x547D;&#x4EE4;&#x884C;&#x4E2D;&#x7ED9;&#x5B83;&#x4E00;&#x4E2A;&#x5730;&#x5740;&#x548C;&#x4E00;&#x4E2A;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#x540D;&#xFF0C;&#x5B83;&#x5C31;&#x4F1A;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#x7684;&#x8C03;&#x8BD5;&#x4FE1;&#x606F;&#x6307;&#x51FA;&#x5728;&#x7ED9;&#x51FA;&#x7684;&#x5730;&#x5740;&#x4E0A;&#x662F;&#x54EA;&#x4E2A;&#x6587;&#x4EF6;&#x4EE5;&#x53CA;&#x884C;&#x53F7;&#x3002;ar &#x5EFA;&#x7ACB;&#x3001;&#x4FEE;&#x6539;&#x3001;&#x63D0;&#x53D6;&#x5F52;&#x6863;&#x6587;&#x4EF6;&#x3002;&#x5F52;&#x6863;&#x6587;&#x4EF6;&#x662F;&#x5305;&#x542B;&#x591A;&#x4E2A;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x7684;&#x4E00;&#x4E2A;&#x5927;&#x6587;&#x4EF6;&#xFF0C;&#x5176;&#x7ED3;&#x6784;&#x4FDD;&#x8BC1;&#x4E86;&#x53EF;&#x4EE5;&#x6062;&#x590D;&#x539F;&#x59CB;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x3002;as &#x4E3B;&#x8981;&#x7528;&#x6765;&#x7F16;&#x8BD1;GNU C&#x7F16;&#x8BD1;&#x5668;gcc&#x8F93;&#x51FA;&#x7684;&#x6C47;&#x7F16;&#x6587;&#x4EF6;&#xFF0C;&#x4EA7;&#x751F;&#x7684;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x7531;&#x8FDE;&#x63A5;&#x5668;ld&#x8FDE;&#x63A5;&#x3002;c++filt &#x8FDE;&#x63A5;&#x5668;&#x4F7F;&#x7528;&#x5B83;&#x6765;&#x8FC7;&#x6EE4; C++ &#x548C; Java &#x7B26;&#x53F7;&#xFF0C;&#x9632;&#x6B62;&#x91CD;&#x8F7D;&#x51FD;&#x6570;&#x51B2;&#x7A81;&#x3002;gprof &#x663E;&#x793A;&#x7A0B;&#x5E8F;&#x8C03;&#x7528;&#x6BB5;&#x7684;&#x5404;&#x79CD;&#x6570;&#x636E;&#x3002;ld &#x662F;&#x8FDE;&#x63A5;&#x5668;&#xFF0C;&#x5B83;&#x628A;&#x4E00;&#x4E9B;&#x76EE;&#x6807;&#x548C;&#x5F52;&#x6863;&#x6587;&#x4EF6;&#x7ED3;&#x5408;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x91CD;&#x5B9A;&#x4F4D;&#x6570;&#x636E;&#xFF0C;&#x5E76;&#x8FDE;&#x63A5;&#x7B26;&#x53F7;&#x5F15;&#x7528;&#x3002;&#x901A;&#x5E38;&#xFF0C;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x65B0;&#x7F16;&#x8BD1;&#x7A0B;&#x5E8F;&#x7684;&#x6700;&#x540E;&#x4E00;&#x6B65;&#x5C31;&#x662F;&#x8C03;&#x7528;ld&#x3002;nm &#x5217;&#x51FA;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x7B26;&#x53F7;&#x3002;objcopy &#x628A;&#x4E00;&#x79CD;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x5185;&#x5BB9;&#x590D;&#x5236;&#x5230;&#x53E6;&#x4E00;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x4E2D;&#x3002;objdump &#x663E;&#x793A;&#x4E00;&#x4E2A;&#x6216;&#x8005;&#x66F4;&#x591A;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x4F7F;&#x7528;&#x9009;&#x9879;&#x6765;&#x63A7;&#x5236;&#x5176;&#x663E;&#x793A;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5B83;&#x6240;&#x663E;&#x793A;&#x7684;&#x4FE1;&#x606F;&#x901A;&#x5E38;&#x53EA;&#x6709;&#x7F16;&#x5199;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x7684;&#x4EBA;&#x624D;&#x611F;&#x5174;&#x8DA3;&#x3002;ranlib &#x4EA7;&#x751F;&#x5F52;&#x6863;&#x6587;&#x4EF6;&#x7D22;&#x5F15;&#xFF0C;&#x5E76;&#x5C06;&#x5176;&#x4FDD;&#x5B58;&#x5230;&#x8FD9;&#x4E2A;&#x5F52;&#x6863;&#x6587;&#x4EF6;&#x4E2D;&#x3002;&#x5728;&#x7D22;&#x5F15;&#x4E2D;&#x5217;&#x51FA;&#x4E86;&#x5F52;&#x6863;&#x6587;&#x4EF6;&#x5404;&#x6210;&#x5458;&#x6240;&#x5B9A;&#x4E49;&#x7684;&#x53EF;&#x91CD;&#x5206;&#x914D;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x3002;readelf &#x663E;&#x793A;elf&#x683C;&#x5F0F;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#x7684;&#x4FE1;&#x606F;&#x3002;size &#x5217;&#x51FA;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x6BCF;&#x4E00;&#x6BB5;&#x7684;&#x5927;&#x5C0F;&#x4EE5;&#x53CA;&#x603B;&#x4F53;&#x7684;&#x5927;&#x5C0F;&#x3002;&#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x5F52;&#x6863;&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x6A21;&#x5757;&#x53EA;&#x4EA7;&#x751F;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x3002;strings &#x6253;&#x5370;&#x67D0;&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x53EF;&#x6253;&#x5370;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x8FD9;&#x4E9B;&#x5B57;&#x7B26;&#x4E32;&#x6700;&#x5C11;4&#x4E2A;&#x5B57;&#x7B26;&#x957F;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x9009;&#x9879;-n&#x8BBE;&#x7F6E;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x6700;&#x5C0F;&#x957F;&#x5EA6;&#x3002;&#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5B83;&#x53EA;&#x6253;&#x5370;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x521D;&#x59CB;&#x5316;&#x548C;&#x53EF;&#x52A0;&#x8F7D;&#x6BB5;&#x4E2D;&#x7684;&#x53EF;&#x6253;&#x5370;&#x5B57;&#x7B26;&#xFF1B;&#x5BF9;&#x4E8E;&#x5176;&#x5B83;&#x7C7B;&#x578B;&#x7684;&#x6587;&#x4EF6;&#x5B83;&#x6253;&#x5370;&#x6574;&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x53EF;&#x6253;&#x5370;&#x5B57;&#x7B26;&#x3002;&#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;&#x5BF9;&#x4E8E;&#x4E86;&#x89E3;&#x975E;&#x6587;&#x672C;&#x6587;&#x4EF6;&#x7684;&#x5185;&#x5BB9;&#x5F88;&#x6709;&#x5E2E;&#x52A9;&#x3002;strip &#x4E22;&#x5F03;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x5168;&#x90E8;&#x6216;&#x8005;&#x7279;&#x5B9A;&#x7B26;&#x53F7;&#x3002;make &#x73AF;&#x5883;&#x53D8;&#x91CF;&#x89C1; https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html&#x901A;&#x7528;&#x811A;&#x672C;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#ANDROID_HOME&#x76EE;&#x5F55;&#x4E0B;&#x5B58;&#x5728;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;toolchain&#x76EE;&#x5F55;&#xFF0C;&#x7531;make-standalone-toolchain.sh&#x751F;&#x6210;# &#x5404;cpu&#x67B6;&#x6784;&#x7684;&#x53C2;&#x6570;&#x89C1;&#x4E0B;&#x65B9;$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchainexport TOOL=arm-linux-androideabiexport ANDROID_HOME=`pwd`export TOOLCHAIN=$ANDROID_HOME/toolchainexport PATH=$TOOLCHAIN/bin:$PATHexport PKG_CONFIG_LIBDIR=$TOOLCHAIN/lib/pkgconfigexport CC=$TOOLCHAIN/bin/$TOOL-gccexport CXX=$TOOLCHAIN/bin/$TOOL-g++export LINK=$CXXexport LD=$TOOLCHAIN/bin/$TOOL-ldexport AR=$TOOLCHAIN/bin/$TOOL-arexport AS=$TOOLCHAIN/bin/$TOOL-asexport NM=$TOOLCHAIN/bin/$TOOL-nmexport RANLIB=$TOOLCHAIN/bin/$TOOL-ranlibexport STRIP=$TOOLCHAIN/bin/$TOOL-stripexport OBJDUMP=$TOOLCHAIN/bin/$TOOL-objdumpexport OBJCOPE=$TOOLCHAIN/bin/$TOOL-objcopyexport ADDR2LINE=$TOOLCHAIN/bin/$TOOL-addr2lineexport ELFEDIT=$TOOLCHAIN/bin/$TOOL-elfeditexport READELF=$TOOLCHAIN/bin/$TOOL-readelfexport SIZE=$TOOLCHAIN/bin/$TOOL-sizeexport STRINGS=$TOOLCHAIN/bin/$TOOL-strings# &#x5404;cpu&#x67B6;&#x6784;&#x7684;&#x53C2;&#x6570;&#x89C1;&#x4E0B;&#x65B9;export ARCH_FLAGS=&quot;-mthumb&quot;export ARCH_LINK=export CFLAGS=&quot;${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64&quot;export CXXFLAGS=&quot;${CFLAGS} -frtti -fexceptions&quot;export LDFLAGS=&quot;${ARCH_LINK}&quot;export ARFLAGS=export LIBS=#CFLAGS&#xFF1A;&#x8868;&#x793A;&#x7528;&#x4E8E; C &#x7F16;&#x8BD1;&#x5668;&#x7684;&#x9009;&#x9879;&#x3002;#&#x5982;&#x6307;&#x5B9A;&#x5934;&#x6587;&#x4EF6;&#xFF08;.h&#x6587;&#x4EF6;&#xFF09;&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x5982;&#xFF1A;CFLAGS=-I/usr/include -I/path/include&#x3002;&#x540C;&#x6837;&#x5730;&#xFF0C;&#x5B89;&#x88C5;&#x4E00;&#x4E2A;&#x5305;&#x65F6;&#x4F1A;&#x5728;&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#x4E0B;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;include&#x76EE;&#x5F55;&#xFF0C;&#x5F53;&#x5B89;&#x88C5;&#x8FC7;&#x7A0B;&#x4E2D;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x65F6;&#xFF0C;&#x8BD5;&#x7740;&#x628A;&#x4EE5;&#x524D;&#x5B89;&#x88C5;&#x7684;&#x5305;&#x7684;include&#x76EE;&#x5F55;&#x52A0;&#x5165;&#x5230;&#x8BE5;&#x53D8;&#x91CF;&#x4E2D;&#x6765;&#x3002;#CXXFLAGS&#xFF1A;&#x8868;&#x793A;&#x7528;&#x4E8E; C++ &#x7F16;&#x8BD1;&#x5668;&#x7684;&#x9009;&#x9879;&#x3002;#&#x5982;&#x6267;&#x884C;&#x4E09;&#x7EA7;&#x4F18;&#x5316; CXXFLAGS=&quot;-O3&quot;#LDFLAGS&#xFF1A;gcc &#x7B49;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x7528;&#x5230;&#x7684;&#x4E00;&#x4E9B;&#x94FE;&#x63A5;&#x53C2;&#x6570;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5728;&#x91CC;&#x9762;&#x6307;&#x5B9A;&#x5E93;&#x6587;&#x4EF6;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x7528;&#x6CD5;&#xFF1A;LDFLAGS=-L/usr/lib -L/path/to/your/lib&#x3002;&#x6BCF;&#x5B89;&#x88C5;&#x4E00;&#x4E2A;&#x5305;&#x90FD;&#x51E0;&#x4E4E;&#x4E00;&#x5B9A;&#x7684;&#x4F1A;&#x5728;&#x5B89;&#x88C5;&#x76EE;&#x5F55;&#x91CC;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;lib&#x76EE;&#x5F55;&#x3002;&#x5982;&#x679C;&#x660E;&#x660E;&#x5B89;&#x88C5;&#x4E86;&#x67D0;&#x4E2A;&#x5305;&#xFF0C;&#x800C;&#x5B89;&#x88C5;&#x53E6;&#x4E00;&#x4E2A;&#x5305;&#x65F6;&#xFF0C;&#x5B83;&#x5374;&#x662F;&#x8BF4;&#x627E;&#x4E0D;&#x5230;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x90A3;&#x4E2A;&#x5305;&#x7684;lib&#x8DEF;&#x5F84;&#x52A0;&#x5165;&#x7684;LDFALGS&#x4E2D;&#x8BD5;&#x4E00;&#x4E0B;&#x3002;#LIBS&#xFF1A;&#x544A;&#x8BC9;&#x94FE;&#x63A5;&#x5668;&#x8981;&#x94FE;&#x63A5;&#x54EA;&#x4E9B;&#x5E93;&#x6587;&#x4EF6;&#xFF0C;&#x5982;LIBS = -lpthread -liconv -llibz -llog#LDFLAGS&#x662F;&#x544A;&#x8BC9;&#x94FE;&#x63A5;&#x5668;&#x4ECE;&#x54EA;&#x91CC;&#x5BFB;&#x627E;&#x5E93;&#x6587;&#x4EF6;&#xFF0C;&#x800C;LIBS&#x662F;&#x544A;&#x8BC9;&#x94FE;&#x63A5;&#x5668;&#x8981;&#x94FE;&#x63A5;&#x54EA;&#x4E9B;&#x5E93;&#x6587;&#x4EF6;autoreconf -i./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \# --host=$TOOL \# --enable-shared \ # --enable-static \# --disable-shared \# --disable-staticmake -j4make installmake uninstallarmeabi1234$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchainexport TOOL=arm-linux-androideabiexport ARCH_FLAGS=&quot;-mthumb&quot;export ARCH_LINK=armeabi-v7a1234$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchainexport TOOL=arm-linux-androideabiexport ARCH_FLAGS=&quot;-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16&quot;export ARCH_LINK=&quot;-march=armv7-a -Wl,--fix-cortex-a8&quot;arm64-v8a1234$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm64 --install-dir=./toolchainexport TOOL=aarch64-linux-androidexport ARCH_FLAGS=export ARCH_LINK=x861234$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=x86 --install-dir=./toolchainexport TOOL=i686-linux-androidexport ARCH_FLAGS=&quot;-march=i686 -msse3 -mstackrealign -mfpmath=sse&quot;export ARCH_LINK=x86_641234$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=x86_64 --install-dir=./toolchainexport TOOL=&quot;x86_64-linux-android&quot;export ARCH_FLAGS=&quot;-march=x86-64 -msse4.2 -mpopcnt -m64 -mtune=intel&quot;export ARCH_LINK=&quot;&quot;mips1234$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=mips --install-dir=./toolchainexport TOOL=mipsel-linux-androidexport ARCH_FLAGS=export ARCH_LINK=mips641234$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=mips64 --install-dir=./toolchainexport TOOL=mips64el-linux-androidexport ARCH_FLAGS=export ARCH_LINK=]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>交叉编译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chromium 网络栈的编译与使用]]></title>
    <url>%2F2017%2F06%2F12%2FChromium-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x5F88;&#x4E45;&#x5F88;&#x4E45;&#x4E4B;&#x524D;&#xFF0C;&#x5C31;&#x770B;&#x5230;&#x67D0;&#x67D0;&#x516C;&#x53F8;&#x8BF4;&#x63D0;&#x53D6;&#x4E86;Chromium&#x7684;&#x7F51;&#x7EDC;&#x6808;&#x505A;App&#x7684;&#x7F51;&#x7EDC;&#x5E93;&#xFF0C;&#x5F53;&#x65F6;&#x81EA;&#x5DF1;&#x8FD8;&#x5E74;&#x5C11;&#x4E0D;&#x61C2;&#x4E8B;&#xFF0C;&#x4E00;&#x76F4;&#x89C9;&#x5F97;&#x4E0D;&#x660E;&#x89C9;&#x5389;&#xFF0C;&#x6700;&#x8FD1;&#x4E00;&#x5468;&#x5229;&#x7528;&#x4E0B;&#x73ED;&#x65F6;&#x95F4;&#xFF0C;&#x5B66;&#x4E60;&#x4E86;&#x4E0B;GN&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#x548C;ninja&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#xFF0C;&#x53C2;&#x8003;&#xFF1A;Chromium GN&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#x7684;&#x4F7F;&#x7528;&#x611F;&#x89C9;&#x662F;&#x65F6;&#x5019;&#x81EA;&#x5DF1;&#x7F16;&#x8BD1;&#x4E00;&#x4E2A;Chromium&#x7684;&#x7F51;&#x7EDC;&#x6808;&#x51FA;&#x6765;&#x4E86;&#x3002;&#x7F16;&#x8BD1;&#x7F16;&#x8BD1;&#x8FC7;&#x7A0B;&#x6781;&#x5176;&#x590D;&#x6742;&#xFF0C;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4E0D;&#x6253;&#x7B97;&#x8BE6;&#x7EC6;&#x63CF;&#x8FF0;&#xFF0C;&#x76EE;&#x524D;&#xFF0C;Chromium&#x8FD8;&#x4E0D;&#x652F;&#x6301;Mac&#x4E0A;&#x7F16;&#x8BD1;&#xFF0C;&#x56E0;&#x6B64;&#x4E3A;&#x4E86;&#x7F16;&#x8BD1;&#x5B83;&#xFF0C;&#x7279;&#x5B9A;&#x7528;&#x4E86;&#x6C89;&#x7761;&#x4E86;1&#x5E74;&#x4E4B;&#x4E45;&#x7684;Windows&#x673A;&#xFF0C;&#x88C5;&#x4E86;&#x4E2A;Windows+Ubuntu&#x53CC;&#x7CFB;&#x7EDF;&#xFF0C;&#x5C31;&#x8FD9;&#x6837;&#x5F00;&#x59CB;&#x5C1D;&#x8BD5;&#x7F16;&#x8BD1;&#x3002;&#x7F16;&#x8BD1;&#x8FC7;&#x7A0B;&#x4E2D;&#x9047;&#x5230;&#x4E86;&#x5F88;&#x591A;&#x95EE;&#x9898;&#xFF0C;&#x603B;&#x4E4B;&#xFF0C;&#x9700;&#x8981;&#x611F;&#x8C22;&#x4EE5;&#x4E0B;&#x51E0;&#x7BC7;&#x6587;&#x7AE0;&#xFF1A;chromium net&#x5230;android&#x5E73;&#x53F0;&#x7684;&#x79FB;&#x690D;Chromium Android&#x7F16;&#x8BD1;&#x6307;&#x5357;&#x61D2;&#x4EBA;chromium net android&#x79FB;&#x690D;&#x6307;&#x5357;Chromium GN&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#x7684;&#x4F7F;&#x7528;&#x7F16;&#x8BD1;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;&#x5176;&#x4ED6;&#x7EC6;&#x8282;&#x95EE;&#x9898;&#xFF0C;&#x8BF7;&#x81EA;&#x884C;Google&#xFF0C;&#x4E5F;&#x6B22;&#x8FCE;&#x4E0E;&#x6211;&#x4EA4;&#x6D41;&#x3002;&#x9879;&#x76EE;&#x5730;&#x5740;&#x76EE;&#x524D;&#x6211;&#x7F16;&#x8BD1;&#x7684;Chromium&#x7F51;&#x7EDC;&#x6808;&#x5DF2;&#x7ECF;&#x53D1;&#x5E03;&#x6210;&#x4E86;aar&#xFF0C;&#x9879;&#x76EE;&#x5730;&#x5740;&#x89C1;chromium-net-for-android&#x4F8B;&#x5B50;&#x6211;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x793A;&#x4F8B;&#x4EE3;&#x7801;&#x7684;&#x5DE5;&#x7A0B;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4ECE; sample on Github &#x770B;&#x5230;&#x4EE3;&#x7801;&#x3002;&#x4F60;&#x53EA;&#x9700;&#x8981;&#x5C06;&#x5176;clone&#x5230;&#x672C;&#x5730;&#xFF0C;&#x7136;&#x540E;&#x4F7F;&#x7528;&#x6700;&#x65B0;&#x7248;&#x672C;&#x7684;andorid studio&#x53BB;&#x7F16;&#x8BD1;&#xFF0C;&#x5C06;&#x5176;&#x5B89;&#x88C5;&#x5230;&#x4F60;&#x7684;&#x8BBE;&#x5907;&#x4E0A;&#x5373;&#x53EF;&#x3002;Chromium Net &#x6E90;&#x7801;&#x6211;&#x4ECE;chromium/src/net&#x4E0A;&#x590D;&#x5236;&#x4E86;&#x4E00;&#x4EFD;&#x548C;&#x672C;&#x5E93;&#x76F8;&#x5173;&#x7684;Java&#x6E90;&#x7801;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4ECE;&#x6E90;&#x7801; on Github&#x770B;&#x5230; &#x3002;&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x4EFD;&#x6E90;&#x7801;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x66F4;&#x65B9;&#x4FBF;&#x7684;&#x9605;&#x8BFB;&#x4E00;&#x4E9B;Java&#x5C42;&#x76F8;&#x5173;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5B83;&#x5E76;&#x4E0D;&#x80FD;&#x88AB;&#x76F4;&#x63A5;&#x7F16;&#x8BD1;&#x3002;&#x7279;&#x6027;&#x5168;&#x5E73;&#x53F0;&#x652F;&#x6301;&#x6700;&#x65B0;&#x7248;TLS&#x3002;&#x4E0D;&#x50CF;OkHttp&#x8FD9;&#x6837;&#x4F9D;&#x8D56;&#x7CFB;&#x7EDF;&#x63D0;&#x4F9B;SSL/TLS&#x52A0;&#x89E3;&#x5BC6;&#x529F;&#x80FD;&#x7684;&#x7F51;&#x7EDC;&#x5E93;&#xFF0C;chromium&#x7F51;&#x7EDC;&#x6808;&#x81EA;&#x8EAB;&#x5305;&#x542B;SSL&#x5E93;&#xFF0C;&#x56E0;&#x800C;&#x53EF;&#x4EE5;&#x5168;&#x5E73;&#x53F0;&#x652F;&#x6301;&#x5B89;&#x5168;&#x6027;&#x66F4;&#x9AD8;&#x7684;&#x6700;&#x65B0;&#x7248;TLS&#x3002;&#x5168;&#x5E73;&#x53F0;&#x652F;&#x6301;HTTP/2&#x53CA;QUIC&#x7B49;&#x6700;&#x65B0;&#x7684;&#x7F51;&#x7EDC;&#x534F;&#x8BAE;&#x3002;HTTP/2&#x672C;&#x8EAB;&#x5BF9;TLS&#x7684;&#x7248;&#x672C;&#x6709;&#x8981;&#x6C42;&#xFF0C;&#x540C;&#x6837;&#x7531;&#x4E8E;&#x5185;&#x542B;SSL&#x5E93;&#xFF0C;&#x800C;&#x53EF;&#x4EE5;&#x5168;&#x5E73;&#x53F0;&#x652F;&#x6301;HTTP/2&#x3002;&#x4E3A;&#x4E86;&#x5C3D;&#x53EF;&#x80FD;&#x7684;&#x7F29;&#x51CF;so&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x5F53;&#x524D;&#x7F16;&#x8BD1;&#x7684;&#x7248;&#x672C;&#x5E76;&#x4E0D;&#x652F;&#x6301;FTP&#xFF0C;WebSocket&#x7B49;&#x534F;&#x8BAE;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#xFF0C;&#x8BF7;&#x81EA;&#x884C;&#x7F16;&#x8BD1;&#x5B83;&#x4EEC;&#x3002;&#x4F7F;&#x7528;Maven12345&lt;dependency&gt; &lt;groupId&gt;io.github.lizhangqu&lt;/groupId&gt; &lt;artifactId&gt;cronet&lt;/artifactId&gt; &lt;version&gt;0.0.1&lt;/version&gt;&lt;/dependency&gt;Gradle1compile &apos;io.github.lizhangqu:cronet:0.0.1&apos;Proguard&#x5982;&#x679C;&#x4F60;&#x8FDB;&#x884C;&#x4E86;&#x6DF7;&#x6DC6;&#xFF0C;&#x8BF7;&#x5728;&#x6DF7;&#x6DC6;&#x6587;&#x4EF6;&#x4E2D;&#x52A0;&#x5165;&#x4EE5;&#x4E0B;&#x914D;&#x7F6E;12-keep class org.chromium.** {*;}-dontwarn org.chromium.**NDK abi&#x8FC7;&#x6EE4;&#x9ED8;&#x8BA4;&#xFF0C;&#x6B64;&#x5E93;&#x5305;&#x542B;&#x4E86;&#x6240;&#x6709;CPU&#x7ED3;&#x6784;&#x7684;so&#xFF0C;&#x5F53;&#x7136;&#x8FD9;&#x5E26;&#x6765;&#x7684;&#x540E;&#x679C;&#x5C31;&#x662F;&#x5927;&#x5C0F;&#x7279;&#x522B;&#x5927;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x53EA;&#x9700;&#x8981;&#x6DFB;&#x52A0;&#x5176;&#x4E2D;&#x4E00;&#x4E2A;cpu&#x7ED3;&#x6784;&#x7684;so&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;abiFilters&#x8FDB;&#x884C;&#x8FC7;&#x6EE4;&#xFF0C;&#x5F53;&#x7136;&#x6211;&#x5EFA;&#x8BAE;&#x53EA;&#x6DFB;&#x52A0;armeabi-v7a&#xFF0C;&#x6BD5;&#x7ADF;&#x5B83;&#x53EF;&#x4EE5;&#x517C;&#x5BB9;&#x76EE;&#x524D;&#x5E02;&#x9762;&#x4E0A;&#x5927;&#x591A;&#x6570;&#x7684;cpu&#xFF0C;&#x800C;armeabi&#x7684;cpu&#x76EE;&#x524D;&#x5E02;&#x9762;&#x4E0A;&#x5DF2;&#x57FA;&#x672C;&#x770B;&#x4E0D;&#x89C1;&#x3002;12345678910111213141516android { defaultConfig { ndk { abiFilters &quot;armeabi-v7a&quot; // default is no filters // abiFilters &quot;armeabi&quot;// abiFilters &quot;armeabi-v7a&quot;// abiFilters &quot;arm64-v8a&quot;// abiFilters &quot;x86&quot;// abiFilters &quot;x86_64&quot;// abiFilters &quot;mips&quot;// abiFilters &quot;mips64&quot; } }}&#x521B;&#x5EFA;Chromium &#x7F51;&#x7EDC;&#x5F15;&#x64CE;123456789101112131415161718CronetEngine.Builder builder = new CronetEngine.Builder(context);builder. enableHttpCache(CronetEngine.Builder.HTTP_CACHE_IN_MEMORY, 100 * 1024) // cache .enableHttp2(true) // Http/2.0 Supprot .enableQuic(true) // Quic Supprot .setHostResolver(new HostResolver() { @Override public List&lt;InetAddress&gt; resolve(String hostname) throws UnknownHostException { if (hostname == null) throw new UnknownHostException(&quot;hostname == null&quot;); return Arrays.asList(InetAddress.getAllByName(hostname)); } }) // custom dns, you can use httpdns here .enableSDCH(true) // SDCH Supprot .setLibraryName(&quot;cronet&quot;); // lib so nameCronetEngine cronetEngine = builder.build();//see more config in the code&#x6B64;&#x65F6;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5404;&#x79CD;&#x914D;&#x7F6E;&#xFF0C;&#x6BD4;&#x5982;&#x81EA;&#x5B9A;&#x4E49;dns&#x89E3;&#x6790;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;httpdns&#xFF0C;&#x4EE5;&#x53CA;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x652F;&#x6301;http/2.0&#x7B49;&#x7279;&#x6027;&#xFF0C;&#x66F4;&#x591A;&#x914D;&#x7F6E;&#x4FE1;&#x606F;&#xFF0C;&#x8BF7;&#x8BE6;&#x89C1;&#x4EE3;&#x7801;&#x3002;HttpUrlConnection&#x7684;&#x65E0;&#x7F1D;&#x4F7F;&#x7528;&#x5728;OkHttp&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;URL&#x7684;URLStreamHandlerFactory&#x4E3A;OkUrlFactory&#xFF0C;&#x8FD9;&#x6837;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5728;HttpUrlConnection&#x4E2D;&#x4F7F;&#x7528;OkHttp&#x7684;&#x6240;&#x6709;&#x7279;&#x6027;&#xFF0C;&#x5C31;&#x50CF;&#x8FD9;&#x6837;&#xFF1A;1URL.setURLStreamHandlerFactory(new OkUrlFactory(new OkHttpClient()));Chromium&#x7684;&#x7F51;&#x7EDC;&#x6808;&#x5F53;&#x7136;&#x4E5F;&#x652F;&#x6301;&#x8FD9;&#x4E2A;&#xFF1A;12CronetURLStreamHandlerFactory cronetURLStreamHandlerFactory = new CronetURLStreamHandlerFactory(cronetEngine);URL.setURLStreamHandlerFactory(cronetURLStreamHandlerFactory);&#x7136;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x4EFB;&#x4F55;&#x6211;&#x4EEC;&#x73B0;&#x6709;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x50CF;&#x8FD9;&#x6837;&#x53D1;&#x9001;&#x4E00;&#x4E2A;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#x5373;&#x53EF;&#x3002;12345678910111213141516171819202122232425262728293031323334353637try { URL url = new URL(mEditTextUrl.getText().toString()); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); Log.e(&quot;TAG&quot;, &quot;connection:&quot; + connection); connection.setDoInput(true); connection.setConnectTimeout(10000); connection.setReadTimeout(10000); connection.setRequestMethod(&quot;GET&quot;); connection.connect(); int responseCode = connection.getResponseCode(); InputStream inputStream = connection.getInputStream(); ByteArrayOutputStream output = new ByteArrayOutputStream(); copy(inputStream, output); output.close(); inputStream.close(); byte[] bytes = output.toByteArray(); String response = new String(bytes); Log.e(&quot;TAG&quot;, &quot;responseCode:&quot; + responseCode); Log.e(&quot;TAG&quot;, &quot;response body:&quot; + response); } catch (IOException e) { e.printStackTrace(); } public static long copy(InputStream input, OutputStream output) throws IOException { return copyLarge(input, output, new byte[2048]); } public static long copyLarge(InputStream input, OutputStream output, byte[] buffer) throws IOException { long count = 0; int n = 0; while (-1 != (n = input.read(buffer))) { output.write(buffer, 0, n); count += n; } return count; }&#x53D1;&#x9001;&#x4E00;&#x4E2A;GET&#x8BF7;&#x6C42;&#x901A;&#x8FC7;UrlRequest.Builder&#x6784;&#x5EFA;&#x4E00;&#x4E2A;UrlRequest&#x5BF9;&#x8C61;&#xFF0C;&#x7136;&#x540E;&#x8C03;&#x7528;start&#x65B9;&#x6CD5;&#x5F00;&#x59CB;&#x8BF7;&#x6C42;&#x3002;UrlRequest&#x5BF9;&#x8C61;&#x7684;&#x6784;&#x5EFA;&#x9700;&#x8981;&#x82E5;&#x5E72;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x4E2D;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x662F;&#x524D;&#x6587;&#x521B;&#x5EFA;&#x7684;CronetEngine&#x5F15;&#x64CE;&#x5BF9;&#x8C61;&#xFF0C;&#x4EE5;&#x53CA;&#x5F53;&#x524D;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#x6267;&#x884C;&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#xFF0C;&#x5F53;&#x7136;&#x8BF7;&#x6C42;&#x7684;url&#x548C;&#x8BF7;&#x6C42;&#x56DE;&#x8C03;&#x5C31;&#x66F4;&#x4E0D;&#x7528;&#x8BF4;&#x4E86;&#x3002;&#x793A;&#x4F8B;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566UrlRequest.Builder builder = new UrlRequest.Builder(mEditTextUrl.getText().toString(), new UrlRequest.Callback() { private ByteArrayOutputStream mBytesReceived = new ByteArrayOutputStream(); private WritableByteChannel mReceiveChannel = Channels.newChannel(mBytesReceived); @Override public void onRedirectReceived(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo, String s) throws Exception { Log.i(&quot;TAG&quot;, &quot;onRedirectReceived&quot;); urlRequest.followRedirect(); } @Override public void onResponseStarted(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo) throws Exception { Log.i(&quot;TAG&quot;, &quot;onResponseStarted&quot;); urlRequest.read(ByteBuffer.allocateDirect(32 * 1024)); } @Override public void onReadCompleted(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo, ByteBuffer byteBuffer) throws Exception { Log.i(&quot;TAG&quot;, &quot;onReadCompleted&quot;); byteBuffer.flip(); try { mReceiveChannel.write(byteBuffer); } catch (IOException e) { e.printStackTrace(); } byteBuffer.clear(); urlRequest.read(byteBuffer); } @Override public void onSucceeded(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo) { Log.i(&quot;TAG&quot;, &quot;onSucceeded&quot;); Log.i(&quot;TAG&quot;, String.format(&quot;Request Completed, status code is %d, total received bytes is %d&quot;, urlResponseInfo.getHttpStatusCode(), urlResponseInfo.getReceivedBytesCount())); final String receivedData = mBytesReceived.toString(); final String url = urlResponseInfo.getUrl(); final String text = &quot;Completed &quot; + url + &quot; (&quot; + urlResponseInfo.getHttpStatusCode() + &quot;)&quot;; Log.i(&quot;TAG&quot;, &quot;text:&quot; + text); Log.i(&quot;TAG&quot;, &quot;receivedData:&quot; + receivedData); Handler handler = new Handler(Looper.getMainLooper()); handler.post(new Runnable() { @Override public void run() { Toast.makeText(getApplicationContext(), &quot;onSucceeded&quot;, Toast.LENGTH_SHORT).show(); } }); } @Override public void onFailed(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo, UrlRequestException e) { Log.i(&quot;TAG&quot;, &quot;onFailed&quot;); Log.i(&quot;TAG&quot;, &quot;error is: %s&quot; + e.getMessage()); Handler handler = new Handler(Looper.getMainLooper()); handler.post(new Runnable() { @Override public void run() { Toast.makeText(getApplicationContext(), &quot;onFailed&quot;, Toast.LENGTH_SHORT).show(); } }); } }, executor, cronetEngine); builder.build().start();&#x53D1;&#x9001;&#x4E00;&#x4E2A;POST&#x8BF7;&#x6C42;POST&#x8BF7;&#x6C42;&#x548C;&#x4E0A;&#x9762;&#x7684;GET&#x8BF7;&#x6C42;&#x76F8;&#x6BD4;&#xFF0C;&#x5C31;&#x662F;&#x591A;&#x4E86;&#x4E00;&#x4E2A;request body&#xFF0C;&#x8FD9;&#x91CC;&#x5C06;&#x4E0A;&#x9762;&#x7684;&#x65B9;&#x6CD5;&#x7B80;&#x5355;&#x5C01;&#x88C5;&#x4E00;&#x4E0B;&#xFF0C;&#x4EE5;&#x540C;&#x65F6;&#x652F;&#x6301;GET&#x8BF7;&#x6C42;&#x548C;POST&#x8BF7;&#x6C42;&#x3002;123456789101112131415public void startWithURL(String url, UrlRequest.Callback callback, Executor executor, String postData) { UrlRequest.Builder builder = new UrlRequest.Builder(url, callback, executor, mCronetEngine); applyPostDataToUrlRequestBuilder(builder, executor, postData); builder.build().start();}private void applyPostDataToUrlRequestBuilder( UrlRequest.Builder builder, Executor executor, String postData) { if (postData != null &amp;&amp; postData.length() &gt; 0) { builder.setHttpMethod(&quot;POST&quot;); builder.addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;); builder.setUploadDataProvider( UploadDataProviders.create(postData.getBytes()), executor); }}&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x590D;&#x7528;&#x524D;&#x6587;&#x53D1;&#x9001;GET&#x8BF7;&#x6C42;&#x7684;&#x56DE;&#x8C03;&#x5373;&#x53EF;&#x3002;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;post&#x8BF7;&#x6C42;&#x9700;&#x8981;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;UploadDataProvider&#xFF0C;&#x8BE5;&#x5BF9;&#x8C61;&#x7528;&#x4E8E;&#x63D0;&#x4F9B;&#x53D1;&#x9001;&#x7684;&#x6570;&#x636E;&#x5305;&#xFF0C;&#x8FD9;&#x4E48;&#x505A;&#x7684;&#x597D;&#x5904;&#x662F;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x5BF9;body&#x7684;&#x6570;&#x636E;&#x683C;&#x5F0F;&#x8FDB;&#x884C;&#x6269;&#x5C55;&#xFF0C;&#x9ED8;&#x8BA4;Chromium&#x7684;&#x7F51;&#x7EDC;&#x6808;&#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x8868;&#x5355;&#x548C;Multipart&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;UploadDataProvider&#x5BF9;&#x8C61;&#xFF0C;&#x81EA;&#x884C;&#x5B9E;&#x73B0;&#x3002;&#x53C2;&#x8003;&#x94FE;&#x63A5;chromium net&#x5230;android&#x5E73;&#x53F0;&#x7684;&#x79FB;&#x690D;Chromium Android&#x7F16;&#x8BD1;&#x6307;&#x5357;&#x61D2;&#x4EBA;chromium net android&#x79FB;&#x690D;&#x6307;&#x5357;Chromium GN&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#x7684;&#x4F7F;&#x7528;]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Chromium</tag>
        <tag>Android，Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android NDK 内存泄露检测]]></title>
    <url>%2F2017%2F06%2F05%2FAndroid-NDK-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%A3%80%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x6700;&#x8FD1;&#x5199;C++&#x4EE3;&#x7801;&#xFF0C;&#x8001;&#x662F;&#x62C5;&#x5FC3;&#x4EE3;&#x7801;&#x5B58;&#x5728;&#x5185;&#x5B58;&#x6CC4;&#x9732;&#xFF0C;&#x80C6;&#x6218;&#x5FC3;&#x60CA;&#x7684;&#xFF0C;Andorid&#x4E2D;Java&#x5C42;&#x4EE3;&#x7801;&#x5185;&#x5B58;&#x6CC4;&#x9732;&#x53EF;&#x4EE5;&#x501F;&#x52A9;leakcanary&#x8FDB;&#x884C;&#x68C0;&#x6D4B;&#xFF1B;&#x627E;&#x4E86;&#x4E00;&#x756A;&#xFF0C;&#x627E;&#x5230;&#x4E86;PC&#x4E0A;C++&#x4E0A;&#x7684;&#x5185;&#x5B58;&#x6CC4;&#x9732;&#x68C0;&#x6D4B;&#x5E93;LeakTracer&#xFF0C;&#x4E8E;&#x662F;&#x518D;&#x627E;&#x4E86;&#x4E0B;&#xFF0C;&#x627E;&#x5230;&#x4E86;Android&#x4E0A;&#x7684;&#x79FB;&#x690D;&#x7248;&#x3002;&#x9996;&#x5148;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x9879;&#x76EE;&#xFF0C;&#x5728;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x5EFA;&#x7ACB;thirdparty&#x76EE;&#x5F55;&#xFF0C;&#x8FDB;&#x5165;&#x8BE5;&#x76EE;&#x5F55;&#xFF0C;clone&#x76F8;&#x5173;&#x5E93;&#x4EE3;&#x7801;1git clone git@github.com:lizhangqu/LeakTracer.git&#x5728;&#x9879;&#x76EE;src/main/cpp&#x4E0B;&#x5EFA;&#x7ACB;CMakeLists.txt&#xFF0C;&#x5185;&#x5BB9;&#x5982;&#x4E0B;12345678910111213141516171819202122232425262728293031project(Test)cmake_minimum_required (VERSION 3.6)include_directories( ${PROJECT_SOURCE_DIR}/include/ ${PROJECT_SOURCE_DIR}/../../../../thirdparty/LeakTracer/libleaktracer/include/ )set(LEAKTRACER_SOURCES ${PROJECT_SOURCE_DIR}/../../../../thirdparty/LeakTracer/libleaktracer/src/AllocationHandlers.cpp #${PROJECT_SOURCE_DIR}/../../../../thirdparty/LeakTracer/libleaktracer/src/LeakTracerC.c #&#x68C0;&#x6D4B;c&#x4EE3;&#x7801;&#x65F6;&#x6253;&#x5F00;&#x6B64;&#x6CE8;&#x91CA;&#xFF0C;&#x5426;&#x5219;&#x4E0D;&#x8981;&#x6253;&#x5F00; ${PROJECT_SOURCE_DIR}/../../../../thirdparty/LeakTracer/libleaktracer/src/MemoryTrace.cpp )add_library(leaktracer STATIC ${LEAKTRACER_SOURCES})set(TEST_FILES ${CMAKE_SOURCE_DIR}/native.cpp)add_library( test-jni SHARED ${TEST_FILES})target_link_libraries( test-jni leaktracer log)&#x5EFA;&#x7ACB;src/main/cpp/include/native.h&#x548C;src/main/cpp/native.cpp&#x6587;&#x4EF6;native.h1234567891011121314151617181920212223242526272829303132333435363738//// Created by &#x674E;&#x6A1F;&#x53D6; on 2017/6/4.//#ifndef TEST_H#define TEST_H#include &quot;jni.h&quot;#ifndef NELEM# define NELEM(x) ((int) (sizeof(x) / sizeof((x)[0])))#endif#ifndef CLASSNAME#define CLASSNAME &quot;io/github/lizhangqu/test/Test&quot;#endif#ifdef ANDROID#include &lt;android/log.h&gt;#define TAG &quot;Test&quot;#define ALOGE(fmt, ...) __android_log_print(ANDROID_LOG_ERROR, TAG, fmt, ##__VA_ARGS__)#define ALOGI(fmt, ...) __android_log_print(ANDROID_LOG_INFO, TAG, fmt, ##__VA_ARGS__)#define ALOGD(fmt, ...) __android_log_print(ANDROID_LOG_DEBUG, TAG, fmt, ##__VA_ARGS__)#define ALOGW(fmt, ...) __android_log_print(ANDROID_LOG_WARN, TAG, fmt, ##__VA_ARGS__)#else#define ALOGE printf#define ALOGI printf#define ALOGD printf#define ALOGW printf#endif#endif //TEST_Hnative.cpp1234567891011121314151617181920212223242526272829303132333435363738394041#include &quot;native.h&quot;#include &quot;MemoryTrace.hpp&quot;#include &lt;fstream&gt;void test(JNIEnv *env, jobject thiz) { }static const JNINativeMethod sMethods[] = { { const_cast&lt;char *&gt;(&quot;test&quot;), const_cast&lt;char *&gt;(&quot;()V&quot;), reinterpret_cast&lt;void *&gt;(test) },};int registerNativeMethods(JNIEnv *env, const char *className, const JNINativeMethod *methods, const int numMethods) { jclass clazz = env-&gt;FindClass(className); if (!clazz) { ALOGE(&quot;Native registration unable to find class &apos;%s&apos;\n&quot;, className); return JNI_FALSE; } if (env-&gt;RegisterNatives(clazz, methods, numMethods) != 0) { ALOGE(&quot;RegisterNatives failed for &apos;%s&apos;\n&quot;, className); env-&gt;DeleteLocalRef(clazz); return JNI_FALSE; } env-&gt;DeleteLocalRef(clazz); return JNI_TRUE;}jint JNI_OnLoad(JavaVM *vm, void *reserved) { JNIEnv *env; if (vm-&gt;GetEnv(reinterpret_cast&lt;void **&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) { return -1; } registerNativeMethods(env, CLASSNAME, sMethods, NELEM(sMethods)); return JNI_VERSION_1_6;}&#x7F16;&#x5199;test&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x8FDB;&#x884C;&#x5185;&#x6D4B;&#x6CC4;&#x9732;&#x68C0;&#x6D4B;1234567891011121314151617class MemoryTest {};void test(JNIEnv *env, jobject thiz) { leaktracer::MemoryTrace::GetInstance().startMonitoringAllThreads(); MemoryTest *memoryTest = new MemoryTest; leaktracer::MemoryTrace::GetInstance().stopAllMonitoring(); std::ofstream out; out.open(&quot;/sdcard/leaks.out&quot;, std::ios_base::out); if (out.is_open()) { leaktracer::MemoryTrace::GetInstance().writeLeaks(out); } else { ALOGE(&quot;Failed to write to \&quot;leaks.out\&quot;\n&quot;); }}&#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&#x540E;&#x8C03;&#x7528;test&#x51FD;&#x6570;&#xFF0C;&#x5C06;/sdcard/leaks.out pull&#x5230;&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;1adb pull /sdcard/leaks.out&#x5176;&#x5185;&#x5BB9;&#x7C7B;&#x4F3C;&#x5982;&#x4E0B;&#x5185;&#x5BB9;12# LeakTracer report diff_utc_mono=1496511718.682943leak, time=135120.534718, stack=0x36fd6 0x35a90 0x359a4 0x32fea 0xc952d3d0, size=1, data=&#xFFFD;&#x501F;&#x52A9;thirdparty/LeakTracer/helper/leak-analyze-addr2line&#x5DE5;&#x5177;&#x8FD8;&#x539F;&#x5185;&#x6D4B;&#x6CC4;&#x9732;&#x5806;&#x6808;&#x3002;&#x8FDB;&#x5165;&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x6267;&#x884C;leak-analyze-addr2line1./thirdparty/LeakTracer/helpers/leak-analyze-addr2line ./library/build/intermediates/cmake/debug/obj/armeabi/libtest-jni.so ./leaks.out&#x5728;mac&#x4E0A;&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#xFF0C;&#x539F;&#x56E0;&#x662F;leak-analyze-addr2line&#x4E2D;&#x7528;&#x5230;&#x4E86;addr2line&#x5DE5;&#x5177;&#xFF0C;&#x800C;mac&#x4E0A;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x6B64;&#x5DE5;&#x5177;&#xFF0C;&#x5C31;&#x4F1A;&#x62A5;&#x9519;&#xFF0C;&#x9519;&#x8BEF;&#x5982;&#x4E0B;&#xFF1A;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5C06;ndk&#x76EE;&#x5F55;&#x4E2D;&#x7684;arm-linux-androideabi-addr2line&#x62F7;&#x5230;./thirdparty/LeakTracer/helpers/&#x4E0B;&#xFF0C;&#x5E76;&#x91CD;&#x547D;&#x540D;&#x4E3A;addr2line&#xFF0C;&#x7136;&#x540E;&#x5C06;./thirdparty/LeakTracer/helpers/&#x52A0;&#x5230;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x4E2D;&#xFF0C;&#x5982;&#x4E0B;&#x4EE3;&#x7801;12cp $ANDROID_NDK_HOME/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-addr2line ./thirdparty/LeakTracer/helpers/addr2lineexport PATH=$PATH:`pwd`/thirdparty/LeakTracer/helpers$ANDROID_NDK_HOME&#x8868;&#x793A;ndk&#x7684;&#x6839;&#x76EE;&#x5F55;&#x3002;&#x4E4B;&#x540E;&#x518D;&#x6B21;&#x8C03;&#x7528;&#x547D;&#x4EE4;1./thirdparty/LeakTracer/helpers/leak-analyze-addr2line ./library/build/intermediates/cmake/debug/obj/armeabi/libtest-jni.so ./leaks.out&#x8FD9;&#x65F6;&#x5019;&#x8F93;&#x51FA;&#x5982;&#x4E0B;native.cpp:15&#x884C;&#x51FA;&#x73B0;&#x6CC4;&#x9732;&#xFF0C;&#x627E;&#x5230;15&#x884C;&#x5BF9;&#x5E94;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5373;&#x5982;&#x4E0B;&#x4EE3;&#x7801;&#x51FA;&#x73B0;&#x6CC4;&#x9732;1MemoryTest *memoryTest = new MemoryTest;&#x52A0;&#x5165;delete&#x4EE3;&#x7801;&#xFF0C;&#x518D;&#x8DD1;&#x4E00;&#x6B21;12MemoryTest *memoryTest = new MemoryTest;delete memoryTest;&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#x53D1;&#x73B0;&#x4E4B;&#x524D;&#x7684;&#x6CC4;&#x9732;&#x4E0D;&#x89C1;&#x4E86;&#x6700;&#x540E;&#xFF0C;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x8981;&#x60F3;&#x4F7F;&#x7528;LeakTracer&#x9700;&#x8981;&#x4FDD;&#x7559;so&#x8DB3;&#x591F;&#x591A;&#x7684;debug&#x4FE1;&#x606F;&#xFF0C;&#x5426;&#x5219;&#x53EF;&#x80FD;&#x4E0D;&#x80FD;&#x6B63;&#x5E38;&#x68C0;&#x6D4B;&#x3002;&#x9879;&#x76EE;Demo&#x5730;&#x5740;&#x89C1;NDKMemoryLeakSample]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>Android，内存泄露检测</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[libuv NDK 交叉编译]]></title>
    <url>%2F2017%2F06%2F04%2Flibuv-NDK%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[&#x79FB;&#x690D;libuv&#x5230;android&#x521B;&#x5EFA;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x8FDB;&#x5165;12mkdir androidcd android&#x751F;&#x6210;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;1$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchainclone&#x6E90;&#x7801;1git clone git@github.com:libuv/libuv.git&#x5BFC;&#x51FA;&#x73AF;&#x5883;&#x53D8;&#x91CF;(armeabi)1234567891011121314151617export ANDROID_HOME=`pwd`export TOOLCHAIN=$ANDROID_HOME/toolchainexport PATH=$TOOLCHAIN/bin:$PATHexport TOOL=arm-linux-androideabiexport CC=$TOOLCHAIN/bin/${TOOL}-gccexport CXX=$TOOLCHAIN/bin/${TOOL}-g++export LINK=${CXX}export LD=$TOOLCHAIN/bin/${TOOL}-ldexport AR=$TOOLCHAIN/bin/${TOOL}-arexport RANLIB=$TOOLCHAIN/bin/${TOOL}-ranlibexport STRIP=$TOOLCHAIN/bin/${TOOL}-stripexport ARCH_FLAGS=&quot;-mthumb&quot;export ARCH_LINK=export CFLAGS=&quot;${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64&quot;export CXXFLAGS=&quot;${CFLAGS} -frtti -fexceptions&quot;export LDFLAGS=&quot;${ARCH_LINK}&quot;export PLATFORM=android&#x7F16;&#x8BD1;&#x5E76;&#x5B89;&#x88C5;12345678910cd libuv./autogen.shautoreconf -i./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \ --host=$TOOL \ --enable-static \ --disable-sharedmake -j4make install&#x5378;&#x8F7D;1make uninstallarmeabi-v7a12345678910111213$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchainexport TOOL=arm-linux-androideabiexport ARCH_FLAGS=&quot;-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16&quot;export ARCH_LINK=&quot;-march=armv7-a -Wl,--fix-cortex-a8&quot;cd libuv./autogen.shautoreconf -i./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \ --host=$TOOL \ --enable-static \ --disable-sharedx86123456789$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=x86 --install-dir=./toolchainexport TOOL=i686-linux-androidexport ARCH_FLAGS=&quot;-march=i686 -msse3 -mstackrealign -mfpmath=sse&quot;export ARCH_LINK=&quot;&quot;./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \ --host=$TOOL \ --enable-static \ --disable-shareddemo&#x5C06;$TOOLCHAIN/sysroot/usr/local&#x4E2D;&#x7684;&#x5934;&#x6587;&#x4EF6;&#x548C;libuv.a&#x62F7;&#x51FA;&#x6765;&#x5907;&#x7528;&#xFF0C;&#x590D;&#x5236;&#x5230;&#x9879;&#x76EE;&#x7684;thirdparty/libuv&#x76EE;&#x5F55;&#x4E0B;cmake12345678910111213141516171819202122232425262728project(UV)cmake_minimum_required (VERSION 3.6)include_directories( ${PROJECT_SOURCE_DIR}/include/ ${PROJECT_SOURCE_DIR}/../../../../thirdparty/libuv/include/ )add_library(uv STATIC IMPORTED)set_target_properties(uv PROPERTIES IMPORTED_LOCATION ${PROJECT_SOURCE_DIR}/../../../../thirdparty/libuv/lib/libuv.a)set(UV_FILES ${CMAKE_SOURCE_DIR}/uv_native.cpp)add_library( uv-jni SHARED ${UV_FILES})target_link_libraries( uv-jni uv log)uv_native.h1234567891011121314151617181920212223242526272829303132333435#ifndef UV_NATIVE_H#define UV_NATIVE_H#include &quot;jni.h&quot;#ifndef NELEM# define NELEM(x) ((int) (sizeof(x) / sizeof((x)[0])))#endif#ifndef CLASSNAME#define CLASSNAME &quot;io/github/lizhangqu/uv/UV&quot;#endif#ifdef ANDROID#include &lt;android/log.h&gt;#define TAG &quot;UV&quot;#define ALOGE(fmt, ...) __android_log_print(ANDROID_LOG_ERROR, TAG, fmt, ##__VA_ARGS__)#define ALOGI(fmt, ...) __android_log_print(ANDROID_LOG_INFO, TAG, fmt, ##__VA_ARGS__)#define ALOGD(fmt, ...) __android_log_print(ANDROID_LOG_DEBUG, TAG, fmt, ##__VA_ARGS__)#define ALOGW(fmt, ...) __android_log_print(ANDROID_LOG_WARN, TAG, fmt, ##__VA_ARGS__)#else#define ALOGE printf#define ALOGI printf#define ALOGD printf#define ALOGW printf#endif#endif //UV_NATIVE_Huv_native.cpp123456789101112131415161718192021222324252627282930313233343536373839404142#include &quot;uv_native.h&quot;#include &quot;uv.h&quot;void test(JNIEnv *env, jobject thiz) { }static const JNINativeMethod sMethods[] = { { const_cast&lt;char *&gt;(&quot;test&quot;), const_cast&lt;char *&gt;(&quot;()V&quot;), reinterpret_cast&lt;void *&gt;(test) },};int registerNativeMethods(JNIEnv *env, const char *className, const JNINativeMethod *methods, const int numMethods) { jclass clazz = env-&gt;FindClass(className); if (!clazz) { ALOGE(&quot;Native registration unable to find class &apos;%s&apos;\n&quot;, className); return JNI_FALSE; } if (env-&gt;RegisterNatives(clazz, methods, numMethods) != 0) { ALOGE(&quot;RegisterNatives failed for &apos;%s&apos;\n&quot;, className); env-&gt;DeleteLocalRef(clazz); return JNI_FALSE; } env-&gt;DeleteLocalRef(clazz); return JNI_TRUE;}jint JNI_OnLoad(JavaVM *vm, void *reserved) { JNIEnv *env; if (vm-&gt;GetEnv(reinterpret_cast&lt;void **&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) { return -1; } registerNativeMethods(env, CLASSNAME, sMethods, NELEM(sMethods)); return JNI_VERSION_1_6;}&#x7F16;&#x5199;test&#x51FD;&#x6570;12345678910111213141516171819202122232425uv_loop_t *loop;void on_resolved(uv_getaddrinfo_t *resolver, int status, struct addrinfo *res) { if (status &lt; 0) { ALOGE(&quot;getaddrinfo callback error %s\n&quot;, uv_err_name(status)); return; } char addr[17] = {&apos;\0&apos;}; uv_ip4_name((struct sockaddr_in *) res-&gt;ai_addr, addr, 16); ALOGE(&quot;ipv4 :%s\n&quot;, addr); uv_freeaddrinfo(res);}void test(JNIEnv *env, jobject thiz) { loop = uv_default_loop(); ALOGE(&quot;www.baidu.com is... &quot;); uv_getaddrinfo_t resolver; int r = uv_getaddrinfo(loop, &amp;resolver, on_resolved, &quot;www.baidu.com&quot;, &quot;80&quot;, NULL); if (r) { ALOGE(&quot;getaddrinfo call error %s\n&quot;, uv_err_name(r)); } else { uv_run(loop, UV_RUN_DEFAULT); }}&#x8FD0;&#x884C;&#x540E;&#x8F93;&#x51FA;&#x7ED3;&#x679C;1206-04 18:51:40.532 27196-27196/io.github.lizhangqu.uv.sample E/UV: www.baidu.com is... 06-04 18:51:40.536 27196-27196/io.github.lizhangqu.uv.sample E/UV: ipv4 :115.239.211.112demo&#x5730;&#x5740;libuvSample]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>交叉编译</tag>
        <tag>libuv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[当 Android 开发者遇见 TensorFlow]]></title>
    <url>%2F2017%2F06%2F02%2F%E5%BD%93Android%E5%BC%80%E5%8F%91%E8%80%85%E9%81%87%E8%A7%81TensorFlow%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x5F53;&#x5199;&#x4E0B;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5176;&#x5B9E;&#x6211;&#x8FDE;TensorFlow&#x600E;&#x4E48;&#x7528;&#x90FD;&#x4E0D;&#x4F1A;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4F60;&#x4EEC;&#x5C31;&#x5F53;&#x6211;&#x653E;&#x5C41;&#x597D;&#x4E86;&#x3002;&#x6211;&#x662F;&#x4E00;&#x4E2A;Android&#x5F00;&#x53D1;&#x8005;&#xFF0C;&#x4E14;&#x6211;&#x4E0D;&#x4F1A;python&#xFF08;&#x522B;&#x9119;&#x89C6;&#x6211;&#xFF09;&#xFF0C;&#x6240;&#x4EE5;&#x53D6;&#x540D;&#x4E3A;&#x300A;&#x5F53;Android&#x5F00;&#x53D1;&#x8005;&#x9047;&#x89C1;TensorFlow&#x300B;&#x3002;&#x6587;&#x7AE0;&#x5E76;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x5B9E;&#x8D28;&#x6027;&#x5185;&#x5BB9;&#xFF0C;&#x4EC5;&#x4EC5;&#x662F;&#x4E3A;&#x4E86;&#x6572;&#x5F00;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x5927;&#x95E8;&#x3002;Java&#x8C03;&#x7528;TensorFlow&#x524D;&#x9762;&#x8BF4;&#x4E86;&#xFF0C;&#x672C;&#x5B9D;&#x5B9D;&#x662F;&#x4E00;&#x53EA;&#x4E0D;&#x4F1A;python&#x7684;&#x5B9D;&#x5B9D;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4E0D;&#x4F1A;&#x6D89;&#x53CA;&#x5230;&#x4EFB;&#x4F55;python&#x76F8;&#x5173;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x6240;&#x4EE5;Java&#x81EA;&#x7136;&#x800C;&#x7136;&#x5730;&#x6210;&#x4E3A;&#x4E86;&#x6211;&#x7684;&#x9996;&#x9009;&#x8BED;&#x8A00;&#x3002;Google&#x5F00;&#x6E90;&#x7684;TensorFlow&#x7684;&#x6838;&#x5FC3;&#x4EE3;&#x7801;&#x662F;C++&#x5199;&#x7684;&#xFF0C;&#x56E0;&#x6B64;Java&#x81EA;&#x7136;&#x800C;&#x7136;&#x7684;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4ED6;&#xFF0C;&#x53EA;&#x662F;&#x4E2D;&#x95F4;&#x591A;&#x4E86;&#x4E00;&#x5C42;JNI&#x3002;&#x52A0;&#x4E0A;&#x5E73;&#x65F6;&#x6211;&#x5BF9;Gradle&#x7684;&#x63A5;&#x89E6;&#x7A0B;&#x5EA6;&#xFF0C;&#x9009;&#x62E9;Gradle&#x505A;&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#xFF0C;&#x800C;&#x4E0D;&#x662F;maven&#x3002;&#x8FD9;&#x91CC;&#x4E0D;&#x5F97;&#x4E0D;&#x518D;&#x8D5E;&#x4E00;&#x4E0B;Intellij Idea&#xFF0C;&#x4ECA;&#x5929;&#x7A81;&#x7136;&#x53D1;&#x73B0;2017.1&#x7248;&#x672C;&#x7684;Intellij Idea&#x5DF2;&#x7ECF;&#x80FD;&#x591F;&#x81EA;&#x52A8;&#x5C06;maven&#x4F9D;&#x8D56;&#x8F6C;&#x6362;&#x4E3A;gradle&#x4F9D;&#x8D56;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x76F4;&#x63A5;&#x590D;&#x5236;maven&#x4F9D;&#x8D56;&#x5230;gradle&#x4E2D;&#xFF0C;&#x5B83;&#x5C31;&#x4F1A;&#x81EA;&#x52A8;&#x8F6C;&#x6362;&#x4E3A;gradle&#x4F9D;&#x8D56;&#xFF0C;&#x518D;&#x4E5F;&#x4E0D;&#x7528;&#x6211;&#x4EEC;&#x624B;&#x52A8;&#x8F6C;&#x6362;&#x3002;&#x89C1;&#x8BC1;&#x5947;&#x8FF9;&#x7684;&#x65F6;&#x5019;&#x5230;&#x4E86;maven &#x4F9D;&#x8D56;12345&lt;dependency&gt; &lt;groupId&gt;org.tensorflow&lt;/groupId&gt; &lt;artifactId&gt;tensorflow&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt;&lt;/dependency&gt;&#x8F6C;&#x6362;&#x540E;&#x7684;gradle&#x4F9D;&#x8D56;&#x4E3A;123dependencies { compile &apos;org.tensorflow:tensorflow:1.1.0&apos;}&#x4E3A;&#x4E86;&#x8FD0;&#x884C;java&#x7A0B;&#x5E8F;&#xFF0C;&#x5E94;&#x7528;application&#x63D2;&#x4EF6;&#xFF0C;&#x5E76;&#x6307;&#x5B9A;mainClassName&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x5728;&#x540E;&#x6587;&#x521B;&#x5EFA;1234567apply plugin: &apos;application&apos;apply plugin: &apos;idea&apos;mainClassName = &quot;com.lizhangqu.application.Main&quot;sourceCompatibility = 1.8dependencies { compile &apos;org.tensorflow:tensorflow:1.1.0&apos;}&#x6765;&#x70B9;&#x6709;&#x96BE;&#x5EA6;&#x7684;&#xFF0C;&#x53C2;&#x8003;LabelImage.java&#xFF0C;&#x6211;&#x4EEC;&#x6765;&#x505A;&#x4E00;&#x4E2A;&#x56FE;&#x7247;&#x8BC6;&#x522B;&#x5DE5;&#x5177;&#x9996;&#x5148;&#x4E0B;&#x8F7D;&#x8BAD;&#x7EC3;&#x597D;&#x7684;&#x6A21;&#x578B; inception5h.zip&#xFF0C;&#x5C06;&#x6A21;&#x578B;&#x5185;&#x5BB9;&#x89E3;&#x538B;&#x5230;src/main/resources/model&#x76EE;&#x5F55;&#xFF0C;&#x5982;&#x56FE;&#x7136;&#x540E;&#x968F;&#x4FBF;&#x4E0B;&#x8F7D;&#x4E00;&#x5F20;&#x56FE;&#x4F5C;&#x4E3A;&#x5F85;&#x8BC6;&#x522B;&#x7684;&#x56FE;&#xFF0C;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x8FD9;&#x5F20;&#x56FE;&#xFF0C;&#x597D;&#x5927;&#x4E00;&#x5EA7;&#x5C71;&#x5C06;&#x5176;&#x653E;&#x5230;src/main/resources/pic&#x76EE;&#x5F55;&#xFF0C;&#x5982;&#x56FE;&#x7136;&#x540E;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;Main&#x7C7B;&#xFF0C;&#x62F7;&#x8D1D;&#x4E00;&#x6CE2;LabelImage.java&#x4EE3;&#x7801;&#xFF0C;&#x4FEE;&#x6539;&#x5176;main&#x51FD;&#x6570;&#x4E3A;12345678910111213141516171819public static void main(String[] args) { //&#x6A21;&#x578B;&#x4E0B;&#x8F7D; //https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip String modelPath = Main.class.getClassLoader().getResource(&quot;model&quot;).getPath(); String picPath = Main.class.getClassLoader().getResource(&quot;pic&quot;).getPath(); byte[] graphDef = readAllBytesOrExit(Paths.get(modelPath, &quot;tensorflow_inception_graph.pb&quot;)); List&lt;String&gt; labels = readAllLinesOrExit(Paths.get(modelPath, &quot;imagenet_comp_graph_label_strings.txt&quot;)); byte[] imageBytes = readAllBytesOrExit(Paths.get(picPath, &quot;moutain.jpg&quot;)); try (Tensor image = constructAndExecuteGraphToNormalizeImage(imageBytes)) { float[] labelProbabilities = executeInceptionGraph(graphDef, image); int bestLabelIdx = maxIndex(labelProbabilities); System.out.println( String.format( &quot;BEST MATCH: %s (%.2f%% likely)&quot;, labels.get(bestLabelIdx), labelProbabilities[bestLabelIdx] * 100f)); }}&#x505A;&#x7684;&#x4FEE;&#x6539;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5C06;&#x53C2;&#x6570;&#x4ECE;&#x5916;&#x90E8;&#x4F20;&#x5165;&#xFF0C;&#x4FEE;&#x6539;&#x4E3A;&#x4E86;&#x4ECE;resources&#x76EE;&#x5F55;&#x8BFB;&#x53D6;Main&#x7C7B;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x5982;&#x4E0B;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173package com.lizhangqu.application;import java.io.IOException;import java.nio.charset.Charset;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.Arrays;import java.util.List;import org.tensorflow.DataType;import org.tensorflow.Graph;import org.tensorflow.Output;import org.tensorflow.Session;import org.tensorflow.Tensor;public class Main { public static void main(String[] args) { //&#x6A21;&#x578B;&#x4E0B;&#x8F7D; //https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip String modelPath = Main.class.getClassLoader().getResource(&quot;model&quot;).getPath(); String picPath = Main.class.getClassLoader().getResource(&quot;pic&quot;).getPath(); byte[] graphDef = readAllBytesOrExit(Paths.get(modelPath, &quot;tensorflow_inception_graph.pb&quot;)); List&lt;String&gt; labels = readAllLinesOrExit(Paths.get(modelPath, &quot;imagenet_comp_graph_label_strings.txt&quot;)); byte[] imageBytes = readAllBytesOrExit(Paths.get(picPath, &quot;moutain.jpg&quot;)); try (Tensor image = constructAndExecuteGraphToNormalizeImage(imageBytes)) { float[] labelProbabilities = executeInceptionGraph(graphDef, image); int bestLabelIdx = maxIndex(labelProbabilities); System.out.println( String.format( &quot;BEST MATCH: %s (%.2f%% likely)&quot;, labels.get(bestLabelIdx), labelProbabilities[bestLabelIdx] * 100f)); } } private static Tensor constructAndExecuteGraphToNormalizeImage(byte[] imageBytes) { try (Graph g = new Graph()) { GraphBuilder b = new GraphBuilder(g); // Some constants specific to the pre-trained model at: // https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip // // - The model was trained with images scaled to 224x224 pixels. // - The colors, represented as R, G, B in 1-byte each were converted to // float using (value - Mean)/Scale. final int H = 224; final int W = 224; final float mean = 117f; final float scale = 1f; // Since the graph is being constructed once per execution here, we can use a constant for the // input image. If the graph were to be re-used for multiple input images, a placeholder would // have been more appropriate. final Output input = b.constant(&quot;input&quot;, imageBytes); final Output output = b.div( b.sub( b.resizeBilinear( b.expandDims( b.cast(b.decodeJpeg(input, 3), DataType.FLOAT), b.constant(&quot;make_batch&quot;, 0)), b.constant(&quot;size&quot;, new int[]{H, W})), b.constant(&quot;mean&quot;, mean)), b.constant(&quot;scale&quot;, scale)); try (Session s = new Session(g)) { return s.runner().fetch(output.op().name()).run().get(0); } } } private static float[] executeInceptionGraph(byte[] graphDef, Tensor image) { try (Graph g = new Graph()) { g.importGraphDef(graphDef); try (Session s = new Session(g); Tensor result = s.runner().feed(&quot;input&quot;, image).fetch(&quot;output&quot;).run().get(0)) { final long[] rshape = result.shape(); if (result.numDimensions() != 2 || rshape[0] != 1) { throw new RuntimeException( String.format( &quot;Expected model to produce a [1 N] shaped tensor where N is the number of labels, instead it produced one with shape %s&quot;, Arrays.toString(rshape))); } int nlabels = (int) rshape[1]; return result.copyTo(new float[1][nlabels])[0]; } } } private static int maxIndex(float[] probabilities) { int best = 0; for (int i = 1; i &lt; probabilities.length; ++i) { if (probabilities[i] &gt; probabilities[best]) { best = i; } } return best; } private static byte[] readAllBytesOrExit(Path path) { try { return Files.readAllBytes(path); } catch (IOException e) { System.err.println(&quot;Failed to read [&quot; + path + &quot;]: &quot; + e.getMessage()); System.exit(1); } return null; } private static List&lt;String&gt; readAllLinesOrExit(Path path) { try { return Files.readAllLines(path, Charset.forName(&quot;UTF-8&quot;)); } catch (IOException e) { System.err.println(&quot;Failed to read [&quot; + path + &quot;]: &quot; + e.getMessage()); System.exit(0); } return null; } // In the fullness of time, equivalents of the methods of this class should be auto-generated from // the OpDefs linked into libtensorflow_jni.so. That would match what is done in other languages // like Python, C++ and Go. static class GraphBuilder { GraphBuilder(Graph g) { this.g = g; } Output div(Output x, Output y) { return binaryOp(&quot;Div&quot;, x, y); } Output sub(Output x, Output y) { return binaryOp(&quot;Sub&quot;, x, y); } Output resizeBilinear(Output images, Output size) { return binaryOp(&quot;ResizeBilinear&quot;, images, size); } Output expandDims(Output input, Output dim) { return binaryOp(&quot;ExpandDims&quot;, input, dim); } Output cast(Output value, DataType dtype) { return g.opBuilder(&quot;Cast&quot;, &quot;Cast&quot;).addInput(value).setAttr(&quot;DstT&quot;, dtype).build().output(0); } Output decodeJpeg(Output contents, long channels) { return g.opBuilder(&quot;DecodeJpeg&quot;, &quot;DecodeJpeg&quot;) .addInput(contents) .setAttr(&quot;channels&quot;, channels) .build() .output(0); } Output constant(String name, Object value) { try (Tensor t = Tensor.create(value)) { return g.opBuilder(&quot;Const&quot;, name) .setAttr(&quot;dtype&quot;, t.dataType()) .setAttr(&quot;value&quot;, t) .build() .output(0); } } private Output binaryOp(String type, Output in1, Output in2) { return g.opBuilder(type, type).addInput(in1).addInput(in2).build().output(0); } private Graph g; }}&#x8DD1;&#x4E00;&#x6CE2;&#xFF0C;&#x547D;&#x4EE4;&#x884C;&#x6267;&#x884C;1./gradlew run&#x770B;&#x4E0B;&#x8F93;&#x51FA;&#x5185;&#x5BB9;&#x8F93;&#x51FA;&#x4E3A;1BEST MATCH: alp (58.23% likely)&#x6211;&#x64E6;&#xFF0C;alp&#x662F;&#x4EC0;&#x4E48;&#x9B3C;&#xFF0C;&#x67E5;&#x4E0B;&#x82F1;&#x6587;&#x5B57;&#x5178;12alp &#x82F1; [&#xE6;lp] &#x7F8E; [&#xE6;lp] &#x3000; &#x3000;n. &#x9AD8;&#x5C71;&#x6069;&#xFF0C;&#x6CA1;&#x9519;&#xFF0C;58.23%&#x7684;&#x6982;&#x7387;&#x8FD9;&#x5F20;&#x56FE;&#x662F;&#x5927;&#x5C71;&#x3002;&#x6CA1;&#x9519;&#xFF0C;&#x8FD9;&#x5F20;&#x56FE;&#x5C31;&#x662F;&#x5927;&#x5C71;&#x3002;&#x5F53;&#x7136;&#x8BC6;&#x522B;&#x7684;&#x56FE;&#x7684;&#x51C6;&#x786E;&#x7387;&#x8DDF;&#x8FD9;&#x4E2A;&#x8BAD;&#x7EC3;&#x597D;&#x7684;&#x6A21;&#x578B;&#x76F4;&#x63A5;&#x76F8;&#x5173;&#xFF0C;&#x6A21;&#x578B;&#x8D8A;&#x5C4C;&#xFF0C;&#x51C6;&#x786E;&#x7387;&#x5C31;&#x8D8A;&#x9AD8;&#x3002;&#x5177;&#x4F53;&#x4EE3;&#x7801;&#x4EC0;&#x4E48;&#x610F;&#x601D;&#x4F60;&#x4E5F;&#x522B;&#x95EE;&#x6211;&#xFF0C;&#x95EE;&#x6211;&#x6211;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x6587;&#x7AE0;&#x5F00;&#x5934;&#x5DF2;&#x7ECF;&#x8BF4;&#x8FC7;&#x4E86;&#xFF0C;&#x5199;&#x4E0B;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x8FD8;&#x4E0D;&#x4F1A;&#x7528;TensorFlow&#x3002;Android&#x8C03;&#x7528;TensorFlowJava&#x80FD;&#x8C03;&#x7528;&#xFF0C;Android&#x81EA;&#x7136;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x4E5F;&#x80FD;&#x8C03;&#x7528;&#x3002;&#x5F15;&#x5165;&#x4F9D;&#x8D56;1compile &apos;org.tensorflow:tensorflow-android:1.2.0-rc0&apos;&#x5C06;minSdkVersion&#x8BBE;&#x6210;19&#xFF0C;&#x56E0;&#x4E3A;&#x7528;&#x5230;&#x4E86;&#x9AD8;Api&#xFF0C;&#x5F53;&#x7136;&#x5982;&#x679C;&#x4F60;&#x60F3;&#x8BBE;&#x6210;14&#xFF0C;&#x81EA;&#x884C;&#x5C06;&#x9AD8;Api&#x7684;&#x4EE3;&#x7801;&#x5220;&#x4E86;&#xFF0C;&#x4E3B;&#x8981;&#x662F;android.os.Trace&#x7C7B;&#xFF0C;&#x53BB;&#x9664;&#x4E86;&#x4E0D;&#x5F71;&#x54CD;&#x6B63;&#x5E38;&#x4F7F;&#x7528;12345android { defaultConfig { minSdkVersion 19 }}&#x8FD8;&#x662F;&#x4E00;&#x6837;&#x7684;&#x8BAD;&#x7EC3;&#x6A21;&#x578B;&#xFF0C;&#x8FD9;&#x6B21;&#x628A;&#x4ED6;&#x4EEC;&#x6254;&#x5230;assets/model&#x4E0B;&#xFF0C;&#x5F85;&#x8BC6;&#x522B;&#x7684;&#x56FE;&#x7247;&#x653E;&#x5728;assets/pic&#x4E0B;&#xFF0C;&#x5982;&#x56FE;&#x4E0D;&#x8FC7;&#x8FD9;&#x6B21;&#x6211;&#x4EEC;&#x5F85;&#x8BC6;&#x522B;&#x7684;&#x56FE;&#x6362;&#x4E86;&#xFF0C;&#x6362;&#x6210;&#x4E86;&#x4E00;&#x4E2A;&#x5927;&#x82F9;&#x679C;&#x8FD8;&#x662F;&#x62F7;&#x8D1D;&#x70B9;&#x4EE3;&#x7801;&#xFF0C;&#x5230;android/demo&#x4E0B;&#xFF0C;&#x62F7;&#x8D1D;Classifier.java&#x548C;TensorFlowImageClassifier.java&#x4E24;&#x4E2A;&#x7C7B;&#xFF0C;&#x4EE3;&#x7801;&#x5C31;&#x4E0D;&#x8D34;&#x4E86;&#x3002;&#x7136;&#x540E;&#x53C2;&#x8003;&#x4E0B;ClassifierActivity.java&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5C06;assets/pic/apple.jpg&#x8FDB;&#x884C;&#x8BC6;&#x522B;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class MainActivity extends AppCompatActivity { private TextView result; private Button btn; private Classifier classifier; private static final int INPUT_SIZE = 224; private static final int IMAGE_MEAN = 117; private static final float IMAGE_STD = 1; private static final String INPUT_NAME = &quot;input&quot;; private static final String OUTPUT_NAME = &quot;output&quot;; private static final String MODEL_FILE = &quot;file:///android_asset/model/tensorflow_inception_graph.pb&quot;; private static final String LABEL_FILE = &quot;file:///android_asset/model/imagenet_comp_graph_label_strings.txt&quot;; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); btn = (Button) findViewById(R.id.btn); result = (TextView) findViewById(R.id.result); classifier = TensorFlowImageClassifier.create( getAssets(), MODEL_FILE, LABEL_FILE, INPUT_SIZE, IMAGE_MEAN, IMAGE_STD, INPUT_NAME, OUTPUT_NAME); btn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { new Thread(new Runnable() { @Override public void run() { try { Bitmap croppedBitmap = getBitmap(getApplicationContext(), &quot;pic/apple.jpg&quot;, INPUT_SIZE); final List&lt;Classifier.Recognition&gt; results = classifier.recognizeImage(croppedBitmap); new Handler(Looper.getMainLooper()).post(new Runnable() { @Override public void run() { result.setText(&quot;results:&quot; + results); } }); } catch (IOException e) { e.printStackTrace(); } } }).start(); } }); } private static Bitmap getBitmap(Context context, String path, int size) throws IOException { Bitmap bitmap = null; InputStream inputStream = null; inputStream = context.getAssets().open(path); bitmap = BitmapFactory.decodeStream(inputStream); inputStream.close(); int width = bitmap.getWidth(); int height = bitmap.getHeight(); float scaleWidth = ((float) size) / width; float scaleHeight = ((float) size) / height; Matrix matrix = new Matrix(); matrix.postScale(scaleWidth, scaleHeight); return Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true); }}&#x8BC6;&#x522B;&#x7ED3;&#x679C;&#x5982;&#x4E0B;:&#x8BC6;&#x522B;&#x7387;&#x6700;&#x9AD8;&#x7684;&#x662F;granny smith&#xFF0C;&#x4EC0;&#x4E48;&#x610F;&#x601D;&#x5462;&#xFF0C;&#x67E5;&#x4E00;&#x4E0B;&#x53D1;&#x73B0;&#x662F;&#x201C;&#x9752;&#x82F9;&#x679C;&#x201D;&#xFF0C;&#x54ED;&#x7B11;&#x4E0D;&#x5F97;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x7EA2;&#x82F9;&#x679C;&#xFF0C;&#x8FD9;&#x4E48;&#x5C0F;&#x7684;&#x8BAD;&#x7EC3;&#x6A21;&#x578B;&#xFF0C;&#x4E5F;&#x4E0D;&#x671F;&#x5F85;&#x8BC6;&#x522B;&#x7387;&#x6709;&#x591A;&#x9AD8;&#x4E86;&#x3002;NDK&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;TensorFlow&#x4E0A;&#x9762;&#x6211;&#x4EEC;&#x7528;&#x4E86;org.tensorflow:tensorflow-android:1.2.0-rc0&#x8FD9;&#x4E2A;&#x5E93;&#xFF0C;&#x8FD8;&#x662F;&#x5F97;&#x638C;&#x63E1;&#x4E0B;&#x5B83;&#x7684;&#x7531;&#x6765;&#xFF0C;&#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x5C31;&#x7F16;&#x8BD1;&#x4ED6;&#x3002;tensorflow&#x4F7F;&#x7528;bazel&#x6784;&#x5EFA;&#xFF0C;&#x4E14;&#x4F9D;&#x8D56;&#x4E00;&#x4E9B;python&#x5E93;&#xFF0C;&#x56E0;&#x6B64;&#x5148;&#x5B89;&#x88C5;&#x5B83;&#x4EEC;12345$ brew install bazel$ brew install swig$ brew install python$ sudo easy_install pip$ sudo pip install six numpy wheel&#x5982;&#x679C;&#x540E;&#x9762;&#x62A5;&#x5404;&#x79CD;&#x5404;&#x6837;&#x7684;&#x73AF;&#x5883;&#x7F3A;&#x5931;&#xFF0C;&#x8BF7;&#x81EA;&#x884C;Google&#x5E76;&#x8865;&#x9F50;&#x73AF;&#x5883;&#x3002;clone TensorFlow &#x4EE3;&#x7801;1git clone --recurse-submodules https://github.com/tensorflow/tensorflow.git&#x4FEE;&#x6539;TensorFlow&#x9879;&#x76EE;&#x6839;&#x4E0B;&#x7684;WROKSPACE&#x6587;&#x4EF6;&#x5C06;&#x4EE5;&#x4E0B;&#x4EE3;&#x7801;&#x53CD;&#x6CE8;&#x91CA;123456789101112131415161718# Uncomment and update the paths in these entries to build the Android demo.android_sdk_repository( name = &quot;androidsdk&quot;, api_level = 23, # Ensure that you have the build_tools_version below installed in the # SDK manager as it updates periodically. build_tools_version = &quot;25.0.2&quot;, # Replace with path to Android SDK on your system path = &quot;/Users/lizhangqu/AndroidSDK&quot;,)## Android NDK r12b is recommended (higher may cause issues with Bazel)android_ndk_repository( name=&quot;androidndk&quot;, path=&quot;/Users/lizhangqu/AndroidNDK/android-ndk-r12b&quot;, # This needs to be 14 or higher to compile TensorFlow. # Note that the NDK version is not the API level. api_level=14)&#x7136;&#x540E;&#x4FEE;&#x6539;android_sdk_repository&#x4E2D;&#x7684;path&#x4E3A;&#x81EA;&#x5DF1;&#x7535;&#x8111;&#x4E2D;&#x7684;android sdk&#x76EE;&#x5F55;&#xFF0C;&#x4FEE;&#x6539;android_ndk_repository&#x4E2D;&#x7684;path&#x4E3A;&#x81EA;&#x5DF1;&#x7535;&#x8111;&#x7684;android ndk&#x76EE;&#x5F55;&#x3002;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;ndk&#x7684;&#x7248;&#x672C;&#xFF0C;&#x5B98;&#x65B9;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;r12b&#x7248;&#x672C;&#xFF0C;&#x4E8B;&#x5B9E;&#x8BC1;&#x660E;&#xFF0C;&#x6211;&#x7528;android sdk&#x4E0B;&#x7684;ndk-bundle&#x662F;&#x7F16;&#x8BD1;&#x4E0D;&#x8FC7;&#x53BB;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8FD8;&#x662F;&#x8001;&#x8001;&#x5B9E;&#x5B9E;&#x7528;r12b&#xFF0C;&#x4E0B;&#x8F7D;&#x5730;&#x5740;android-ndk-r12b-darwin-x86_64.zip&#x7F16;&#x8BD1;C++&#x90E8;&#x5206;&#x4EE3;&#x7801;1234bazel build -c opt //tensorflow/contrib/android:libtensorflow_inference.so \ --crosstool_top=//external:android/crosstool \ --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \ --cpu=armeabi-v7a&#x5982;&#x679C;&#x4F60;&#x9700;&#x8981;&#x6784;&#x5EFA;&#x5176;&#x4ED6;cpu&#x7ED3;&#x6784;&#x7684;so&#xFF0C;&#x8BF7;&#x81EA;&#x884C;&#x4FEE;&#x6539;armeabi-v7a&#x4E3A;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#xFF0C;&#x6BD4;&#x5982;&#x4FEE;&#x6539;&#x4E3A;x86_64&#x6784;&#x5EFA;&#x597D;&#x7684;so&#x4F4D;&#x4E8E; bazel-bin/tensorflow/contrib/android/libtensorflow_inference.so&#xFF0C;&#x5982;&#x56FE;&#x6240;&#x793A;&#x5C06;libtensorflow_inference.so&#x62F7;&#x8D1D;&#x51FA;&#x6765;&#x5907;&#x4EFD;&#x8D77;&#x6765;&#xFF0C;&#x56E0;&#x4E3A;&#x4E0B;&#x4E00;&#x6B65;&#x6784;&#x5EFA;java&#x4EE3;&#x7801;&#x65F6;&#xFF0C;&#x6B64;&#x6587;&#x4EF6;&#x4F1A;&#x88AB;&#x5220;&#x9664;&#x3002;&#x7F16;&#x8BD1;java&#x90E8;&#x5206;&#x4EE3;&#x7801;1bazel build //tensorflow/contrib/android:android_tensorflow_inference_java&#x7F16;&#x8BD1;&#x597D;&#x7684;jar&#x4F4D;&#x4E8E; bazel-bin/tensorflow/contrib/android/libandroid_tensorflow_inference_java.jar&#xFF0C;&#x5982;&#x56FE;&#x6240;&#x793A;&#x7136;&#x540E;&#x5C06;libandroid_tensorflow_inference_java.jar&#x548C;libtensorflow_inference.so&#x7ED3;&#x5408;&#x8D77;&#x6765;&#xFF0C;&#x53D1;&#x5E03;&#x5230;maven&#xFF0C;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x4F9D;&#x8D56;&#x7684;org.tensorflow:tensorflow-android:1.2.0-rc0&#x4E86;&#x3002;&#x7F16;&#x8BD1;PC&#x4E0A;&#x7684;Java&#x7248;TensorFlow&#x4E0D;&#x591A;&#x8BF4;&#xFF0C;&#x548C;NDK&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DEE;&#x4E0D;&#x591A;&#xFF0C;&#x7F16;&#x8BD1;&#x811A;&#x672C;1234./configurebazel build --config opt \ //tensorflow/java:tensorflow \ //tensorflow/java:libtensorflow_jni&#x7F16;&#x8BD1;&#x4EA7;&#x7269;&#x4F4D;&#x4E8E;bazel-bin/tensorflow/java&#xFF0C;&#x8BE5;&#x76EE;&#x5F55;&#x4E0B;&#x6709;libtensorflow.jar&#x6587;&#x4EF6;libtensorflow_jni.so(linux)&#x6216;libtensorflow_jni.dylib(mac)&#x6216;tensorflow_jni.dll(windows&#xFF0C;&#x6CE8;&#xFF1A;mac&#x65E0;&#x6CD5;&#x7F16;&#x8BD1;&#x51FA;dll)&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x56FE;&#x6240;&#x793A;&#x7F16;&#x8BD1;&#x65F6;&#x4F9D;&#x8D56;&#xFF0C;&#x8BF7;&#x6DFB;&#x52A0;libtensorflow.jar1javac -cp bazel-bin/tensorflow/java/libtensorflow.jar ...&#x8FD0;&#x884C;&#x671F;&#x4F9D;&#x8D56;&#xFF0C;&#x8BF7;&#x6DFB;&#x52A0;libtensorflow.jar&#x548C;libtensorflow_jni&#x7684;&#x8DEF;&#x5F84;123java -cp bazel-bin/tensorflow/java/libtensorflow.jar \ -Djava.library.path=bazel-bin/tensorflow/java \ ...&#x603B;&#x7ED3;&#x5F53;&#x7136;&#x4E00;&#x822C;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x81EA;&#x5DF1;&#x53BB;&#x7F16;&#x8BD1;TensorFlow&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x7F16;&#x8BD1;&#x597D;&#x7684;&#x73B0;&#x6210;&#x5E93;&#x5373;&#x53EF;&#x3002;&#x5199;&#x4E86;&#x8FD9;&#x4E48;&#x591A;&#xFF0C;&#x53EF;&#x662F;&#x5B9D;&#x5B9D;&#x8FD8;&#x662F;&#x4E0D;&#x4F1A;TensorFlow~]]></content>
      <categories>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
        <tag>机器学习，Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Gradle Plugin 源码阅读与编译]]></title>
    <url>%2F2017%2F06%2F01%2FAndroid-Gradle-Plugin%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%8E%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x4E3A;&#x4E86;&#x89E3;&#x4E00;&#x4E9B;Andorid&#x7684;&#x6784;&#x5EFA;&#x6D41;&#x7A0B;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x9700;&#x8981;&#x9605;&#x8BFB;Android Gradle Plugin&#x7684;&#x76F8;&#x5173;&#x6E90;&#x7801;&#x7684;&#x3002;&#x81EA;&#x5DF1;&#x9605;&#x8BFB;Android Gradle Plugin&#x6E90;&#x7801;&#x4E3B;&#x8981;&#x7ECF;&#x5386;&#x4E86;&#x4E09;&#x4E2A;&#x65F6;&#x671F;&#xFF1A;1&#x3001;AOSP&#x4E0A;&#x6253;&#x5305;&#x6E90;&#x7801;&#x538B;&#x7F29;&#x5305;&#xFF0C;&#x7136;&#x540E;&#x4E0B;&#x8F7D;&#x4E0B;&#x6765;&#x770B;2&#x3001;&#x901A;&#x8FC7;&#x4F9D;&#x8D56;&#x76F8;&#x5173;&#x5E93;&#xFF0C;&#x7ED3;&#x5408;IntelliJ IDEA&#x7684;&#x5FEB;&#x6377;&#x952E;&#xFF1A;Command+&#x5DE6;&#x952E;&#x3001;Alt+Command+F7 &#x8DDF;&#x8E2A;&#x6E90;&#x7801;&#x8C03;&#x7528;&#x6765;&#x770B;3&#x3001;repo&#x4E0B;&#x8F7D;AOSP&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#x5206;&#x652F;&#x4E0A;&#x7684;&#x6E90;&#x7801;&#xFF0C;&#x5B8C;&#x6574;&#x9879;&#x76EE;&#x5BFC;&#x5165;IntelliJ IDEA&#x770B;&#x65B9;&#x5F0F;1&#xFF1A;AOSP&#x4E0A;&#x6253;&#x5305;&#x6E90;&#x7801;&#x4E3A;&#x538B;&#x7F29;&#x5305;AOSP&#x4E0A;&#x6253;&#x4E86;tag&#x7684;&#x7248;&#x672C;&#xFF0C;&#x8C8C;&#x4F3C;&#x53EA;&#x6709;&#x6574;&#x6570;&#x7684;&#x5927;&#x7248;&#x672C;&#xFF0C;&#x6CA1;&#x6709;&#x5C0F;&#x7248;&#x672C;&#xFF0C;&#x5373;&#x53EA;&#x6709;2.3.0&#x3001;2.2.0&#x3001;2.0.0&#x3001;1.5.0&#x7B49;&#xFF0C;&#x6CA1;&#x6709;2.3.2&#x7B49;&#x7248;&#x672C;&#xFF0C;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x3002;gradle_2.3.0 &#x6E90;&#x7801;gradle_2.2.0 &#x6E90;&#x7801;gradle_2.0.0 &#x6E90;&#x7801;gradle_1.5.0 &#x6E90;&#x7801;gradle_1.2.0 &#x6E90;&#x7801;gradle_1.1.0 &#x6E90;&#x7801;gradle_1.0.0 &#x6E90;&#x7801;&#x6253;&#x5F00;&#x4E0A;&#x9762;&#x81EA;&#x5DF1;&#x9700;&#x8981;&#x7684;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#x7684;&#x94FE;&#x63A5;&#xFF0C;&#x70B9;&#x51FB;&#x9875;&#x9762;&#x4E0A;&#x7684;tgz&#x94FE;&#x63A5;&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x4F1A;&#x4E0B;&#x8F7D;&#x4E0B;&#x6765;&#x4E00;&#x4E2A;&#x538B;&#x7F29;&#x5305;&#xFF0C;&#x89E3;&#x538B;&#x6B64;&#x538B;&#x7F29;&#x5305;&#xFF0C;&#x7136;&#x540E;&#x5BFC;&#x5165;Android Studio&#x6216;&#x8005;IntelliJ IDEA&#xFF0C;&#x5373;&#x53EF;&#x67E5;&#x770B;&#x3002;&#x4F46;&#x662F;&#x6709;&#x7F3A;&#x9677;&#xFF0C;&#x5BFC;&#x5165;&#x9879;&#x76EE;&#x540E;&#x7531;&#x4E8E;&#x7F3A;&#x5C11;&#x4E86;&#x5F88;&#x5927;&#x4E00;&#x90E8;&#x5206;&#x4F9D;&#x8D56;&#xFF0C;&#x5BFC;&#x81F4;&#x9879;&#x76EE;&#x5927;&#x7247;&#x7206;&#x7EA2;&#xFF0C;&#x52A0;&#x4E0A;&#x6CA1;&#x6709;&#x76F8;&#x5173;&#x7684;&#x9879;&#x76EE;&#x95F4;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#xFF0C;&#x7EDD;&#x5927;&#x90E8;&#x5206;&#x4EE3;&#x7801;&#x65E0;&#x6CD5;&#x8FDB;&#x884C;&#x8DF3;&#x8F6C;&#xFF0C;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x624B;&#x52A8;&#x641C;&#x7D22;&#x4EE3;&#x7801;&#xFF0C;&#x627E;&#x5230;&#x4EE3;&#x7801;&#x8C03;&#x7528;&#x5904;&#xFF0C;&#x6781;&#x5176;&#x75DB;&#x82E6;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x4E0D;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;&#x6B64;&#x65B9;&#x6CD5;&#x9605;&#x8BFB;&#x6E90;&#x7801;&#xFF0C;&#x540E;&#x671F;&#xFF0C;&#x81EA;&#x5DF1;&#x4E5F;&#x4E0D;&#x518D;&#x901A;&#x8FC7;&#x6B64;&#x65B9;&#x6CD5;&#x67E5;&#x770B;&#x6E90;&#x7801;&#x4E86;&#xFF0C;&#x592A;&#x86CB;&#x75BC;&#x3002;&#x65B9;&#x5F0F;2&#xFF1A;&#x901A;&#x8FC7;&#x4F9D;&#x8D56;&#x76F8;&#x5173;&#x5E93;&#x67E5;&#x770B;&#x6E90;&#x7801;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x6BD4;&#x8F83;&#x8F7B;&#x91CF;&#xFF0C;&#x5EFA;&#x8BAE;&#x521D;&#x5B66;&#x8005;&#x901A;&#x8FC7;&#x6B64;&#x65B9;&#x5F0F;&#x5B66;&#x4E60;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;Gradle&#x9879;&#x76EE;&#xFF0C;&#x5728;&#x5176;&#x4F9D;&#x8D56;&#x4E2D;&#x52A0;&#x5165;&#x4E24;&#x884C;&#x4F9D;&#x8D56;&#xFF0C;&#x5982;&#x6211;&#x8981;&#x67E5;&#x770B;gradle2.3.2&#x7684;&#x6E90;&#x7801;&#x53EA;&#x9700;&#x8981;&#x52A0;&#x5165;&#x4F9D;&#x8D56;12compile gradleApi()compile &apos;com.android.tools.build:gradle:2.3.2&apos;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x53EF;&#x80FD;&#x5E76;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x7684;android gradle plugin&#x7248;&#x672C;&#x90FD;&#x9644;&#x5E26;&#x6709;&#x6E90;&#x7801;&#x7684;jar&#xFF0C;&#x5982;&#x679C;&#x9047;&#x5230;&#x4E86;&#x4E00;&#x4E9B;&#x6CA1;&#x6709;&#x6E90;&#x7801;&#x7684;&#xFF0C;&#x5373;&#x6253;&#x5F00;&#x540E;&#x770B;&#x5230;&#x7684;&#x5185;&#x5BB9;&#x662F;&#x53CD;&#x7F16;&#x8BD1;&#x7684;class&#x6216;&#x8005;&#x662F;&#x6CA1;&#x6709;javadoc&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4F60;&#x6700;&#x597D;&#x6362;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#x3002;&#x6211;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x793A;&#x4F8B;&#x9879;&#x76EE;https://github.com/lizhangqu/AndroidGradlePluginCodeViewer&#xFF0C;&#x4F7F;&#x7528;IntelliJ IDEA&#x5BFC;&#x5165;&#x5373;&#x53EF;&#xFF0C;&#x5982;&#x56FE;&#x4E4B;&#x540E;&#xFF0C;&#x7ED3;&#x5408;Command+&#x5DE6;&#x952E;&#x6216;&#x8005;Alt+Command+F7&#x5C31;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x6E90;&#x7801;&#x5BF9;&#x5E94;&#x7684;&#x8C03;&#x7528;&#x5904;&#xFF0C;&#x8DDF;&#x8E2A;&#x67E5;&#x770B;&#x4E86;&#x3002;&#x65B9;&#x5F0F;3&#xFF1A;repo&#x4E0B;&#x8F7D;AOSP&#x5B8C;&#x6574;gradle&#x6E90;&#x7801;&#x5982;&#x679C;&#x4F60;&#x6709;&#x7F16;&#x8BD1;Android Gradle Plugin&#x7684;&#x9700;&#x6C42;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6B64;&#x65B9;&#x6CD5;&#x3002;&#x5F53;&#x7136;&#x7F3A;&#x70B9;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x9879;&#x76EE;&#x5341;&#x5206;&#x5DE8;&#x5927;&#xFF0C;&#x9700;&#x8981;&#x5360;&#x7528;&#x5927;&#x91CF;&#x7684;&#x786C;&#x76D8;&#x8D44;&#x6E90;&#xFF0C;&#x5982;&#x679C;&#x786C;&#x76D8;&#x8D44;&#x6E90;&#x4E0D;&#x8DB3;&#xFF0C;&#x5EFA;&#x8BAE;&#x8FD8;&#x662F;&#x4E0D;&#x8981;&#x5C1D;&#x8BD5;&#x4E86;&#xFF0C;&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A;gradle_2.3.0&#x5206;&#x652F;&#x4E0A;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5927;&#x6982;&#x91CA;&#x653E;&#x540E;&#x6709;30G&#x5DE6;&#x53F3;&#x3002;1234$ mkdir gradle_2.3.0$ cd gradle_2.3.0$ repo init -u https://android.googlesource.com/platform/manifest -b gradle_2.3.0$ repo sync&#x6E90;&#x7801;&#x540C;&#x6B65;&#x65F6;&#x95F4;&#x8F83;&#x957F;&#xFF0C;&#x5927;&#x6982;&#x9700;&#x8981;1-3&#x5C0F;&#x65F6;&#xFF0C;&#x8010;&#x5FC3;&#x7B49;&#x5F85;&#x3002;&#x56FD;&#x5185;&#x5899;&#x53EF;&#x80FD;&#x592A;&#x9AD8;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E2D;&#x56FD;&#x79D1;&#x5B66;&#x6280;&#x672F;&#x5927;&#x5B66;&#x7684;AOSP&#x6E90;&#x6216;&#x8005;&#x6E05;&#x534E;&#x5927;&#x5B66;&#x7684;AOSP&#x6E90;&#x6E05;&#x534E;&#x5927;&#x5B66;&#x7684;AOSP&#x6E90;&#x4E2D;&#x56FD;&#x79D1;&#x5B66;&#x6280;&#x672F;&#x5927;&#x5B66;&#x7684;AOSP&#x6E90;&#x5982;&#x679C;repo init &#x63D0;&#x793A;&#x65E0;&#x6CD5;&#x8FDE;&#x63A5;&#x5230; gerrit.googlesource.com&#xFF0C;&#x67E5;&#x770B;&#x5BF9;&#x5E94;&#x7684;&#x6E90;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x9875;&#x9762;&#x8FDB;&#x884C;&#x89E3;&#x51B3;&#x6E05;&#x534E;&#x5927;&#x5B66; Git Repo &#x955C;&#x50CF;&#x4F7F;&#x7528;&#x5E2E;&#x52A9;&#x4E2D;&#x56FD;&#x79D1;&#x5B66;&#x6280;&#x672F;&#x5927;&#x5B66; &#x9644;&#x5F55;_brillo&#x540C;&#x6B65;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x8FDB;&#x5165;gradle_2.3.0/tools&#x76EE;&#x5F55;&#xFF0C;&#x7528;gradlew&#x6267;&#x884C;&#x4E00;&#x4E9B;&#x6784;&#x5EFA;&#x524D;&#x7684;&#x521D;&#x59CB;&#x5316;&#x5DE5;&#x4F5C;12$ cd tools$ ./gradlew init&#x4E4B;&#x540E;&#x7528;IntelliJ IDEA&#x6253;&#x5F00;tools/base&#x76EE;&#x5F55;&#x5373;&#x53EF;&#x67E5;&#x770B;&#xFF0C;&#x8BE5;&#x76EE;&#x5F55;&#x4E0B;&#x6709;&#x4E00;&#x4E2A;.idea&#x76EE;&#x5F55;&#xFF0C;&#x5DF2;&#x7ECF;&#x662F;IntelliJ IDEA&#x9879;&#x76EE;&#x4E86;&#xFF0C;&#x76F4;&#x63A5;&#x6253;&#x5F00;&#x5373;&#x53EF;&#x5BFC;&#x5165;&#x8FC7;&#x7A0B;&#x6BD4;&#x8F83;&#x6F2B;&#x957F;&#xFF0C;&#x8010;&#x5FC3;&#x7B49;&#x5F85;&#x3002;&#x5BFC;&#x5165;&#x8FC7;&#x7A0B;&#x4F1A;&#x63D0;&#x793A;&#x662F;&#x5426;&#x5BFC;&#x5165;&#x6210;gradle&#x9879;&#x76EE;&#xFF0C;&#x5982;&#x56FE;&#xFF0C;&#x70B9;&#x51FB;Import Gradle Project&#x5373;&#x53EF;&#x7136;&#x540E;&#x52FE;&#x9009;use gradle wrapper&#x5BFC;&#x5165;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x5927;&#x6982;&#x5C31;&#x957F;&#x8FD9;&#x6837;&#x5B50;&#xFF0C;gradle plugin&#x7684;&#x6E90;&#x7801;&#x5728;tools/base/build-system&#x4E0B;&#x5047;&#x8BBE;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E3A;gradle_2.3.0/tools&#x76EE;&#x5F55;&#xFF0C;&#x8FDB;&#x884C;android gradle plugin&#x7684;&#x7F16;&#x8BD1;12345678910111213./gradlew :base:profile:assemble./gradlew :base:builder-model:assemble./gradlew :base:builder-test-api:assemble./gradlew :base:builder:assemble./gradlew :base:transform-api:assemble./gradlew :base:gradle-api:assemble./gradlew :base:gradle-core:assemble./gradlew :base:instant-run-instrumentation:assemble./gradlew :base:gradle:assemble./gradlew :base:gradle-experimental:assemble./gradlew :base:integration-test:assemble./gradlew :base:project-test-lib:assemble./gradlew :base:project-test:assemble&#x7F16;&#x8BD1;&#x4EA7;&#x7269;&#x4F4D;&#x4E8E;gradle_2.3.0/out/build&#x76EE;&#x5F55;&#x4E0B;&#x5047;&#x8BBE;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E3A;gradle_2.3.0/tools&#x76EE;&#x5F55;&#xFF0C;&#x5C06;android gradle plugin&#x90E8;&#x7F72;&#x5230;&#x672C;&#x5730;12345678910111213./gradlew :base:profile:publishLocal./gradlew :base:builder-model:publishLocal./gradlew :base:builder-test-api:publishLocal./gradlew :base:builder:publishLocal./gradlew :base:transform-api:publishLocal./gradlew :base:gradle-api:publishLocal./gradlew :base:gradle-core:publishLocal./gradlew :base:instant-run-instrumentation:publishLocal./gradlew :base:gradle:publishLocal./gradlew :base:gradle-experimental:publishLocal./gradlew :base:integration-test:publishLocal./gradlew :base:project-test-lib:publishLocal./gradlew :base:project-test:publishLocal&#x90E8;&#x7F72;&#x4EA7;&#x7269;&#x4F4D;&#x4E8E;gradle_2.3.0/out/repo&#x76EE;&#x5F55;&#x4E0B;&#x90A3;&#x4E48;&#x5982;&#x4F55;&#x5C06;&#x6211;&#x4EEC;&#x9879;&#x76EE;&#x4E2D;&#x7684;gradle&#x63D2;&#x4EF6;&#x66FF;&#x6362;&#x4E3A;&#x4F7F;&#x7528;&#x6784;&#x5EFA;&#x597D;&#x7684;&#x63D2;&#x4EF6;&#x5462;&#x5047;&#x8BBE;&#x73B0;&#x6709;&#x9879;&#x76EE;&#x4E2D;&#x7684;&#x4F9D;&#x8D56;&#x662F;&#x8FD9;&#x6837;&#x7684;12345678buildscript { repositories { mavenCentral() } dependencies { classpath &apos;com.android.tools.build:gradle:2.3.0&apos; }}&#x9700;&#x8981;&#x5C06;&#x5176;&#x6307;&#x5B9A;&#x5230;&#x672C;&#x5730;&#x7684;&#x90E8;&#x7F72;&#x4EA7;&#x7269;&#x6240;&#x5728;repo12345678buildscript { repositories { maven {url &apos;path/to/gradle_2.3.0/out/repo&apos; } } dependencies { classpath &apos;com.android.tools.build:gradle:2.3.0&apos; }}&#x5BF9;&#x6BD4;&#x603B;&#x7ED3;&#x65B9;&#x5F0F;1&#xFF0C;&#x7F3A;&#x70B9;&#x660E;&#x663E;&#xFF0C;&#x5927;&#x7247;&#x7206;&#x7EA2;&#xFF0C;&#x4E0D;&#x80FD;&#x826F;&#x597D;&#x7684;&#x8FDB;&#x884C;&#x4EE3;&#x7801;&#x8DF3;&#x8F6C;&#x65B9;&#x5F0F;2&#xFF0C;&#x4F18;&#x70B9;&#x662F;&#x5360;&#x7528;&#x8D44;&#x6E90;&#x5C11;&#xFF0C;&#x5FEB;&#x901F;&#xFF0C;&#x65B9;&#x4FBF;&#xFF0C;&#x56E0;&#x6B64;&#x4F18;&#x5148;&#x63A8;&#x8350;&#x6B64;&#x65B9;&#x5F0F;&#xFF0C;&#x7F3A;&#x70B9;&#x662F;&#x53EA;&#x80FD;&#x9605;&#x8BFB;&#xFF0C;&#x4E0D;&#x80FD;&#x7F16;&#x8BD1;&#x3001;debug&#x4E86;&#x89E3;&#x5176;&#x6574;&#x4E2A;&#x8BE6;&#x7EC6;&#x8FC7;&#x7A0B;&#x65B9;&#x5F0F;3&#xFF0C;&#x4F18;&#x70B9;&#x662F;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#x3001;debug&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x7F3A;&#x70B9;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x786C;&#x76D8;&#x8D44;&#x6E90;&#x5360;&#x7528;&#x8FC7;&#x5927;&#xFF0C;&#x6CA1;&#x6709;30G&#x7684;&#x7A7A;&#x4F59;&#x7A7A;&#x95F4;&#xFF0C;&#x4E0D;&#x9002;&#x5408;&#x5C1D;&#x8BD5;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5BF9;Mac&#x7528;&#x6237;&#x6765;&#x8BF4;&#xFF0C;SSD&#x53EF;&#x80FD;&#x8FC7;&#x5C0F;&#xFF0C;&#x6CA1;&#x6709;&#x8FD9;&#x4E48;&#x5927;&#x7684;&#x7A7A;&#x95F4;&#x3002;&#x6E90;&#x7801;&#x540C;&#x6B65;&#x65F6;&#x95F4;&#x8F83;&#x957F;&#xFF0C;&#x9700;&#x8981;&#x8017;&#x8D39;1-3&#x4E2A;&#x5C0F;&#x65F6;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5BF9;&#x4E8E;&#x521D;&#x5B66;&#x8005;&#x6765;&#x8BF4;&#xFF0C;&#x65B9;&#x5F0F;2&#x4E3A;&#x6700;&#x4F18;&#x9009;&#x62E9;&#x3002;&#x9898;&#x5916;&#x8BDD;&#xFF1A;instant run&#x6E90;&#x7801;&#x7F16;&#x8BD1;&#x53CA;&#x90E8;&#x7F72;&#x65E2;&#x7136;&#x90FD;&#x8BB2;&#x5230;&#x4E86;android gradle plugin&#x7684;&#x7F16;&#x8BD1;&#xFF0C;&#x800C;instant run&#x6E90;&#x7801;&#x521A;&#x597D;&#x4E5F;&#x5728;tools/base&#x4E0B;&#xFF0C;&#x987A;&#x5E26;&#x5C31;&#x8BB2;&#x8BB2;instant run&#x7684;&#x7F16;&#x8BD1;&#x5047;&#x8BBE;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E3A;gradle_2.3.0/tools&#x76EE;&#x5F55;&#x7F16;&#x8BD1;12345./gradlew :base:instant-run:instant-run-annotations:assemble./gradlew :base:instant-run:instant-run-common:assemble./gradlew :base:instant-run:instant-run-client:assemble./gradlew :base:instant-run:instant-run-runtime:assemble./gradlew :base:instant-run:instant-run-server:assemble&#x90E8;&#x7F72;12345./gradlew :base:instant-run:instant-run-annotations:publishLocal./gradlew :base:instant-run:instant-run-common:publishLocal./gradlew :base:instant-run:instant-run-client:publishLocal./gradlew :base:instant-run:instant-run-runtime:publishLocal./gradlew :base:instant-run:instant-run-server:publishLocal&#x53C2;&#x8003;&#x94FE;&#x63A5;http://tools.android.com/build/gradlepluginhttp://tools.android.com/buildhttp://source.android.com/source/downloading.htmlhttps://mirrors.tuna.tsinghua.edu.cn/help/AOSP/https://lug.ustc.edu.cn/wiki/mirrors/help/aosp]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gradle</tag>
        <tag>Instant Run</tag>
        <tag>AOSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CURL NDK 交叉编译]]></title>
    <url>%2F2017%2F05%2F24%2FCURL-NDK%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[&#x79FB;&#x690D;curl&#x5230;android&#xFF0C;&#x4E14;&#x652F;&#x6301;https&#x548C;http2.0&#x4F9D;&#x8D56;&#x524D;&#x4E24;&#x7BC7;&#x6587;&#x7AE0;libnghttp2 NDK &#x4EA4;&#x53C9;&#x7F16;&#x8BD1;openssl NDK &#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x521B;&#x5EFA;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x8FDB;&#x5165;12mkdir androidcd android&#x4E0B;&#x8F7D;&#x6E90;&#x7801;12wget https://curl.haxx.se/download/curl-7.53.1.tar.gztar xfz url-7.53.1.tar.gz&#x751F;&#x6210;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;1$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchain&#x5BFC;&#x51FA;&#x73AF;&#x5883;&#x53D8;&#x91CF;(armeabi)123456789101112131415161718export ANDROID_HOME=`pwd`export TOOLCHAIN=$ANDROID_HOME/toolchainexport PKG_CONFIG_LIBDIR=$TOOLCHAIN/lib/pkgconfigexport CROSS_SYSROOT=$TOOLCHAIN/sysrootexport PATH=$TOOLCHAIN/bin:$PATHexport TOOL=arm-linux-androideabiexport CC=$TOOLCHAIN/bin/${TOOL}-gccexport CXX=$TOOLCHAIN/bin/${TOOL}-g++export LINK=${CXX}export LD=$TOOLCHAIN/bin/${TOOL}-ldexport AR=$TOOLCHAIN/bin/${TOOL}-arexport RANLIB=$TOOLCHAIN/bin/${TOOL}-ranlibexport STRIP=$TOOLCHAIN/bin/${TOOL}-stripexport ARCH_FLAGS=&quot;-mthumb&quot;export ARCH_LINK=export CFLAGS=&quot;${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64&quot;export CXXFLAGS=&quot;${CFLAGS} -frtti -fexceptions&quot;export LDFLAGS=&quot;${ARCH_LINK}&quot;&#x7F16;&#x8BD1;&#x5E76;&#x5B89;&#x88C5;12345678910111213141516171819202122cd curl-7.53.1autoreconf -i./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \ --host=arm-linux-androideabi \ --with-ssl=$TOOLCHAIN/sysroot/usr/local \ --with-nghttp2=$TOOLCHAIN/sysroot/usr/local \ --enable-ipv6 \ --enable-static \ --enable-threaded-resolver \ --disable-dict \ --disable-gopher \ --disable-ldap --disable-ldaps \ --disable-manual \ --disable-pop3 --disable-smtp --disable-imap \ --disable-rtsp \ --disable-shared \ --disable-smb \ --disable-telnet \ --disable-verbosemake -j4make install&#x5378;&#x8F7D;1make uninstallconfigure&#x5B8C;&#x6210;&#x540E;&#x68C0;&#x67E5;&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x662F;&#x5426;enable ssl, enable https, enable http2.01234567891011121314151617181920212223242526272829303132333435Configured to build curl/libcurl: curl version: 7.53.1 Host setup: arm-unknown-linux-androideabi Install prefix: /Users/lizhangqu/Desktop/android/toolchain/sysroot/usr/local Compiler: /Users/lizhangqu/Desktop/android/toolchain/bin/arm-linux-androideabi-gcc SSL support: enabled (OpenSSL) SSH support: no (--with-libssh2) zlib support: enabled GSS-API support: no (--with-gssapi) TLS-SRP support: enabled resolver: POSIX threaded IPv6 support: enabled Unix sockets support: enabled IDN support: no (--with-{libidn2,winidn}) Build libcurl: Shared=no, Static=yes Built-in manual: no (--enable-manual) --libcurl option: enabled (--disable-libcurl-option) Verbose errors: no SSPI support: no (--enable-sspi) ca cert bundle: no ca cert path: no ca fallback: no LDAP support: no (--enable-ldap / --with-ldap-lib / --with-lber-lib) LDAPS support: no (--enable-ldaps) RTSP support: no (--enable-rtsp) RTMP support: no (--with-librtmp) metalink support: no (--with-libmetalink) PSL support: no (libpsl not found) HTTP2 support: enabled (nghttp2) Protocols: FILE FTP FTPS HTTP HTTPS TFTP SONAME bump: yes - WARNING: this library will be built with the SONAME number bumped due to (a detected) ABI breakage. See lib/README.curl_off_t for details on this.armeabi-v7a1234567891011121314151617181920212223$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchainexport TOOL=arm-linux-androideabiexport ARCH_FLAGS=&quot;-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16&quot;export ARCH_LINK=&quot;-march=armv7-a -Wl,--fix-cortex-a8&quot;./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \ --host=arm-linux-androideabi \ --with-ssl=$TOOLCHAIN/sysroot/usr/local \ --with-nghttp2=$TOOLCHAIN/sysroot/usr/local \ --enable-ipv6 \ --enable-static \ --enable-threaded-resolver \ --disable-dict \ --disable-gopher \ --disable-ldap --disable-ldaps \ --disable-manual \ --disable-pop3 --disable-smtp --disable-imap \ --disable-rtsp \ --disable-shared \ --disable-smb \ --disable-telnet \ --disable-verbosex861234567891011121314151617181920212223$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=x86 --install-dir=./toolchainexport TOOL=i686-linux-androidexport ARCH_FLAGS=&quot;-march=i686 -msse3 -mstackrealign -mfpmath=sse&quot;export ARCH_LINK=&quot;&quot;./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \ --host=i686-linux-android \ --with-ssl=$TOOLCHAIN/sysroot/usr/local \ --with-nghttp2=$TOOLCHAIN/sysroot/usr/local \ --enable-ipv6 \ --enable-static \ --enable-threaded-resolver \ --disable-dict \ --disable-gopher \ --disable-ldap --disable-ldaps \ --disable-manual \ --disable-pop3 --disable-smtp --disable-imap \ --disable-rtsp \ --disable-shared \ --disable-smb \ --disable-telnet \ --disable-verbose&#x4F55;&#x5927;&#x4ED9;&#x63D0;&#x4F9B;&#x7684;shell&#x811A;&#x672C;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#!/bin/shif [! -f &quot;curl-7.53.1.tar.gz&quot; ]; then wget https://curl.haxx.se/download/curl-7.53.1.tar.gzfiif [! -d &quot;curl-7.53.1&quot; ]; then tar zxf curl-7.53.1.tar.gzfi# envif [-d &quot;out/curl&quot; ]; then rm -fr &quot;out/curl&quot;fimkdir &quot;out&quot;mkdir &quot;out/curl&quot;_compile() { SURFIX=$1 TOOL=$2 ARCH_FLAGS=$3 ARCH_LINK=$4 ARCH=$5 if [! -d &quot;out/curl/${SURFIX}&quot; ]; then mkdir &quot;out/curl/${SURFIX}&quot; fi if [! -d &quot;toolchain_${SURFIX}&quot; ]; then $ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=${ARCH} --install-dir=./toolchain_${SURFIX} fi export ANDROID_HOME=`pwd` export TOOLCHAIN=$ANDROID_HOME/toolchain_${SURFIX} export PKG_CONFIG_LIBDIR=$TOOLCHAIN/lib/pkgconfig export CROSS_SYSROOT=$TOOLCHAIN/sysroot export PATH=$TOOLCHAIN/bin:$PATH export CC=$TOOLCHAIN/bin/${TOOL}-gcc export CXX=$TOOLCHAIN/bin/${TOOL}-g++ export LINK=${CXX} export LD=$TOOLCHAIN/bin/${TOOL}-ld export AR=$TOOLCHAIN/bin/${TOOL}-ar export RANLIB=$TOOLCHAIN/bin/${TOOL}-ranlib export STRIP=$TOOLCHAIN/bin/${TOOL}-strip export ARCH_FLAGS=$ARCH_FLAGS export ARCH_LINK=$ARCH_LINK export CFLAGS=&quot;${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64&quot; export CXXFLAGS=&quot;${CFLAGS} -frtti -fexceptions&quot; export LDFLAGS=&quot;${ARCH_LINK}&quot; cd curl-7.53.1/ autoreconf -i ./configure --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-sysroot=$TOOLCHAIN/sysroot \ --host=${TOOL} \ --with-ssl=$TOOLCHAIN/sysroot/usr/local \ --with-nghttp2=$TOOLCHAIN/sysroot/usr/local \ --enable-ipv6 \ --enable-static \ --enable-threaded-resolver \ --disable-dict \ --disable-gopher \ --disable-ldap --disable-ldaps \ --disable-manual \ --disable-pop3 --disable-smtp --disable-imap \ --disable-rtsp \ --disable-shared \ --disable-smb \ --disable-telnet \ --disable-verbose make clean make -j4 make install cd .. mv curl-7.53.1/lib/.libs/libcurl.a out/curl/${SURFIX}/ }# arm_compile &quot;armeabi&quot; &quot;arm-linux-androideabi&quot; &quot;-mthumb&quot; &quot;&quot; &quot;arm&quot;# armv7_compile &quot;armeabi-v7a&quot; &quot;arm-linux-androideabi&quot; &quot;-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16&quot; &quot;-march=armv7-a -Wl,--fix-cortex-a8&quot; &quot;arm&quot;# arm64v8_compile &quot;arm64-v8a&quot; &quot;aarch64-linux-android&quot; &quot;&quot; &quot;&quot; &quot;arm64&quot;# x86_compile &quot;x86&quot; &quot;i686-linux-android&quot; &quot;-march=i686 -m32 -msse3 -mstackrealign -mfpmath=sse -mtune=intel&quot; &quot;&quot; &quot;x86&quot;# x86_64_compile &quot;x86_64&quot; &quot;x86_64-linux-android&quot; &quot;-march=x86-64 -m64 -msse4.2 -mpopcnt -mtune=intel&quot; &quot;&quot; &quot;x86_64&quot;# mips_compile &quot;mips&quot; &quot;mipsel-linux-android&quot; &quot;&quot; &quot;&quot; &quot;mips&quot;# mips64_compile &quot;mips64&quot; &quot;mips64el-linux-android&quot; &quot;&quot; &quot;&quot; &quot;mips64&quot;echo &quot;done&quot;]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>curl</tag>
        <tag>交叉编译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openssl NDK 交叉编译]]></title>
    <url>%2F2017%2F05%2F24%2Fopenssl-NDK%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[&#x79FB;&#x690D;openssl&#x5230;android&#x521B;&#x5EFA;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x8FDB;&#x5165;12mkdir androidcd android&#x4E0B;&#x8F7D;&#x6E90;&#x7801;12wget https://www.openssl.org/source/openssl-1.1.0e.tar.gztar xfz openssl-1.1.0e.tar.gz&#x751F;&#x6210;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;1$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchain&#x5BFC;&#x51FA;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#xFF08;armeabi&#xFF09;1234567891011121314151617export ANDROID_HOME=`pwd`export TOOLCHAIN=$ANDROID_HOME/toolchainexport CROSS_SYSROOT=$TOOLCHAIN/sysrootexport PATH=$TOOLCHAIN/bin:$PATHexport TOOL=arm-linux-androideabiexport CC=$TOOLCHAIN/bin/${TOOL}-gccexport CXX=$TOOLCHAIN/bin/${TOOL}-g++export LINK=${CXX}export LD=$TOOLCHAIN/bin/${TOOL}-ldexport AR=$TOOLCHAIN/bin/${TOOL}-arexport RANLIB=$TOOLCHAIN/bin/${TOOL}-ranlibexport STRIP=$TOOLCHAIN/bin/${TOOL}-stripexport ARCH_FLAGS=&quot;-mthumb&quot;export ARCH_LINK=export CFLAGS=&quot;${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64&quot;export CXXFLAGS=&quot;${CFLAGS} -frtti -fexceptions&quot;export LDFLAGS=&quot;${ARCH_LINK}&quot;&#x7F16;&#x8BD1;&#x5E76;&#x5B89;&#x88C5;1234567891011cd openssl-1.1.0e/./Configure android \ --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-zlib-include=$TOOLCHAIN/sysroot/usr/include \ --with-zlib-lib=$TOOLCHAIN/sysroot/usr/lib \ zlib \ no-asm \ no-shared \ no-unit-testmake -j4make install&#x5378;&#x8F7D;1make uninstallarmeabi-v7a12345678910111213$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchainexport TOOL=arm-linux-androideabiexport ARCH_FLAGS=&quot;-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16&quot;export ARCH_LINK=&quot;-march=armv7-a -Wl,--fix-cortex-a8&quot;./Configure android-armv7 \ --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-zlib-include=$TOOLCHAIN/sysroot/usr/include \ --with-zlib-lib=$TOOLCHAIN/sysroot/usr/lib \ zlib \ no-asm \ no-shared \ no-unit-testx8612345678910111213$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=x86 --install-dir=./toolchainexport TOOL=i686-linux-androidexport ARCH_FLAGS=&quot;-march=i686 -msse3 -mstackrealign -mfpmath=sse&quot;export ARCH_LINK=&quot;&quot;./Configure android-x86 \ --prefix=$TOOLCHAIN/sysroot/usr/local \ --with-zi686lib-include=$TOOLCHAIN/sysroot/usr/include \ --with-zlib-lib=$TOOLCHAIN/sysroot/usr/lib \ zlib \ no-asm \ no-shared \ no-unit-test&#x4F55;&#x5927;&#x4ED9;&#x63D0;&#x4F9B;&#x7684;shell&#x811A;&#x672C;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#!/bin/shif [! -f &quot;openssl-1.1.0e.tar.gz&quot; ]; then wget https://www.openssl.org/source/openssl-1.1.0e.tar.gzfiif [! -d &quot;openssl-1.1.0e&quot; ]; then tar zxf openssl-1.1.0e.tar.gzfi# envif [-d &quot;out/openssl&quot; ]; then rm -fr &quot;out/openssl&quot;fimkdir &quot;out&quot;mkdir &quot;out/openssl&quot;_compile() { SURFIX=$1 TOOL=$2 ARCH_FLAGS=$3 ARCH_LINK=$4 CFGNAME=$5 ARCH=$6 if [! -d &quot;out/openssl/${SURFIX}&quot; ]; then mkdir &quot;out/openssl/${SURFIX}&quot; fi if [! -d &quot;toolchain_${SURFIX}&quot; ]; then $ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=${ARCH} --install-dir=./toolchain_${SURFIX} fi export ANDROID_HOME=`pwd` export TOOLCHAIN=$ANDROID_HOME/toolchain_${SURFIX} export CROSS_SYSROOT=$TOOLCHAIN/sysroot export PATH=$TOOLCHAIN/bin:$PATH export CC=$TOOLCHAIN/bin/${TOOL}-gcc export CXX=$TOOLCHAIN/bin/${TOOL}-g++ export LINK=${CXX} export LD=$TOOLCHAIN/bin/${TOOL}-ld export AR=$TOOLCHAIN/bin/${TOOL}-ar export RANLIB=$TOOLCHAIN/bin/${TOOL}-ranlib export STRIP=$TOOLCHAIN/bin/${TOOL}-strip export ARCH_FLAGS=$ARCH_FLAGS export ARCH_LINK=$ARCH_LINK export CFLAGS=&quot;${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64&quot; export CXXFLAGS=&quot;${CFLAGS} -frtti -fexceptions&quot; export LDFLAGS=&quot;${ARCH_LINK}&quot; cd openssl-1.1.0e/ ./Configure ${CFGNAME} --prefix=$TOOLCHAIN/sysroot/usr/local --with-zlib-include=$TOOLCHAIN/sysroot/usr/include --with-zlib-lib=$TOOLCHAIN/sysroot/usr/lib zlib no-asm no-shared no-unit-test make clean make -j4 #make install make install_sw make install_ssldirs cd .. mv openssl-1.1.0e/libssl.a out/openssl/${SURFIX}/ mv openssl-1.1.0e/libcrypto.a out/openssl/${SURFIX}/}# arm_compile &quot;armeabi&quot; &quot;arm-linux-androideabi&quot; &quot;-mthumb&quot; &quot;&quot; &quot;android&quot; &quot;arm&quot;# armv7_compile &quot;armeabi-v7a&quot; &quot;arm-linux-androideabi&quot; &quot;-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16&quot; &quot;-march=armv7-a -Wl,--fix-cortex-a8&quot; &quot;android-armeabi&quot; &quot;arm&quot;# arm64v8_compile &quot;arm64-v8a&quot; &quot;aarch64-linux-android&quot; &quot;&quot; &quot;&quot; &quot;android64-aarch64&quot; &quot;arm64&quot;# x86_compile &quot;x86&quot; &quot;i686-linux-android&quot; &quot;-march=i686 -m32 -msse3 -mstackrealign -mfpmath=sse -mtune=intel&quot; &quot;&quot; &quot;android-x86&quot; &quot;x86&quot;# x86_64_compile &quot;x86_64&quot; &quot;x86_64-linux-android&quot; &quot;-march=x86-64 -m64 -msse4.2 -mpopcnt -mtune=intel&quot; &quot;&quot; &quot;android64&quot; &quot;x86_64&quot;# mips_compile &quot;mips&quot; &quot;mipsel-linux-android&quot; &quot;&quot; &quot;&quot; &quot;android-mips&quot; &quot;mips&quot;# mips64_compile &quot;mips64&quot; &quot;mips64el-linux-android&quot; &quot;&quot; &quot;&quot; &quot;linux64-mips64&quot; &quot;mips64&quot;echo &quot;done&quot;]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>交叉编译</tag>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[libnghttp2 NDK 交叉编译]]></title>
    <url>%2F2017%2F05%2F24%2Flibnghttp2-NDK%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[&#x79FB;&#x690D;nghttp2&#x5230;android&#x521B;&#x5EFA;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x8FDB;&#x5165;12mkdir androidcd androidclone&#x6E90;&#x7801;1git clone git@github.com:nghttp2/nghttp2.git&#x751F;&#x6210;&#x4EA4;&#x53C9;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x94FE;1$ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=./toolchain&#x5BFC;&#x51FA;&#x73AF;&#x5883;&#x53D8;&#x91CF;123456export CURRENT_HOME=`pwd`export TOOLCHAIN=$CURRENT_HOME/toolchainexport PATH=$TOOLCHAIN/bin:$PATHexport PKG_CONFIG_LIBDIR=$TOOLCHAIN/lib/pkgconfigexport CPPFLAGS=&quot;-fPIE -I$TOOLCHAIN/sysroot/usr/include&quot;export LDFLAGS=&quot;-fPIE -pie -I$TOOLCHAIN/sysroot/usr/lib&quot;&#x7F16;&#x8BD1;&#x5E76;&#x5B89;&#x88C5;123456789cd nghttp2autoreconf -i./configure --enable-lib-only \ --host=arm-linux-androideabi \ --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \ --disable-shared \ --prefix=&quot;$TOOLCHAIN/sysroot/usr/local&quot;makemake install&#x5378;&#x8F7D;1make uninstall&#x4F55;&#x5927;&#x4ED9;&#x63D0;&#x4F9B;&#x7684;shell&#x811A;&#x672C;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#!/bin/shif [! -d &quot;nghttp2&quot; ]; then git clone git@github.com:nghttp2/nghttp2.gitelse cd nghttp2 git pull cd ..fi# envif [-d &quot;out/nghttp2&quot; ]; then rm -fr &quot;out/nghttp2&quot;fimkdir &quot;out&quot;mkdir &quot;out/nghttp2&quot;_compile() { SURFIX=$1 TOOL=$2 ARCH_FLAGS=$3 ARCH_LINK=$4 ARCH=$5 if [! -d &quot;out/nghttp2/${SURFIX}&quot; ]; then mkdir &quot;out/nghttp2/${SURFIX}&quot; fi if [! -d &quot;toolchain_${SURFIX}&quot; ]; then $ANDROID_NDK/build/tools/make-standalone-toolchain.sh --arch=${ARCH} --install-dir=./toolchain_${SURFIX} fi export CURRENT_HOME=`pwd` export TOOLCHAIN=$CURRENT_HOME/toolchain_${SURFIX} export PATH=$TOOLCHAIN/bin:$PATH export PKG_CONFIG_LIBDIR=$TOOLCHAIN/lib/pkgconfig export ARCH_FLAGS=$ARCH_FLAGS export ARCH_LINK=$ARCH_LINK export CPPFLAGS=&quot;-fPIE -I$TOOLCHAIN/sysroot/usr/include&quot; export LDFLAGS=&quot;-fPIE -pie -I$TOOLCHAIN/sysroot/usr/lib&quot; cd nghttp2/ autoreconf -i ./configure --enable-lib-only --host=${TOOL} --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` --disable-shared --prefix=&quot;$TOOLCHAIN/sysroot/usr/local&quot; make clean make -j4 make install cd .. mv nghttp2/lib/.libs/libnghttp2.a out/nghttp2/${SURFIX}/}# arm_compile &quot;armeabi&quot; &quot;arm-linux-androideabi&quot; &quot;-mthumb&quot; &quot;&quot; &quot;arm&quot;# armv7_compile &quot;armeabi-v7a&quot; &quot;arm-linux-androideabi&quot; &quot;-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16&quot; &quot;-march=armv7-a -Wl,--fix-cortex-a8&quot; &quot;arm&quot;# arm64v8_compile &quot;arm64-v8a&quot; &quot;aarch64-linux-android&quot; &quot;&quot; &quot;&quot; &quot;arm64&quot;# x86_compile &quot;x86&quot; &quot;i686-linux-android&quot; &quot;-march=i686 -m32 -msse3 -mstackrealign -mfpmath=sse -mtune=intel&quot; &quot;&quot; &quot;x86&quot;# x86_64_compile &quot;x86_64&quot; &quot;x86_64-linux-android&quot; &quot;-march=x86-64 -m64 -msse4.2 -mpopcnt -mtune=intel&quot; &quot;&quot; &quot;x86_64&quot;# mips_compile &quot;mips&quot; &quot;mipsel-linux-android&quot; &quot;&quot; &quot;&quot; &quot;mips&quot;# mips64_compile &quot;mips64&quot; &quot;mips64el-linux-android&quot; &quot;&quot; &quot;&quot; &quot;mips64&quot;echo &quot;done&quot;]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>交叉编译</tag>
        <tag>nghttp2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio Library 模块中 Native 代码进行 debug 的一些坑]]></title>
    <url>%2F2017%2F05%2F11%2FAndroid-Studio-Library%E6%A8%A1%E5%9D%97%E4%B8%ADNative%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8Cdebug%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x5982;&#x679C;&#x9879;&#x76EE;&#x4E2D;&#x5B58;&#x5728;&#x591A;&#x4E2A;module&#xFF0C;&#x90A3;&#x4E48;&#x5728;application&#x6A21;&#x5757;&#x4E2D;&#x4F9D;&#x8D56;library&#x6A21;&#x5757;&#xFF0C;&#x5E76;&#x4E14;library&#x6A21;&#x5757;&#x4E2D;&#x6709;native&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5047;&#x8BBE;&#x4F60;&#x9700;&#x8981;debug library&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x8FD9;&#x4E9B;native&#x4EE3;&#x7801;&#xFF0C;&#x6B63;&#x5E38;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x90E8;&#x5206;native&#x4EE3;&#x7801;&#x662F;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x88AB;debug&#x7684;&#x3002;&#x5BFC;&#x81F4;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x6839;&#x672C;&#x539F;&#x56E0;&#x662F;&#x56E0;&#x4E3A;&#x5373;&#x4F7F;&#x5728;&#x8FD0;&#x884C;application&#x6A21;&#x5757;&#x7684;debug&#x6784;&#x5EFA;&#x65F6;&#xFF0C;&#x5176;&#x4F9D;&#x8D56;&#x7684;library&#x6A21;&#x5757;&#x5E76;&#x4E0D;&#x662F;&#x4EE5;debug&#x6784;&#x5EFA;&#xFF0C;&#x800C;&#x662F;&#x4EE5;release&#x6784;&#x5EFA;&#x3002;&#x9879;&#x76EE;&#x7ED3;&#x6784;&#x4F8B;&#x5B50;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#x89E3;&#x51B3;&#x4E0D;&#x80FD;debug&#x7684;&#x65B9;&#x5F0F;&#x6709;&#x4E24;&#x79CD;&#x3002;1&#x3001;&#x4E0D;&#x8FDB;&#x884C;StripSymbolDebugGralde&#x4E2D;&#x6709;&#x4E00;&#x4E2A;Task&#x53EB;transformNativeLibsWithStripDebugSymbolFor${BuildType}&#xFF0C;&#x5176;&#x5BF9;&#x5E94;&#x7684;&#x4EE3;&#x7801;&#x5728;com.android.build.gradle.internal.transforms.StripDebugSymbolTransform&#x4E2D;&#xFF0C;&#x7FFB;&#x770B;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#x5982;&#x4E0B;&#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031if (excludeMatchers.stream().anyMatch(m -&gt; m.matches(Paths.get(path)))) { FileUtils.mkdirs(strippedLib.getParentFile()); FileUtils.copyFile(input, strippedLib);} else { stripFile(input, strippedLib, abi);}private void stripFile(@NonNull File input, @NonNull File output, @Nullable Abi abi) throws IOException { FileUtils.mkdirs(output.getParentFile()); if (abi == null) { FileUtils.copyFile(input, output); return; } ProcessInfoBuilder builder = new ProcessInfoBuilder(); builder.setExecutable(stripExecutables.get(abi)); builder.addArgs(&quot;--strip-unneeded&quot;); builder.addArgs(&quot;-o&quot;); builder.addArgs(output.toString()); builder.addArgs(input.toString()); ILogger logger = new LoggerWrapper(project.getLogger()); ProcessResult result = new GradleProcessExecutor(project).execute( builder.createProcess(), new LoggedProcessOutputHandler(logger)); if (result.getExitValue() != 0) { logger.warning(&quot;Unable to strip library &apos;%s&apos;, packaging it as is.&quot;, input.getAbsolutePath()); FileUtils.copyFile(input, output); } }&#x5F53;&#x6EE1;&#x8DB3;excludeMatchers&#x4E2D;&#x7684;&#x6B63;&#x5219;&#x5339;&#x914D;&#x65F6;&#xFF0C;&#x8BE5;Task&#x6267;&#x884C;&#x7684;&#x662F;&#x76F4;&#x63A5;&#x62F7;&#x8D1D;so&#x6587;&#x4EF6;&#xFF0C;&#x800C;&#x4E0D;&#x6EE1;&#x8DB3;&#x65F6;&#xFF0C;&#x5219;&#x6267;&#x884C;&#x7684;&#x662F;strip&#x64CD;&#x4F5C;&#x3002;&#x800C;excludeMatchers&#x662F;&#x5728;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x88AB;&#x8D4B;&#x503C;&#x7684;123456789101112131415161718@NonNullprivate final Set&lt;PathMatcher&gt; excludeMatchers;public StripDebugSymbolTransform( @NonNull Project project, @NonNull NdkHandler ndkHandler, @NonNull Set&lt;String&gt; excludePattern) { this.excludeMatchers = excludePattern.stream() .map(StripDebugSymbolTransform::compileGlob) .collect(ImmutableCollectors.toImmutableSet()); checkArgument(ndkHandler.isConfigured()); for(Abi abi : ndkHandler.getSupportedAbis()) { stripExecutables.put(abi, ndkHandler.getStripExecutable(abi)); } this.project = project;}&#x67E5;&#x770B;&#x5176;&#x6784;&#x9020;&#x51FD;&#x6570;&#x88AB;&#x8C03;&#x7528;&#x7684;&#x5730;&#x65B9;123456789TransformManager transformManager = scope.getTransformManager();GlobalScope globalScope = scope.getGlobalScope();transformManager.addTransform( tasks, scope, new StripDebugSymbolTransform( globalScope.getProject(), globalScope.getNdkHandler(), globalScope.getExtension().getPackagingOptions().getDoNotStrip()));&#x4ECE;&#x4E0A;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5FFD;&#x7565;&#x5217;&#x8868;&#x662F;&#x4ECE;PackagingOptions&#x4E2D;&#x7684;DoNotStrip&#x4F20;&#x5165;&#x3002;&#x90A3;&#x4E48;&#x95EE;&#x9898;&#x5C31;&#x597D;&#x529E;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x5728;library&#x6A21;&#x5757;&#x548C;application&#x6A21;&#x5757;&#x4E2D;&#x52A0;&#x5165;&#x5FFD;&#x7565;strip&#x7684;&#x6B63;&#x5219;&#x5339;&#x914D;&#x5373;&#x53EF;&#xFF0C;&#x5982;&#x4E0B;12345678910111213android { //... packagingOptions { doNotStrip &quot;*/armeabi/*.so&quot; doNotStrip &quot;*/armeabi-v7a/*.so&quot; doNotStrip &quot;*/arm64-v8a/*.so&quot; doNotStrip &quot;*/x86/*.so&quot; doNotStrip &quot;*/x86_64/*.so&quot; doNotStrip &quot;*/mips/*.so&quot; doNotStrip &quot;*/mips64/*.so&quot; //... }}&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;library&#x6A21;&#x5757;&#x548C;application&#x6A21;&#x5757;&#x4E2D;&#x7684;gradle&#x90FD;&#x9700;&#x8981;&#x52A0;&#x5165;&#x3002;&#x4F46;&#x662F;&#x95EE;&#x9898;&#x53C8;&#x6765;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x53D1;&#x5E03;&#x5230;maven&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x662F;&#x4E0D;&#x9700;&#x8981;&#x6267;&#x884C;&#x8FD9;&#x4E2A;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x6700;&#x597D;&#x914D;&#x7F6E;&#x4E00;&#x4E2A;&#x5F00;&#x5173;&#xFF0C;&#x4E14;&#x8FD9;&#x4E2A;&#x5F00;&#x5173;&#x4E0D;&#x4F1A;&#x88AB;&#x63D0;&#x4EA4;&#x5230;git&#x4E2D;&#x53BB;&#xFF0C;&#x56E0;&#x6B64;local.properties&#x662F;&#x6700;&#x5408;&#x9002;&#x7684;1234567891011121314151617181920boolean isDebug() { boolean ret = false try { Properties properties = new Properties() File file = project.rootProject.file(&apos;local.properties&apos;) if (!file.exists()) { return false } properties.load(file.newDataInputStream()) String debugStr = properties.getProperty(&quot;debug&quot;) if (debugStr != null &amp;&amp; debugStr.length() &gt; 0) { ret = debugStr.toBoolean() } } catch (Throwable throwable) { throwable.printStackTrace() ret = false } project.logger.error(&quot;[${project.name}]Debug:${ret}&quot;) return ret}&#x7136;&#x540E;&#x5728;local.properties&#x4E2D;&#x52A0;&#x5165;debug=true&#xFF0C;&#x4FEE;&#x6539;packagingOptions&#x914D;&#x7F6E;&#x4E3A;123456789101112131415android { //... if (isDebug()) { packagingOptions { doNotStrip &quot;*/armeabi/*.so&quot; doNotStrip &quot;*/armeabi-v7a/*.so&quot; doNotStrip &quot;*/arm64-v8a/*.so&quot; doNotStrip &quot;*/x86/*.so&quot; doNotStrip &quot;*/x86_64/*.so&quot; doNotStrip &quot;*/mips/*.so&quot; doNotStrip &quot;*/mips64/*.so&quot; //... } }}2&#x3001;&#x8BA9;Library&#x6A21;&#x5757;&#x7684;BuildType&#x968F;Application&#x6A21;&#x5757;&#x7684;BulidType&#x800C;&#x6784;&#x5EFA;&#x9664;&#x4E86;&#x4EE5;&#x4E0A;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x5176;&#x5B9E;&#x8FD8;&#x6709;&#x4E00;&#x79CD;&#x65B9;&#x5F0F;&#xFF0C;&#x90A3;&#x5C31;&#x662F;&#x8BA9;Library&#x4E0D;&#x8FDB;&#x884C;&#x9ED8;&#x8BA4;&#x7684;release&#x6784;&#x5EFA;&#xFF0C;&#x800C;&#x662F;&#x968F;Application&#x7684;BuildType&#x800C;&#x6539;&#x53D8;&#xFF0C;&#x5F53;Application&#x7684;BuildType&#x4E3A;debug&#x65F6;&#xFF0C;Library&#x4E5F;&#x8FDB;&#x884C;debug&#x6784;&#x5EFA;&#xFF0C;&#x5F53;Application&#x7684;BuildType&#x4E3A;release&#x65F6;&#xFF0C;Library&#x5219;&#x8FDB;&#x884C;release&#x6784;&#x5EFA;&#xFF0C;&#x8981;&#x505A;&#x5230;&#x8FD9;&#x6837;&#xFF0C;&#x9700;&#x8981;&#x663E;&#x793A;&#x58F0;&#x660E;&#x4E00;&#x4E0B;compile&#x7684;configuration&#x3002;&#x67E5;&#x770B;Google&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#x600E;&#x4E48;&#x505A;&#xFF1A;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Library-Publicationapplication&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x4F9D;&#x8D56;&#x539F;&#x6765;&#x662F;&#x8FD9;&#x6837;&#x7684;1compile project(&apos;:library&apos;)&#x5C06;&#x5176;&#x4FEE;&#x6539;&#x4E3A;12releaseCompile project(path:&apos;:library&apos;,configuration:&apos;release&apos;)debugCompile project(path:&apos;:library&apos;,configuration:&apos;debug&apos;)&#x7136;&#x540E;&#x5728;library&#x6A21;&#x5757;&#x4E2D;&#x7684;gradle&#x4E2D;&#x52A0;&#x5165;&#x4E00;&#x884C;&#x914D;&#x7F6E;&#xFF0C;&#x8868;&#x793A;&#x4E0D;&#x4F7F;&#x7528;&#x9ED8;&#x8BA4;&#x7684;1234567android { //... defaultConfig { publishNonDefault true //... }}&#x914D;&#x7F6E;&#x5B8C;&#x6210;&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x6109;&#x5FEB;&#x7684;debug&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x6CA1;&#x5B8C;&#xFF0C;&#x5BF9;&#x7684;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x662F;&#x5426;&#x662F;debug&#xFF0C;&#x90A3;&#x4E48;&#x4EE5;&#x4E0A;&#x914D;&#x7F6E;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#x8FD9;&#x6837;123456if (isDebug()) { releaseCompile project(path:&apos;:library&apos;,configuration:&apos;release&apos;) debugCompile project(path:&apos;:library&apos;,configuration:&apos;debug&apos;)} else { compile project(&apos;:library&apos;)}123456789android { //... defaultConfig { if (isDebug()) { publishNonDefault true } //... }}&#x8FD9;&#x91CC;&#x4E4B;&#x6240;&#x4EE5;&#x52A0;&#x5165;debug&#x5224;&#x65AD;&#xFF0C;&#x662F;&#x56E0;&#x4E3A;&#x53D1;maven&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;publishNonDefault=true&#xFF0C;Maven&#x53D1;&#x5E03;&#x63D2;&#x4EF6;&#x5C06;&#x628A;&#x8FD9;&#x4E9B;&#x989D;&#x5916;&#x7684;variant&#x4F5C;&#x4E3A;&#x989D;&#x5916;&#x7684;&#x5305;&#x53D1;&#x5E03;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x5B83;&#x53D1;&#x5E03;&#x5230;&#x4E00;&#x4E2A;maven&#x4ED3;&#x5E93;&#x5E76;&#x4E0D;&#x662F;&#x771F;&#x6B63;&#x7684;&#x517C;&#x5BB9;&#x3002;&#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x53EA;&#x5411;&#x4E00;&#x4E2A;&#x4ED3;&#x5E93;&#x53D1;&#x5E03;&#x4E00;&#x4E2A;&#x5355;&#x4E00;&#x7684; variant&#x3002;&#x56E0;&#x6B64;&#x53D1;&#x5E03;maven&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5173;&#x95ED;&#x8FD9;&#x4E2A;&#x914D;&#x7F6E;&#x9879;&#x3002;&#x4F46;&#x662F;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x4ED6;&#x4EBA;&#x4E0D;&#x77E5;&#x9053;&#x8FD9;&#x4E2A;&#x60C5;&#x51B5;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x6700;&#x597D;&#x4E3B;&#x52A8;&#x505A;&#x4E00;&#x6B21;&#x68C0;&#x6D4B;&#xFF0C;&#x5728;&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x7684;build.gradle&#x52A0;&#x5165;&#x68C0;&#x6D4B;&#x4EE3;&#x7801;123456789101112allprojects.each {project -&gt; project.afterEvaluate { def uploadArchivesTask = project.tasks.findByName(&quot;uploadArchives&quot;) if (uploadArchivesTask) { uploadArchivesTask.doFirst { if (isDebug()) { throw new RuntimeException(&quot;uploadArchives must disable debug options in local.properties first!&quot;) } } } }}&#x4E00;&#x65E6;&#x8FD0;&#x884C;uploadArchives&#x8FD9;&#x4E2A;Task&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;&#x662F;debug&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x6254;&#x5F02;&#x5E38;&#xFF0C;&#x4E0D;&#x8BA9;&#x5176;&#x53D1;&#x5E03;&#x3002;]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android 在 NDK 层使用 OpenSSL 进行 RSA 加密]]></title>
    <url>%2F2017%2F04%2F09%2FAndroid%E5%9C%A8NDK%E5%B1%82%E4%BD%BF%E7%94%A8OpenSSL%E8%BF%9B%E8%A1%8CRSA%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x9700;&#x6C42;&#xFF1A;&#x9700;&#x8981;&#x5728;NDK&#x5C42;&#x5BF9;&#x4E00;&#x4E2A;Java&#x5C42;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8FDB;&#x884C;RSA&#x52A0;&#x5BC6;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x52A0;&#x5BC6;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;Base64&#x8FD4;&#x56DE;&#x5230;Java&#x5C42;&#x65B9;&#x6848;&#xFF1A;&#x9009;&#x62E9;&#x4F7F;&#x7528;OpenSSL&#x6765;&#x5B9E;&#x73B0;&#x3002;&#x7F16;&#x8BD1;libssl.a&#x548C;libcrypto.a&#x9759;&#x6001;&#x5E93;&#x5728;github&#x4E0A;&#x627E;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x9879;&#x76EE;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5C06;OpenSSL&#x7F16;&#x8BD1;&#x6210;Android&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x9879;&#x76EE;&#x5730;&#x5740;&#x4E3A;openssl_for_ios_and_android&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#x6709;&#x70B9;&#x5C0F;&#x95EE;&#x9898;&#xFF0C;&#x90E8;&#x5206;&#x7F16;&#x8BD1;&#x811A;&#x672C;&#x9700;&#x8981;&#x505A;&#x70B9;&#x6539;&#x52A8;&#xFF0C;&#x6539;&#x52A8;&#x540E;&#x7684;&#x9879;&#x76EE;&#x89C1;openssl_for_ios_and_android&#x4E3B;&#x8981;&#x505A;&#x4E86;3&#x4E2A;&#x6539;&#x52A8;:&#x5C06;&#x6700;&#x4F4E;&#x7248;&#x672C;&#x652F;&#x6301;&#x4ECE;Android 21&#x6539;&#x5230;&#x4E86;Android 14&#x4FEE;&#x590D;&#x4E00;&#x4E2A;armeabi-v7a&#x65E0;&#x6CD5;&#x7F16;&#x8BD1;&#x51FA;&#x6765;&#x7684;&#x95EE;&#x9898;&#x5347;&#x7EA7;&#x4E86;openssl&#x7684;&#x7248;&#x672C;&#x5230;openssl-1.1.0e&#x4E4B;&#x540E;&#x5C06;&#x9879;&#x76EE;clone&#x4E0B;&#x6765;&#xFF0C;&#x8FDB;&#x5165;&#x5230;tools&#x76EE;&#x5F55;&#xFF0C;&#x6267;&#x884C;build-openssl4android.sh&#x7F16;&#x8BD1;&#x811A;&#x672C;12./build-openssl4android.sh android-armeabi armeabi-v7a./build-openssl4android.sh android armeabi&#x8FD9;&#x91CC;&#x53EA;&#x7F16;&#x8BD1;&#x4E86;armeabi-va7&#x548C;armeabi&#x67B6;&#x6784;CPU&#x7684;so&#xFF0C;&#x5982;&#x679C;&#x6709;&#x9700;&#x8981;&#xFF0C;&#x8BF7;&#x81EA;&#x884C;&#x66F4;&#x6539;&#x547D;&#x4EE4;&#x53C2;&#x6570;&#x7F16;&#x8BD1;X86&#x7B49;&#x67B6;&#x6784;&#x7684;so&#x3002;&#x7ECF;&#x8FC7;&#x5F88;&#x957F;&#x65F6;&#x95F4;&#x7684;&#x7F16;&#x8BD1;&#x3002;&#x3002;&#x3002;&#x5927;&#x6982;&#x8981;10&#x6765;&#x5206;&#x949F;&#x5427;&#x3002;&#x3002;&#x3002;&#x5728;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x7684;output&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;android&#x76EE;&#x5F55;&#xFF0C;&#x91CC;&#x9762;&#x6709;openssl-armeabi&#x548C;openssl-armeabi-v7a&#x4E24;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x5305;&#x542B;&#x4E86;openssl&#x7684;&#x5934;&#x6587;&#x4EF6;&#x4EE5;&#x53CA;&#x7F16;&#x8BD1;&#x597D;&#x7684;.a&#x9759;&#x6001;&#x5E93;&#x5B9E;&#x73B0;JNI&#x51FD;&#x6570;&#x7F16;&#x8BD1;&#x597D;&#x540E;.a&#x9759;&#x6001;&#x5E93;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x521B;&#x5EFA;jni&#x9879;&#x76EE;&#x4E86;&#x8FDB;&#x5165;jni&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x521B;&#x5EFA;Application.mk&#x6587;&#x4EF6;12345678APP_ABI := armeabi armeabi-v7aAPP_PLATFORM := android-14APP_OPTIM := releaseAPP_STL := c++_staticAPP_THIN_ARCHIVE := trueAPP_CPPFLAGS := -fpic -fexceptions -frttiAPP_GNUSTL_FORCE_CPP_FEATURES := pic exceptions rtti&#x8FDB;&#x5165;jni&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x521B;&#x5EFA;Android.mk&#x6587;&#x4EF6;123456789101112131415161718192021222324252627282930LOCAL_PATH := $(call my-dir)#&#x5F15;&#x7528;libcrypto.ainclude $(CLEAR_VARS)LOCAL_MODULE := libcryptoLOCAL_SRC_FILES := $(LOCAL_PATH)/openssl/$(TARGET_ARCH_ABI)/lib/libcrypto.ainclude $(PREBUILT_STATIC_LIBRARY)#&#x5F15;&#x7528;libssl.ainclude $(CLEAR_VARS)LOCAL_MODULE := libsslLOCAL_SRC_FILES := $(LOCAL_PATH)/openssl/$(TARGET_ARCH_ABI)/lib/libssl.ainclude $(PREBUILT_STATIC_LIBRARY)include $(CLEAR_VARS)LOCAL_MODULE := testLOCAL_SRC_FILES := \native.cpp \LOCAL_C_INCLUDES :=$(LOCAL_PATH)/openssl/openssl-$(TARGET_ARCH_ABI)/includeTARGET_PLATFORM := android-14#&#x9759;&#x6001;&#x5E93;&#x4F9D;&#x8D56;LOCAL_STATIC_LIBRARIES := libssl libcryptoLOCAL_LDLIBS += -latomic -lz -lloginclude $(BUILD_SHARED_LIBRARY)&#x8FDB;&#x5165;jni&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x62F7;&#x8D1D;&#x7F16;&#x8BD1;&#x597D;&#x7684;openssl&#x6587;&#x4EF6;&#x63A5;&#x7740;&#x5C06;&#x7B2C;&#x4E00;&#x6B65;&#x7F16;&#x8BD1;&#x597D;&#x7684;&#x9759;&#x6001;&#x5E93;&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x62F7;&#x8D1D;&#xFF0C;&#x5C06;output&#x76EE;&#x5F55;&#x4E0B;android&#x6574;&#x4E2A;&#x76EE;&#x5F55;&#x8FDB;&#x884C;&#x62F7;&#x8D1D;&#xFF0C;&#x62F7;&#x8D1D;&#x5230;jni&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#xFF0C;&#x62F7;&#x8D1D;&#x5B8C;&#x6210;&#x540E;&#x5C06;android&#x76EE;&#x5F55;&#x91CD;&#x547D;&#x540D;&#x4E3A;openssl&#x8FDB;&#x5165;jni&#x9879;&#x76EE;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x521B;&#x5EFA;native.cpp&#xFF0C;&#x642D;&#x5EFA;&#x57FA;&#x7840;&#x7684;&#x7ED3;&#x6784;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &quot;jni.h&quot;template&lt;typename T, int N&gt;char (&amp;ArraySizeHelper(T (&amp;array)[N]))[N];#define NELEMS(x) (sizeof(ArraySizeHelper(x)))#ifndef CLASSNAME#define CLASSNAME &quot;com/fucknmb/Test&quot;#endifjstring native_rsa(JNIEnv *env, jobject thiz, jstring base64PublicKey, jstring content) { return NULL;}static const JNINativeMethod sMethods[] = { { const_cast&lt;char *&gt;(&quot;native_rsa&quot;), const_cast&lt;char *&gt;(&quot;(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;), reinterpret_cast&lt;void *&gt;(native_rsa) }};int registerNativeMethods(JNIEnv *env, const char *className, const JNINativeMethod *methods, const int numMethods) { jclass clazz = env-&gt;FindClass(className); if (!clazz) { return JNI_FALSE; } if (env-&gt;RegisterNatives(clazz, methods, numMethods) != 0) { env-&gt;DeleteLocalRef(clazz); return JNI_FALSE; } env-&gt;DeleteLocalRef(clazz); return JNI_TRUE;}jint JNI_OnLoad(JavaVM *vm, void *reserved) { JNIEnv *env; if (vm-&gt;GetEnv(reinterpret_cast&lt;void **&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) { return -1; } registerNativeMethods(env, CLASSNAME, sMethods, NELEMS(sMethods)); return JNI_VERSION_1_6;}&#x58F0;&#x660E;java&#x5C42;&#x51FD;&#x6570;&#x5728;Java&#x5C42;&#x521B;&#x5EFA;com/fucknmb/Test&#x7C7B;&#xFF0C;&#x58F0;&#x660E;&#x4E00;&#x4E2A;native&#x51FD;&#x6570;1234567891011package com.fucknmb;import java.util.List;public class Test { public static native final String native_rsa(String base64PublicKey, String content); static { System.loadLibrary(&quot;test&quot;); }}&#x5B9E;&#x73B0;native_rsa&#x51FD;&#x6570;native_rsa&#x51FD;&#x6570;&#x6709;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;base64&#x4E4B;&#x540E;&#x7684;&#x516C;&#x94A5;&#xFF08;&#x4E0D;&#x542B;&#x5934;&#x90E8;&#x548C;&#x5C3E;&#x90E8;&#xFF0C;&#x4EE5;&#x53CA;&#x6CA1;&#x6362;&#x884C;&#xFF09;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x662F;&#x5F85;&#x52A0;&#x5BC6;&#x7684;&#x660E;&#x6587;&#x5185;&#x5BB9;&#xFF0C;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587;&#x8FDB;&#x884C;base64&#x3002;&#x5BF9;&#x4E8E;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5C06;&#x5176;&#x8F6C;&#x4E3A;&#x516C;&#x94A5;&#x6587;&#x4EF6;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x8FFD;&#x52A0;&#x5934;&#x90E8;&#x548C;&#x5C3E;&#x90E8;&#xFF0C;&#x5176;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122/** * &#x6839;&#x636E;&#x516C;&#x94A5;base64&#x5B57;&#x7B26;&#x4E32;&#xFF08;&#x6CA1;&#x6362;&#x884C;&#xFF09;&#x751F;&#x6210;&#x516C;&#x94A5;&#x6587;&#x672C;&#x5185;&#x5BB9; * @param base64EncodedKey * @return */std::string generatePublicKey(std::string base64EncodedKey) { std::string publicKey = base64EncodedKey; size_t base64Length = 64;//&#x6BCF;64&#x4E2A;&#x5B57;&#x7B26;&#x4E00;&#x884C; size_t publicKeyLength = base64EncodedKey.size(); for (size_t i = base64Length; i &lt; publicKeyLength; i += base64Length) { //&#x6BCF;base64Length&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x6362;&#x884C; if (base64EncodedKey[i] != &apos;\n&apos;) { publicKey.insert(i, &quot;\n&quot;); } i++; } //&#x6700;&#x524D;&#x9762;&#x8FFD;&#x52A0;&#x516C;&#x94A5;begin&#x5B57;&#x7B26;&#x4E32; publicKey.insert(0, &quot;-----BEGIN PUBLIC KEY-----\n&quot;); //&#x6700;&#x524D;&#x9762;&#x8FFD;&#x52A0;&#x516C;&#x94A5;end&#x5B57;&#x7B26;&#x4E32; publicKey.append(&quot;\n-----END PUBLIC KEY-----&quot;); return publicKey;}openssl rsa&#x52A0;&#x5BC6;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5BF9;&#x5BC6;&#x6587;&#x8FDB;&#x884C;Base64&#xFF0C;openssl&#x540C;&#x6837;&#x63D0;&#x4F9B;&#x4E86;Base64&#x7B97;&#x6CD5;&#xFF0C;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;1234567891011121314151617181920212223/** * base64 encode * @param decoded_bytes * @return */std::string base64_encode(const std::string &amp;decoded_bytes) { BIO *bio, *b64; BUF_MEM *bufferPtr; b64 = BIO_new(BIO_f_base64()); //&#x4E0D;&#x6362;&#x884C; BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL); bio = BIO_new(BIO_s_mem()); bio = BIO_push(b64, bio); //encode BIO_write(bio, decoded_bytes.c_str(), (int) decoded_bytes.length()); BIO_flush(bio); BIO_get_mem_ptr(bio, &amp;bufferPtr); //&#x8FD9;&#x91CC;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x5FC5;&#x987B;&#x8D4B;&#x503C; std::string result(bufferPtr-&gt;data, bufferPtr-&gt;length); BIO_free_all(bio); return result;}&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x6709;&#x4E00;&#x70B9;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x5C31;&#x662F;&#x8FD9;&#x4E00;&#x884C;1std::string result(bufferPtr-&gt;data, bufferPtr-&gt;length);&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x8868;&#x793A;&#x957F;&#x5EA6;&#xFF0C;&#x4E0D;&#x80FD;&#x5C11;&#xFF0C;&#x5426;&#x5219;base64&#x540E;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;&#x4F1A;&#x51FA;&#x73B0;&#x5F02;&#x5E38;&#xFF0C;&#x5BFC;&#x81F4;decode&#x7684;&#x65F6;&#x5019;&#x672B;&#x5C3E;&#x4F1A;&#x51FA;&#x73B0;&#x4E00;&#x5927;&#x5806;&#x7684;&#x4E71;&#x7801;&#xFF0C;&#x800C;&#x7F51;&#x4E0A;&#x5927;&#x591A;&#x6570;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x662F;&#x7F3A;&#x5931;&#x8FD9;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x5C31;&#x662F;rsa&#x7684;&#x5B9E;&#x73B0;&#x4E86;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667/** * &#x4F7F;&#x7528;&#x516C;&#x94A5;&#x5BF9;&#x660E;&#x6587;&#x52A0;&#x5BC6; * @param publicKey * @param from * @return */std::string encryptRSA(const std::string &amp;publicKey, const std::string &amp;from) { BIO *bio = NULL; RSA *rsa_public_key = NULL; //&#x4ECE;&#x5B57;&#x7B26;&#x4E32;&#x8BFB;&#x53D6;RSA&#x516C;&#x94A5;&#x4E32; if ((bio = BIO_new_mem_buf((void *) publicKey.c_str(), -1)) == NULL) { std::cout &lt;&lt; &quot;BIO_new_mem_buf failed!&quot; &lt;&lt; std::endl; return &quot;&quot;; } //&#x8BFB;&#x53D6;&#x516C;&#x94A5; rsa_public_key = PEM_read_bio_RSA_PUBKEY(bio, NULL, NULL, NULL); //&#x5F02;&#x5E38;&#x5904;&#x7406; if (rsa_public_key == NULL) { //&#x8D44;&#x6E90;&#x91CA;&#x653E; BIO_free_all(bio); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return &quot;&quot;; } //rsa&#x6A21;&#x7684;&#x4F4D;&#x6570; int rsa_size = RSA_size(rsa_public_key); //RSA_PKCS1_PADDING &#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6; &#x4E3A; 128 -11 //RSA_NO_PADDING &#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;&#x4E3A; 128 //rsa_size = rsa_size - RSA_PKCS1_PADDING_SIZE; //&#x52A8;&#x6001;&#x5206;&#x914D;&#x5185;&#x5B58;&#xFF0C;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587; unsigned char *to = (unsigned char *) malloc(rsa_size + 1); //&#x586B;&#x5145;0 memset(to, 0, rsa_size + 1); //&#x660E;&#x6587;&#x957F;&#x5EA6; int flen = from.length(); //&#x52A0;&#x5BC6;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587;&#x957F;&#x5EA6;&#xFF0C;-1&#x8868;&#x793A;&#x5931;&#x8D25; int status = RSA_public_encrypt(flen, (const unsigned char *) from.c_str(), to, rsa_public_key, RSA_PKCS1_PADDING); //&#x5F02;&#x5E38;&#x5904;&#x7406; if (status &lt; 0) { //&#x8D44;&#x6E90;&#x91CA;&#x653E; free(to); BIO_free_all(bio); RSA_free(rsa_public_key); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return &quot;&quot;; } //&#x8D4B;&#x503C;&#x5BC6;&#x6587; static std::string result((char *) to, status); //&#x8D44;&#x6E90;&#x91CA;&#x653E; free(to); BIO_free_all(bio); RSA_free(rsa_public_key); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return result;}&#x540C;&#x6837;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x4E5F;&#x6709;&#x51E0;&#x4E2A;&#x5730;&#x65B9;&#x9700;&#x8981;&#x6CE8;&#x610F;&#xFF1A;&#x7B2C;&#x4E00;&#x70B9;&#xFF1A;1static std::string result((char *) to, status);&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x8868;&#x793A;&#x5BC6;&#x6587;&#x957F;&#x5EA6;&#xFF0C;&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E2A;&#x503C;&#x4F1A;&#x662F;128&#xFF0C;&#x5982;&#x679C;&#x7B2C;&#x4E8C;&#x4E2A;&#x503C;&#x4E0D;&#x4F20;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587;&#x7ECF;&#x8FC7;string&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x540E;&#xFF0C;&#x4E22;&#x5931;&#x4E00;&#x90E8;&#x5206;&#x6570;&#x636E;&#xFF0C;&#x5BFC;&#x81F4;&#x6570;&#x636E;&#x7684;&#x4E0D;&#x6B63;&#x786E;&#x7B2C;&#x4E8C;&#x70B9;:1rsa_size = rsa_size - RSA_PKCS1_PADDING_SIZE;&#x5BF9;&#x4E8E;RSA_PKCS1_PADDING_SIZE&#xFF0C;&#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;&#x4E3A;&#x9700;&#x8981;&#x51CF;&#x53BB;112017.7.17&#x4FEE;&#x6539;&#xFF0C;&#x7B2C;&#x4E8C;&#x70B9;&#x7ECF;&#x8FC7;&#x8BD5;&#x9A8C;&#xFF0C;&#x5E9F;&#x5F03;!&#x7B2C;&#x4E09;&#x70B9;:123456//&#x660E;&#x6587;&#x957F;&#x5EA6;int flen = from.length();//&#x52A0;&#x5BC6;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587;&#x957F;&#x5EA6;&#xFF0C;-1&#x8868;&#x793A;&#x5931;&#x8D25;int status = RSA_public_encrypt(flen, (const unsigned char *) from.c_str(), to, rsa_public_key, RSA_PKCS1_PADDING);RSA_public_encrypt&#x51FD;&#x6570;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4F20;&#x7684;&#x662F;&#x660E;&#x6587;&#x957F;&#x5EA6;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;rsa_size&#xFF0C;&#x7F51;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x4EE3;&#x7801;&#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x90FD;&#x662F;&#x4F20;&#x9519;&#x7684;&#xFF0C;&#x4F20;&#x4E86;rsa_size&#xFF0C;&#x800C;&#x5B9E;&#x9645;&#x4E0A;&#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x53C2;&#x6570;&#x540D;&#x662F;flen&#xFF0C;&#x8868;&#x793A;from&#x5B57;&#x7B26;&#x4E32;&#x7684;length&#x3002;&#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x4F20;&#x4E86;&#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;&#xFF0C;&#x5C06;&#x76F4;&#x63A5;&#x5BFC;&#x81F4;java&#x5C42;&#x65E0;&#x6CD5;&#x6B63;&#x786E;&#x89E3;&#x5BC6;JNI&#x5C42;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x6570;&#x636E;&#x3002;&#x6700;&#x540E;&#x4E0D;&#x8981;&#x5FD8;&#x8BB0;&#x52A0;&#x5934;&#x6587;&#x4EF6;&#x7684;&#x5F15;&#x7528;1234567#include &lt;openssl/bio.h&gt;#include &lt;openssl/buffer.h&gt;#include &lt;openssl/evp.h&gt;#include &lt;openssl/rsa.h&gt;#include &lt;openssl/pem.h&gt;#include &lt;iostream&gt;using std::string;&#x9700;&#x8981;&#x7684;&#x51FD;&#x6570;&#x90FD;&#x6709;&#x4E86;&#xFF0C;&#x5B9E;&#x73B0;&#x4EE5;&#x4E0B;native_rsa&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x7EC4;&#x88C5;&#x4E00;&#x4E0B;&#x4EE5;&#x4E0A;&#x51FD;&#x6570;&#x5373;&#x53EF;123456789101112131415161718192021222324252627282930jstring native_rsa(JNIEnv *env, jobject thiz, jstring base64PublicKey, jstring content) { //jstring &#x8F6C; char* char *base64PublicKeyChars = (char *) env-&gt;GetStringUTFChars(base64PublicKey, NULL); //char* &#x8F6C; string string base64PublicKeyString = string(base64PublicKeyChars); //&#x751F;&#x6210;&#x516C;&#x94A5;&#x5B57;&#x7B26;&#x4E32; string generatedPublicKey = generatePublicKey(base64PublicKeyString); //&#x91CA;&#x653E; env-&gt;ReleaseStringUTFChars(base64PublicKey, base64PublicKeyChars); //jstring &#x8F6C; char* char *contentChars = (char *) env-&gt;GetStringUTFChars(content, NULL); //char* &#x8F6C; string string contentString = string(contentChars); //&#x91CA;&#x653E; env-&gt;ReleaseStringUTFChars(content, contentChars); //&#x8C03;&#x7528;RSA&#x52A0;&#x5BC6;&#x51FD;&#x6570;&#x52A0;&#x5BC6; string rsaResult = encryptRSA(generatedPublicKey, contentString); if (rsaResult.empty()) { return NULL; } //&#x5C06;&#x5BC6;&#x6587;&#x8FDB;&#x884C;base64 string base64RSA = base64_encode(rsaResult); if (base64RSA.empty()) { return NULL; } //string -&gt; char* -&gt; jstring &#x8FD4;&#x56DE; jstring result = env-&gt;NewStringUTF(base64RSA.c_str()); return result;}&#x79C1;&#x94A5;&#x89E3;&#x5BC6;&#x5982;&#x679C;&#x4F60;&#x8FD8;&#x9700;&#x8981;&#x7528;&#x7684;&#x79C1;&#x94A5;&#x89E3;&#x5BC6;&#x90E8;&#x5206;&#xFF0C;&#x53EF;&#x4EE5;&#x7EE7;&#x7EED;&#x5B9E;&#x73B0;base64&#x7684;decode&#x51FD;&#x6570;&#xFF0C;&#x4EE5;&#x53CA;rsa&#x7684;&#x79C1;&#x94A5;&#x4E32;&#x751F;&#x6210;&#x51FD;&#x6570;&#xFF0C;rsa&#x7684;&#x89E3;&#x5BC6;&#x51FD;&#x6570;base64 decode&#x51FD;&#x6570;&#x7684;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122232425262728/** * base64 decode * @param encoded_bytes * @return */std::string base64_decode(const std::string &amp;encoded_bytes) { BIO *bioMem, *b64; bioMem = BIO_new_mem_buf((void *) encoded_bytes.c_str(), -1); b64 = BIO_new(BIO_f_base64()); BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL); bioMem = BIO_push(b64, bioMem); //&#x83B7;&#x5F97;&#x89E3;&#x7801;&#x957F;&#x5EA6; size_t buffer_length = BIO_get_mem_data(bioMem, NULL); char *decode = (char *) malloc(buffer_length + 1); //&#x586B;&#x5145;0 memset(decode, 0, buffer_length + 1); BIO_read(bioMem, (void *) decode, (int) buffer_length); static std::string decoded_bytes(decode); BIO_free_all(bioMem); return decoded_bytes;}rsa&#x7684;&#x79C1;&#x94A5;&#x4E32;&#x751F;&#x6210;&#x51FD;&#x6570;&#x7684;&#x8BD5;&#x4E0B;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122/** * &#x6839;&#x636E;&#x79C1;&#x94A5;base64&#x5B57;&#x7B26;&#x4E32;&#xFF08;&#x6CA1;&#x6362;&#x884C;&#xFF09;&#x751F;&#x6210;&#x79C1;&#x94A5;&#x6587;&#x672C;&#x5185;&#x5BB9; * @param base64EncodedKey * @return */std::string generatePrivateKey(std::string base64EncodedKey) { std::string privateKey = base64EncodedKey; size_t base64Length = 64;//&#x6BCF;64&#x4E2A;&#x5B57;&#x7B26;&#x4E00;&#x884C; size_t privateKeyLength = base64EncodedKey.size(); for (size_t i = base64Length; i &lt; privateKeyLength; i += base64Length) { //&#x6BCF;base64Length&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x6362;&#x884C; if (base64EncodedKey[i] != &apos;\n&apos;) { privateKey.insert(i, &quot;\n&quot;); } i++; } //&#x6700;&#x524D;&#x9762;&#x8FFD;&#x52A0;&#x79C1;&#x94A5;begin&#x5B57;&#x7B26;&#x4E32; privateKey.insert(0, &quot;-----BEGIN PRIVATE KEY-----\n&quot;); //&#x6700;&#x540E;&#x9762;&#x8FFD;&#x52A0;&#x79C1;&#x94A5;end&#x5B57;&#x7B26;&#x4E32; privateKey.append(&quot;\n-----END PRIVATE KEY-----&quot;); return privateKey;}&#x79C1;&#x94A5;&#x89E3;&#x5BC6;&#x51FD;&#x6570;&#x7684;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364/** * &#x4F7F;&#x7528;&#x79C1;&#x94A5;&#x5BF9;&#x5BC6;&#x6587;&#x89E3;&#x5BC6; * @param privetaKey * @param from * @return */std::string decryptRSA(const std::string &amp;privetaKey, const std::string &amp;from) { BIO *bio = NULL; RSA *rsa_private_key = NULL; //&#x4ECE;&#x5B57;&#x7B26;&#x4E32;&#x8BFB;&#x53D6;RSA&#x516C;&#x94A5;&#x4E32; if ((bio = BIO_new_mem_buf((void *) privetaKey.c_str(), -1)) == NULL) { std::cout &lt;&lt; &quot;BIO_new_mem_buf failed!&quot; &lt;&lt; std::endl; return &quot;&quot;; } //&#x8BFB;&#x53D6;&#x79C1;&#x94A5; rsa_private_key = PEM_read_bio_RSAPrivateKey(bio, NULL, NULL, NULL); //&#x5F02;&#x5E38;&#x5904;&#x7406; if (rsa_private_key == NULL) { //&#x8D44;&#x6E90;&#x91CA;&#x653E; BIO_free_all(bio); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return &quot;&quot;; } //rsa&#x6A21;&#x7684;&#x4F4D;&#x6570; int rsa_size = RSA_size(rsa_private_key); //&#x52A8;&#x6001;&#x5206;&#x914D;&#x5185;&#x5B58;&#xFF0C;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x89E3;&#x5BC6;&#x540E;&#x7684;&#x660E;&#x6587; unsigned char *to = (unsigned char *) malloc(rsa_size + 1); //&#x586B;&#x5145;0 memset(to, 0, rsa_size + 1); //&#x5BC6;&#x6587;&#x957F;&#x5EA6; int flen = from.length(); // RSA_NO_PADDING // RSA_PKCS1_PADDING //&#x89E3;&#x5BC6;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x89E3;&#x5BC6;&#x540E;&#x7684;&#x540D;&#x6587;&#x957F;&#x5EA6;&#xFF0C;-1&#x8868;&#x793A;&#x5931;&#x8D25; int status = RSA_private_decrypt(flen, (const unsigned char *) from.c_str(), to, rsa_private_key, RSA_PKCS1_PADDING); //&#x5F02;&#x5E38;&#x5904;&#x7406;&#x7387; if (status &lt; 0) { //&#x91CA;&#x653E;&#x8D44;&#x6E90; free(to); BIO_free_all(bio); RSA_free(rsa_private_key); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return &quot;&quot;; } //&#x8D4B;&#x503C;&#x660E;&#x6587;&#xFF0C;&#x662F;&#x5426;&#x9700;&#x8981;&#x6307;&#x5B9A;to&#x7684;&#x957F;&#x5EA6;&#xFF1F; static std::string result((char *) to); //&#x91CA;&#x653E;&#x8D44;&#x6E90; free(to); BIO_free_all(bio); RSA_free(rsa_private_key); //&#x6E05;&#x9664;&#x7BA1;&#x7406;CRYPTO_EX_DATA&#x7684;&#x5168;&#x5C40;hash&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; CRYPTO_cleanup_all_ex_data(); return result;}&#x5982;&#x679C;&#x4F60;&#x8981;&#x89E3;&#x5BC6;&#x516C;&#x94A5;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5BC6;&#x6587;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x8FD9;&#x6837;&#x8C03;&#x7528;&#x5373;&#x53EF;&#x8FD4;&#x56DE;&#x660E;&#x6587;1234567891011121314//&#x516C;&#x94A5;&#x4E32;&#x548C;&#x79C1;&#x94A5;&#x4E32;string generatedPublicKey = generatePublicKey(base64PublicKey);string generatedPrivetKey = generatePrivateKey(base64PrivateKey); string content(&quot;just a test&quot;);//&#x52A0;&#x5BC6;string result = encryptRSA(generatedPublicKey, content);//encodestring base64RSA = base64_encode(result);//decodestring decodeBase64RSA = base64_decode(base64RSA);//&#x89E3;&#x5BC6;string origin = decryptRSA(generatedPrivetKey, decodeBase64RSA);&#x6700;&#x540E;&#x6CE8;&#x610F;&#x4E00;&#x4E0B;base64PublicKey&#x548C;base64PrivateKey&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x4E0D;&#x5305;&#x542B;&#x6362;&#x884C;&#x7684;&#xFF0C;&#x5C31;&#x662F;&#x79C1;&#x94A5;&#x548C;&#x516C;&#x94A5;&#x7684;encoded&#x4E4B;&#x540E;&#x7684;&#x5B57;&#x8282;&#x6570;&#x7EC4;base64&#x540E;&#x7684;&#x503C;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x8C03;&#x7528;generatePublicKey&#x548C;generatePrivateKey&#x8FFD;&#x52A0;&#x5934;&#x548C;&#x5C3E;&#x3002;RSA&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#x7684;&#x751F;&#x6210;&#x751F;&#x6210;&#x79C1;&#x94A5;1openssl genrsa -out rsa_private_key.pem 1024&#x8FD9;&#x6761;&#x547D;&#x4EE4;&#x8BA9;openssl&#x968F;&#x673A;&#x751F;&#x6210;&#x4E86;&#x4E00;&#x4EFD;&#x79C1;&#x94A5;&#xFF0C;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;&#x662F;1024&#x4F4D;&#x3002;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;&#x662F;&#x6307;&#x7406;&#x8BBA;&#x4E0A;&#x6700;&#x5927;&#x5141;&#x8BB8;&#x201D;&#x88AB;&#x52A0;&#x5BC6;&#x7684;&#x4FE1;&#x606F;&#x201C;&#x957F;&#x5EA6;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x660E;&#x6587;&#x7684;&#x957F;&#x5EA6;&#x9650;&#x5236;&#x3002;&#x968F;&#x7740;&#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x589E;&#x5927;&#xFF08;&#x6BD4;&#x65B9;&#x8BF4;2048&#xFF09;&#xFF0C;&#x5141;&#x8BB8;&#x7684;&#x660E;&#x6587;&#x957F;&#x5EA6;&#x4E5F;&#x4F1A;&#x589E;&#x52A0;&#xFF0C;&#x4F46;&#x540C;&#x65F6;&#x4E5F;&#x4F1A;&#x9020;&#x6210;&#x8BA1;&#x7B97;&#x590D;&#x6742;&#x5EA6;&#x7684;&#x6781;&#x901F;&#x589E;&#x957F;&#x3002;&#x4E00;&#x822C;&#x63A8;&#x8350;&#x7684;&#x957F;&#x5EA6;&#x5C31;&#x662F;1024&#x4F4D;&#xFF08;128&#x5B57;&#x8282;&#xFF0C;&#x4E4B;&#x524D;&#x7684;&#x4EE3;&#x7801;&#x7684;&#x6700;&#x5927;&#x52A0;&#x5BC6;&#x957F;&#x5EA6;128&#x5C31;&#x662F;&#x8FD9;&#x4E48;&#x6765;&#x7684;&#xFF09;&#x3002;&#x751F;&#x6210;&#x516C;&#x94A5;1openssl rsa -in rsa_private_key.pem -out rsa_public_key.pem -pubout&#x5BC6;&#x94A5;&#x6587;&#x4EF6;&#x6700;&#x7EC8;&#x5C06;&#x6570;&#x636E;&#x901A;&#x8FC7;Base64&#x7F16;&#x7801;&#x8FDB;&#x884C;&#x5B58;&#x50A8;&#x3002;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x4E0A;&#x8FF0;&#x751F;&#x6210;&#x7684;&#x5BC6;&#x94A5;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x6BCF;&#x4E00;&#x884C;&#x7684;&#x957F;&#x5EA6;&#x90FD;&#x5F88;&#x89C4;&#x5F8B;&#x3002;&#x8FD9;&#x662F;&#x7531;&#x4E8E;RFC2045&#x4E2D;&#x89C4;&#x5B9A;&#xFF1A;The encoded output stream must be represented in lines of no more than 76 characters each&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;Base64&#x7F16;&#x7801;&#x7684;&#x6570;&#x636E;&#x6BCF;&#x884C;&#x6700;&#x591A;&#x4E0D;&#x8D85;&#x8FC7;76&#x5B57;&#x7B26;&#xFF0C;&#x5BF9;&#x4E8E;&#x8D85;&#x957F;&#x6570;&#x636E;&#x9700;&#x8981;&#x6309;&#x884C;&#x5206;&#x5272;&#x3002;&#x4E0A;&#x9762;&#x7684;generatePublicKey&#x548C;generatePrivateKey&#x51FD;&#x6570;&#x6211;&#x4EEC;&#x662F;&#x6309;64&#x4F4D;&#x4E00;&#x884C;&#x8FDB;&#x884C;&#x5206;&#x5272;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x6709;&#x9700;&#x8981;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x503C;&#x4FEE;&#x6539;&#x4E3A;76&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x751F;&#x6210;&#x79C1;&#x94A5;&#x6587;&#x4EF6;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#xFF0C;&#x9700;&#x8981;&#x8FDB;&#x884C;PKCS#8&#x7F16;&#x7801;&#xFF1A;1openssl pkcs8 -topk8 -in rsa_private_key.pem -out pkcs8_rsa_private_key.pem -nocrypt&#x7B2C;&#x4E8C;&#x6B65;&#x548C;&#x7B2C;&#x4E09;&#x6B65;&#x751F;&#x6210;&#x7684;&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#x5C31;&#x53EF;&#x4EE5;&#x7528;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x6709;&#x4E2A;&#x95EE;&#x9898;&#x9700;&#x8981;&#x6CE8;&#x610F;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x7684;&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#x662F;&#x7C7B;&#x4F3C;&#x4E0B;&#x9762;&#x8FD9;&#x79CD;&#x683C;&#x5F0F;&#x7684;12345678-----BEGIN PUBLIC KEY-----....-----END PUBLIC KEY----------BEGIN PRIVATE KEY-----....-----END PRIVATE KEY-----&#x90A3;&#x4E48;&#xFF0C;&#x4F60;&#x65E0;&#x9700;&#x8C03;&#x7528;generatePublicKey&#x6216;&#x8005;generatePrivateKey&#x51FD;&#x6570;&#xFF0C;&#x6B64;&#x65F6;&#x5DF2;&#x7ECF;&#x662F;&#x9700;&#x8981;&#x7684;&#x516C;&#x94A5;&#x4E32;&#x548C;&#x79C1;&#x94A5;&#x4E32;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x4F60;&#x7684;&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#x6CA1;&#x6709;&#x5934;&#x90E8;&#x548C;&#x5C3E;&#x90E8;&#xFF0C;&#x5E76;&#x4E14;&#x4E0D;&#x662F;&#x6362;&#x884C;&#x7684;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x8C03;&#x7528;&#x4E00;&#x4E0B;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x8FD9;&#x8FB9;Java&#x5C42;&#x4F20;&#x5165;&#x7684;&#x662F;&#x540E;&#x8005;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x8C03;&#x7528;generatePublicKey&#x6216;&#x8005;generatePrivateKey&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#x3002;Java&#x5C42;&#x8C03;&#x7528;&#x516C;&#x94A5;&#x52A0;&#x5BC6;&#x51FD;&#x6570;&#x90E8;&#x5206;12String base64PublicKey = &quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDP0tzYxBF5IGfNvuIHzAqvza/ZxfH8aEiPFA4nY/W3js+cG3JUU86Jkc7jUG9XfGdW6SJ38ANs5tyWqYkJyoUErB2PjQQQDmHhbgpBUSeOdwGr/LPtrTrotrNXwpRY9eodkcbcMlbT0gvdnohRSISCjJ2KmFcBMkeO9R2DWe6oIwIDAQAB&quot;;String result = com.fucknmb.Test.native_rsa(base64PublicKey,&quot;I am test&quot;);]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>OpenSSL</tag>
        <tag>RSA</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ IDEA 远程调试]]></title>
    <url>%2F2017%2F04%2F07%2FIntellij-IDEA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x5FEB;&#x901F;&#x5B9A;&#x4F4D;&#x7EBF;&#x4E0A;&#x95EE;&#x9898;&#xFF0C;&#x6240;&#x4EE5;&#x8FDC;&#x7A0B;&#x8C03;&#x8BD5;&#x670D;&#x52A1;&#x5668;&#x662F;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x5B9E;&#x7528;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x65B0;&#x5EFA;Remote ConfigurationEdit Configurations -&gt; +&#x53F7; -&gt; Remote -&gt; &#x586B;&#x5199;&#x8FDC;&#x7A0B;Host&#x548C;&#x7AEF;&#x53E3;&#x53F7;&#x5176;&#x4E2D;Host&#x586B;&#x5199;&#x7684;&#x662F;&#x8FDC;&#x7A0B;&#x670D;&#x52A1;&#x5668;&#x7684;IP&#x5730;&#x5740;&#xFF0C;8082&#x5C31;&#x662F;&#x8FDC;&#x7A0B;&#x8C03;&#x8BD5;&#x7684;&#x7AEF;&#x53E3;&#x670D;&#x52A1;&#x5668;&#x914D;&#x7F6E;&#x5C06;&#x7B2C;&#x4E00;&#x6B65;IntelliJ IDEA&#x914D;&#x7F6E;&#x4E2D;&#x7684;Command line arguments for running remote JVM&#x590D;&#x5236;&#x4E0B;&#x6765;&#xFF0C;&#x5728;&#x670D;&#x52A1;&#x5668;Tomcat&#x7684;bin&#x76EE;&#x5F55;&#x4E0B;&#x7684;setenv.sh&#x4E2D;&#x589E;&#x52A0;&#x5982;&#x4E0B;&#x914D;&#x7F6E;:1CATALINA_OPTS=&quot;${CATALINA_OPTS} -agentlib:jdwp=transport=dt_socket,server=y,address=8082,suspend=n &quot;&#x542F;&#x52A8;&#x8C03;&#x8BD5;&#x770B;&#x5230;Connected to target VM&#x7B49;&#x4FE1;&#x606F;&#x8F93;&#x51FA;&#x5C31;&#x8868;&#x793A;&#x8FDE;&#x63A5;&#x5230;&#x4E86;&#x8FDC;&#x7A0B;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x4E4B;&#x540E;&#x5C31;&#x662F;&#x6B63;&#x5E38;&#x7684;&#x8C03;&#x8BD5;&#x4E86;&#x9000;&#x51FA;&#x8C03;&#x8BD5;&#x70B9;&#x51FB;&#x4E0A;&#x56FE;&#x5DE6;&#x4FA7;&#x5DE5;&#x5177;&#x680F;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EA2;&#x8272;&#x7684;&#x53C9;&#x53C9;&#x9000;&#x51FA;&#x8C03;&#x8BD5;&#x5F39;&#x51FA;&#x786E;&#x8BA4;&#x6846;&#x65F6;&#x4E0D;&#x8981;&#x9009;&#x62E9;Terminate the process after disconnect,&#x7136;&#x540E;&#x70B9;&#x51FB;disconnect&#x65AD;&#x5F00;&#x8FDE;&#x63A5;&#xFF0C;&#x91CD;&#x8981;&#x7684;&#x4E8B;&#x518D;&#x8BF4;&#x4E00;&#x904D;&#xFF0C;&#x4E0D;&#x8981;&#x9009;&#x62E9;&#x65AD;&#x5F00;&#x8FDE;&#x63A5;&#x540E;&#x7EC8;&#x6B62;&#x7A0B;&#x5E8F;]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>远程调试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Empty-Application-Template-For-XCode8]]></title>
    <url>%2F2017%2F02%2F10%2FiOS-Empty-Application-Template-For-XCode8%2F</url>
    <content type="text"><![CDATA[clone Templategit clone git@github.com:lizhangqu/iOS-Empty-Application-Template-For-Xcode8.git&#x590D;&#x5236;&#x5230;XCode8&#x5B89;&#x88C5;&#x76EE;&#x5F55;&#x4E2D;{Xcode.app}/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/Project Templates/iOS/Application/&#x521B;&#x5EFA;Empty Application&#x6548;&#x679C;&#x5982;&#x4E0B;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>XCode8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编译时注解 5 步走]]></title>
    <url>%2F2017%2F02%2F07%2F%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A35%E6%AD%A5%E8%B5%B0%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x7B80;&#x5355;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#xFF0C;&#x7F16;&#x5199;&#x7F16;&#x8BD1;&#x65F6;&#x6CE8;&#x89E3;&#x7684;&#x51E0;&#x4E2A;&#x6B65;&#x9AA4;&#x3002;&#x65B0;&#x5EFA;Java Module&#x5F15;&#x5165;auto-service(&#x81EA;&#x52A8;&#x751F;&#x6210;services&#x4E0B;&#x6587;&#x4EF6;)&#x548C;javapoet&#xFF08;&#x751F;&#x6210;java&#x6587;&#x4EF6;&#xFF09;12compile &apos;com.google.auto.service:auto-service:1.0-rc2&apos;compile &apos;com.squareup:javapoet:1.8.0&apos;&#x7F16;&#x5199;&#x6CE8;&#x89E3;123456789101112@Target(ElementType.TYPE)@Retention(RetentionPolicy.SOURCE)@Inheritedpublic @interface Api { String scope(); String name(); String version();}&#x521B;&#x5EFA;AbstractProcessor&#x5B9E;&#x73B0;&#x7C7B;&#x91CD;&#x5199;getSupportedSourceVersion&#xFF0C;getSupportedAnnotationTypes&#x548C;process&#x65B9;&#x6CD5;&#x3002;&#x6CE8;&#x610F;&#x5728;&#x7C7B;&#x4E0A;&#x52A0;&#x5165;&#x6CE8;&#x89E3;AutoService&#xFF0C;&#x4FBF;&#x4F1A;&#x81EA;&#x52A8;&#x751F;&#x6210;META-INF&#x4E0B;&#x7684;services&#x6587;&#x4EF6;12345678910111213141516171819202122@AutoService(Processor.class)public class AnnotationProcessor extends AbstractProcessor { @Override public SourceVersion getSupportedSourceVersion() { return SourceVersion.latestSupported(); } @Override public Set&lt;String&gt; getSupportedAnnotationTypes() { Set&lt;String&gt; supportedAnnotationTypes = new HashSet&lt;&gt;(); supportedAnnotationTypes.add(Api.class.getCanonicalName()); return supportedAnnotationTypes; } @Override public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) { return false; }}&#x5B9E;&#x73B0;process&#x65B9;&#x6CD5;&#xFF0C;&#x6839;&#x636E;&#x6CE8;&#x89E3;&#x751F;&#x6210;&#x5BF9;&#x5E94;&#x4EE3;&#x7801;12345678910111213141516171819202122232425262728public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) { Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(Api.class); for (Element e : elements) { //&#x83B7;&#x5F97;&#x5BF9;&#x5E94;&#x7684;&#x6CE8;&#x89E3; Api api = e.getAnnotation(Api.class); System.out.println(&quot;*&quot;); //&#x4F7F;&#x7528;javapoet&#x5F00;&#x59CB;&#x751F;&#x6210;&#x4EE3;&#x7801; TypeSpec clazz = TypeSpec.classBuilder(api.name().toUpperCase() + &quot;Request&quot;) .addJavadoc(&quot;Generated request for network\n&quot;) .addSuperinterface(Serializable.class) .build(); JavaFile javaFile = JavaFile.builder(&quot;com.funcknmb.api&quot;, clazz) .build(); //&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#x5199;&#x5165;&#x6587;&#x4EF6; try { JavaFileObject fileObject = processingEnv.getFiler().createSourceFile(&quot;com.funcknmb.api.&quot; + api.name().toUpperCase() + &quot;Request&quot;); processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, &quot;Creating &quot; + fileObject.toUri()); Writer writer = fileObject.openWriter(); javaFile.writeTo(writer); writer.close(); } catch (IOException x) { processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, x.toString()); } } return false;}&#x603B;&#x7ED3;&#x7F16;&#x5199;&#x7684;&#x6CE8;&#x89E3;&#x4EE5;&#x53CA;process&#x7684;&#x5B9E;&#x73B0;&#x53EA;&#x662F;&#x505A;&#x4E2A;&#x6A21;&#x677F;&#xFF0C;&#x5177;&#x4F53;&#x60C5;&#x51B5;&#x89C6;&#x60C5;&#x51B5;&#x800C;&#x5B9A;&#x3002;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Annotation</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Https&Http2.0&HttpDNS 的那些事]]></title>
    <url>%2F2017%2F01%2F17%2FHttps%26Http2.0%26HttpDNS%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[&#x4EC5;&#x4EE5;&#x672C;&#x6587;&#x5907;&#x5FD8;2016&#x5E74;&#x7F51;&#x7EDC;&#x4F18;&#x5316;&#x8FC7;&#x7A0B;&#x4E2D;&#x9047;&#x5230;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x672C;&#x6587;&#x6240;&#x8BA8;&#x8BBA;&#x7684;&#x5185;&#x5BB9;&#x5168;&#x90E8;&#x57FA;&#x4E8E;OkHttp&#x6B64;&#x5F00;&#x6E90;&#x5E93;&#xFF0C;&#x7248;&#x672C;&#x53F7;&#x4E3A;3.2.0&#x5173;&#x4E8E;Https&#x53D1;&#x9001;HTTPS&#x8BF7;&#x6C42;&#x9996;&#x5148;&#x8981;&#x8FDB;&#x884C;SSL/TLS&#x63E1;&#x624B;&#xFF0C;&#x63E1;&#x624B;&#x8FC7;&#x7A0B;&#x5927;&#x81F4;&#x5982;&#x4E0B;&#xFF1A;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x8D77;&#x63E1;&#x624B;&#x8BF7;&#x6C42;&#xFF0C;&#x643A;&#x5E26;&#x968F;&#x673A;&#x6570;&#x3001;&#x652F;&#x6301;&#x7B97;&#x6CD5;&#x5217;&#x8868;&#x7B49;&#x53C2;&#x6570;&#x3002;&#x670D;&#x52A1;&#x7AEF;&#x6536;&#x5230;&#x8BF7;&#x6C42;&#xFF0C;&#x9009;&#x62E9;&#x5408;&#x9002;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x4E0B;&#x53D1;&#x516C;&#x94A5;&#x8BC1;&#x4E66;&#x548C;&#x968F;&#x673A;&#x6570;&#x3002;&#x5BA2;&#x6237;&#x7AEF;&#x5BF9;&#x670D;&#x52A1;&#x7AEF;&#x8BC1;&#x4E66;&#x8FDB;&#x884C;&#x6821;&#x9A8C;&#xFF0C;&#x5E76;&#x53D1;&#x9001;&#x968F;&#x673A;&#x6570;&#x4FE1;&#x606F;&#xFF0C;&#x8BE5;&#x4FE1;&#x606F;&#x4F7F;&#x7528;&#x516C;&#x94A5;&#x52A0;&#x5BC6;&#x3002;&#x670D;&#x52A1;&#x7AEF;&#x901A;&#x8FC7;&#x79C1;&#x94A5;&#x83B7;&#x53D6;&#x968F;&#x673A;&#x6570;&#x4FE1;&#x606F;&#x3002;&#x53CC;&#x65B9;&#x6839;&#x636E;&#x4EE5;&#x4E0A;&#x4EA4;&#x4E92;&#x7684;&#x4FE1;&#x606F;&#x751F;&#x6210;session ticket&#xFF0C;&#x7528;&#x4F5C;&#x8BE5;&#x8FDE;&#x63A5;&#x540E;&#x7EED;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x7684;&#x52A0;&#x5BC6;&#x5BC6;&#x94A5;&#x3002;&#x4E0A;&#x8FF0;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x7B2C;3&#x6B65;&#x4E2D;&#x5BA2;&#x6237;&#x7AEF;&#x9700;&#x8981;&#x9A8C;&#x8BC1;&#x670D;&#x52A1;&#x7AEF;&#x4E0B;&#x53D1;&#x7684;&#x8BC1;&#x4E66;&#xFF0C;&#x9A8C;&#x8BC1;&#x8FC7;&#x7A0B;&#x6709;&#x4EE5;&#x4E0B;&#x4E24;&#x4E2A;&#x8981;&#x70B9;&#xFF1A;&#x5BA2;&#x6237;&#x7AEF;&#x7528;&#x672C;&#x5730;&#x4FDD;&#x5B58;&#x7684;&#x6839;&#x8BC1;&#x4E66;&#x89E3;&#x5F00;&#x8BC1;&#x4E66;&#x94FE;&#xFF0C;&#x786E;&#x8BA4;&#x670D;&#x52A1;&#x7AEF;&#x4E0B;&#x53D1;&#x7684;&#x8BC1;&#x4E66;&#x662F;&#x7531;&#x53EF;&#x4FE1;&#x4EFB;&#x7684;&#x673A;&#x6784;&#x9881;&#x53D1;&#x7684;&#x3002;&#x5BA2;&#x6237;&#x7AEF;&#x9700;&#x8981;&#x68C0;&#x67E5;&#x8BC1;&#x4E66;&#x7684;domain&#x57DF;&#x548C;&#x6269;&#x5C55;&#x57DF;&#xFF0C;&#x770B;&#x662F;&#x5426;&#x5305;&#x542B;&#x672C;&#x6B21;&#x8BF7;&#x6C42;&#x7684;host&#x3002;&#x5982;&#x679C;&#x4E0A;&#x8FF0;&#x4E24;&#x70B9;&#x90FD;&#x6821;&#x9A8C;&#x901A;&#x8FC7;&#xFF0C;&#x5C31;&#x8BC1;&#x660E;&#x5F53;&#x524D;&#x7684;&#x670D;&#x52A1;&#x7AEF;&#x662F;&#x53EF;&#x4FE1;&#x4EFB;&#x7684;&#xFF0C;&#x5426;&#x5219;&#x5C31;&#x662F;&#x4E0D;&#x53EF;&#x4FE1;&#x4EFB;&#xFF0C;&#x5E94;&#x5F53;&#x4E2D;&#x65AD;&#x5F53;&#x524D;&#x8FDE;&#x63A5;&#x3002;&#x5173;&#x4E8E;Http/2.0HTTP/2 &#x8D44;&#x6599;&#x6C47;&#x603B;HTTP 2.0&#x7684;&#x90A3;&#x4E9B;&#x4E8B;&#x5173;&#x4E8E;HttpDNSHttpDNS&#x662F;&#x4F7F;&#x7528;HTTP&#x534F;&#x8BAE;&#x5411;DNS&#x670D;&#x52A1;&#x5668;&#x7684;80&#x7AEF;&#x53E3;&#x8FDB;&#x884C;&#x8BF7;&#x6C42;&#xFF0C;&#x4EE3;&#x66FF;&#x4F20;&#x7EDF;&#x7684;DNS&#x534F;&#x8BAE;&#x5411;DNS&#x670D;&#x52A1;&#x5668;&#x7684;53&#x7AEF;&#x53E3;&#x8FDB;&#x884C;&#x8BF7;&#x6C42;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x4F7F;&#x7528;Http&#x534F;&#x8BAE;&#x53BB;&#x8FDB;&#x884C;dns&#x89E3;&#x6790;&#x8BF7;&#x6C42;&#xFF0C;&#x5C06;&#x670D;&#x52A1;&#x5668;&#x8FD4;&#x56DE;&#x7684;&#x89E3;&#x6790;&#x7ED3;&#x679C;DnsList&#xFF0C;&#x5373;&#x57DF;&#x540D;&#x5BF9;&#x5E94;&#x7684;&#x670D;&#x52A1;&#x5668;ip&#x83B7;&#x5F97;&#xFF0C;&#x76F4;&#x63A5;&#x5411;&#x8BE5;ip&#x53D1;&#x8D77;&#x5BF9;&#x5E94;&#x7684;api&#x670D;&#x52A1;&#x8BF7;&#x6C42;&#xFF0C;&#x4EE3;&#x66FF;&#x4F7F;&#x7528;&#x57DF;&#x540D;&#x3002;HttpDNS&#x4E3B;&#x8981;&#x89E3;&#x51B3;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;&#x8FD0;&#x8425;&#x5546;&#x57DF;&#x540D;&#x52AB;&#x6301;DNS&#x89E3;&#x6790;0RTOkHttp&#x5BF9;Http/2.0&#x7684;&#x652F;&#x6301;OkHttp&#x5929;&#x7136;&#x652F;&#x6301;Http/2.0&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x8F83;&#x65B0;&#x7684;&#x7248;&#x672C;&#x4E2D;&#xFF0C;OkHttp&#x79FB;&#x9664;&#x4E86;&#x5BF9;NPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x7684;&#x652F;&#x6301;&#xFF0C;&#x8F6C;&#x800C;&#x53EA;&#x652F;&#x6301;ALPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x3002;&#x89C1;&#x63D0;&#x4EA4;&#x8BB0;&#x5F55; Remove NPN support from OkHttpNPN&#xFF08;Next Protocol Negotiation&#xFF0C;&#x4E0B;&#x4E00;&#x4EE3;&#x534F;&#x8BAE;&#x534F;&#x5546;&#xFF09;&#xFF0C;&#x662F;&#x4E00;&#x4E2A; TLS &#x6269;&#x5C55;&#xFF0C;&#x7531; Google &#x5728;&#x5F00;&#x53D1; SPDY &#x534F;&#x8BAE;&#x65F6;&#x63D0;&#x51FA;&#x3002;&#x968F;&#x7740; SPDY &#x88AB; HTTP/2 &#x53D6;&#x4EE3;&#xFF0C;NPN &#x4E5F;&#x88AB;&#x4FEE;&#x8BA2;&#x4E3A; ALPN&#xFF08;Application Layer Protocol Negotiation&#xFF0C;&#x5E94;&#x7528;&#x5C42;&#x534F;&#x8BAE;&#x534F;&#x5546;&#xFF09;&#x3002;&#x4E8C;&#x8005;&#x76EE;&#x6807;&#x4E00;&#x81F4;&#xFF0C;&#x4F46;&#x5B9E;&#x73B0;&#x7EC6;&#x8282;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x76F8;&#x4E92;&#x4E0D;&#x517C;&#x5BB9;&#x3002;&#x4EE5;&#x4E0B;&#x662F;&#x5B83;&#x4EEC;&#x4E3B;&#x8981;&#x5DEE;&#x522B;&#xFF1A;NPN &#x662F;&#x670D;&#x52A1;&#x7AEF;&#x53D1;&#x9001;&#x6240;&#x652F;&#x6301;&#x7684; HTTP &#x534F;&#x8BAE;&#x5217;&#x8868;&#xFF0C;&#x7531;&#x5BA2;&#x6237;&#x7AEF;&#x9009;&#x62E9;&#xFF1B;&#x800C; ALPN &#x662F;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x9001;&#x6240;&#x652F;&#x6301;&#x7684; HTTP &#x534F;&#x8BAE;&#x5217;&#x8868;&#xFF0C;&#x7531;&#x670D;&#x52A1;&#x7AEF;&#x9009;&#x62E9;&#xFF1B;NPN &#x7684;&#x534F;&#x5546;&#x7ED3;&#x679C;&#x662F;&#x5728; Change Cipher Spec &#x4E4B;&#x540E;&#x52A0;&#x5BC6;&#x53D1;&#x9001;&#x7ED9;&#x670D;&#x52A1;&#x7AEF;&#xFF1B;&#x800C; ALPN &#x7684;&#x534F;&#x5546;&#x7ED3;&#x679C;&#x662F;&#x901A;&#x8FC7; Server Hello &#x660E;&#x6587;&#x53D1;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF;&#xFF1B;&#x4F46;&#x662F;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#x573A;&#x666F;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x8FD8;&#x9700;&#x8981;&#x4F7F;&#x7528;NPN&#xFF1A;ALPN&#x53EA;&#x652F;&#x6301;Android 5.0&#x4EE5;&#x4E0A;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x5728;Android 5.0&#x4EE5;&#x4E0B;&#x652F;&#x6301;Http/2.0&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;NPN&#x7406;&#x8BBA;&#x4E0A;nginx&#x53EF;&#x4EE5;&#x5BF9;ALPN&#x548C;NPN&#x540C;&#x65F6;&#x652F;&#x6301;&#xFF0C;&#x4F46;&#x662F;&#x90E8;&#x5206;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x7684;&#x914D;&#x7F6E;&#x53EF;&#x80FD;&#x53EA;&#x652F;&#x6301;NPN&#xFF0C;&#x5E76;&#x4E14;&#x77ED;&#x65F6;&#x95F4;&#x5185;&#x4E0D;&#x4F1A;&#x652F;&#x6301;ALPN&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;NPN&#x5982;&#x679C;&#x8981;&#x68C0;&#x6D4B;&#x670D;&#x52A1;&#x5668;&#x662F;&#x5426;&#x652F;&#x6301;ALPN&#x6216;&#x8005;NPN&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6B64;&#x7F51;&#x7AD9;&#x8FDB;&#x884C;&#x68C0;&#x6D4B; https://www.ssllabs.com/ssltest/analyze.html&#x68C0;&#x6D4B;&#x6548;&#x679C;&#x5982;&#x4E0B;:&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528; https://tools.keycdn.com/http2-test &#x68C0;&#x6D4B;&#x662F;&#x5426;&#x652F;&#x6301;Http2.0&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x68C0;&#x6D4B;&#x53EA;&#x4F1A;&#x5F53;ALPN&#x652F;&#x6301;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x624D;&#x4F1A;&#x8BA4;&#x4E3A;&#x652F;&#x6301;Http2.0&#x6B64;&#x65F6;&#x7684;&#x68C0;&#x6D4B;&#x6548;&#x679C;&#x5982;&#x4E0B;:&#x51FA;&#x4E8E;&#x4EE5;&#x4E0A;&#x4E24;&#x4E2A;&#x539F;&#x56E0;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;Http/2.0&#x5C31;&#x65E0;&#x6CD5;&#x53D1;&#x6325;&#x4F5C;&#x7528;&#x4E86;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x6709;&#x5FC5;&#x8981;&#x5C06;OkHttp&#x8FD9;&#x90E8;&#x5206;&#x4EE3;&#x7801;&#x8FD8;&#x539F;&#xFF0C;&#x4E8E;&#x662F;&#x5BF9;OkHttp&#x8FDB;&#x884C;&#x4E86;&#x5B9A;&#x5236;&#xFF0C;&#x5B9A;&#x5236;&#x65B9;&#x5F0F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x6839;&#x636E;&#x5BF9;&#x5E94;&#x7684;&#x63D0;&#x4EA4;&#x8BB0;&#x5F55;&#xFF0C;&#x628A;&#x79FB;&#x9664;&#x7684;&#x4EE3;&#x7801;&#x8FDB;&#x884C;&#x8FD8;&#x539F;&#x5373;&#x53EF;&#x3002;&#x6539;&#x9020;&#x7684;&#x4EE3;&#x7801;&#x5168;&#x90E8;&#x4F4D;&#x4E8E;okhttp3.internal.Platform&#x8FD9;&#x4E2A;&#x7C7B;&#x4E2D;&#xFF0C;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x6539;&#x9020;&#x5F71;&#x54CD;&#x539F;&#x6709;&#x903B;&#x8F91;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x8FD9;&#x4E2A;&#x7C7B;&#x4E2D;&#x52A0;&#x5165;&#x4E00;&#x4E2A;enableNPN&#x7684;&#x5F00;&#x5173;&#xFF0C;&#x5F53;&#x5F00;&#x5173;&#x5173;&#x95ED;&#x65F6;&#xFF0C;&#x903B;&#x8F91;&#x4E0D;&#x53D1;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x5F53;&#x5F00;&#x5173;&#x6253;&#x5F00;&#x65F6;&#xFF0C;NPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x4F1A;&#x5728;ALPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x4E0D;&#x652F;&#x6301;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x751F;&#x6548;&#xFF0C;&#x4F18;&#x5148;&#x4F7F;&#x7528;ALPN&#x9009;&#x62E9;&#x534F;&#x8BAE;&#x3002;&#x9ED8;&#x8BA4;&#x5F00;&#x5173;&#x5F00;&#x542F;&#x3002;1234567public class Platform { //...... //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start public static boolean enableNPN = true; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end //......}&#x63A5;&#x7740;&#x5728;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x4E2D;&#x52A0;&#x5165;&#x4E24;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF0C;&#x53C2;&#x8003;getAlpnSelectedProtocol&#x548C;setAlpnProtocols&#xFF0C;&#x52A0;&#x5165;getNpnSelectedProtocol&#x548C;setNpnProtocols&#x53D8;&#x91CF;123456789101112/** Android 2.3 or better. */private static class Android extends Platform { // Non-null on Android 5.0+. private final OptionalMethod&lt;Socket&gt; getAlpnSelectedProtocol; private final OptionalMethod&lt;Socket&gt; setAlpnProtocols; // &#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start // Non-null on Android 4.1+. private final OptionalMethod&lt;Socket&gt; getNpnSelectedProtocol; private final OptionalMethod&lt;Socket&gt; setNpnProtocols; // &#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end}&#x540C;&#x65F6;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x589E;&#x52A0;&#x8FD9;&#x4E24;&#x4E2A;&#x5165;&#x53C2;&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x8D4B;&#x503C;1234567891011121314public Android(Class&lt;?&gt; sslParametersClass, OptionalMethod&lt;Socket&gt; setUseSessionTickets, OptionalMethod&lt;Socket&gt; setHostname, OptionalMethod&lt;Socket&gt; getAlpnSelectedProtocol, OptionalMethod&lt;Socket&gt; setAlpnProtocols, OptionalMethod&lt;Socket&gt; getNpnSelectedProtocol, OptionalMethod&lt;Socket&gt; setNpnProtocols) { this.sslParametersClass = sslParametersClass; this.setUseSessionTickets = setUseSessionTickets; this.setHostname = setHostname; this.getAlpnSelectedProtocol = getAlpnSelectedProtocol; this.setAlpnProtocols = setAlpnProtocols; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start this.getNpnSelectedProtocol = getNpnSelectedProtocol; this.setNpnProtocols = setNpnProtocols; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end}&#x4FEE;&#x6539;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x4E2D;configureTlsExtensions&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x914D;&#x7F6E;SSLSocket&#x5BF9;&#x8C61;&#xFF0C;&#x5F00;&#x542F;&#x5176;NPN&#x76F8;&#x5173;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x6CE8;&#x610F;NPN&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;enableNPN&#x5F00;&#x5173;&#x7684;&#x6761;&#x4EF6;1234567891011121314151617181920212223public void configureTlsExtensions( SSLSocket sslSocket, String hostname, List&lt;Protocol&gt; protocols) { // Enable SNI and session tickets. if (hostname != null) { setUseSessionTickets.invokeOptionalWithoutCheckedException(sslSocket, true); setHostname.invokeOptionalWithoutCheckedException(sslSocket, hostname); } // Enable ALPN. if (setAlpnProtocols != null &amp;&amp; setAlpnProtocols.isSupported(sslSocket)) { Object[] parameters = {concatLengthPrefixed(protocols)}; setAlpnProtocols.invokeWithoutCheckedException(sslSocket, parameters); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start // Enbale NPN. if (enableNPN &amp;&amp; setNpnProtocols != null &amp;&amp; setNpnProtocols.isSupported(sslSocket)) { Object[] parameters = {concatLengthPrefixed(protocols)}; setNpnProtocols.invokeWithoutCheckedException(sslSocket, parameters); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end}&#x4FEE;&#x6539;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x4E2D;getSelectedProtocol&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD4;&#x56DE;&#x9009;&#x62E9;&#x7684;&#x534F;&#x8BAE;&#xFF0C;&#x6CE8;&#x610F;NPN&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;enableNPN&#x5F00;&#x5173;&#x7684;&#x6761;&#x4EF6;123456789101112131415161718192021222324252627282930@Override public String getSelectedProtocol(SSLSocket socket) { boolean alpnSupported = ((getAlpnSelectedProtocol != null) &amp;&amp; (getAlpnSelectedProtocol.isSupported(socket))); boolean npnSupported = ((getNpnSelectedProtocol != null) &amp;&amp; (getNpnSelectedProtocol.isSupported(socket))); if (!(alpnSupported || npnSupported)) { return null; } // if support alpn ,returen it. if (alpnSupported) { byte[] alpnResult = (byte[]) getAlpnSelectedProtocol.invokeWithoutCheckedException(socket); if (alpnResult != null) { return new String(alpnResult, Util.UTF_8); } } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start // don&apos;t support alpn,try npn. if (enableNPN &amp;&amp; npnSupported) { byte[] npnResult = (byte[]) getNpnSelectedProtocol.invokeWithoutCheckedException(socket); if (npnResult != null) { return new String(npnResult, Util.UTF_8); } } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end return null;}&#x800C;&#x5185;&#x90E8;&#x7C7B;okhttp3.internal.Platform$Android&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x4F20;&#x5165;&#x7684;&#x5165;&#x53C2;&#x5219;&#x662F;&#x7531;Platform.findPlatform&#x51FD;&#x6570;&#x4E2D;&#x53CD;&#x5C04;&#x5F97;&#x5230;&#x7684;&#xFF0C;12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** Attempt to match the host runtime to a capable Platform implementation. */ private static Platform findPlatform() { // Attempt to find Android 2.3+ APIs. try { //.......some codes //alpn support OptionalMethod&lt;Socket&gt; getAlpnSelectedProtocol = null; OptionalMethod&lt;Socket&gt; setAlpnProtocols = null; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //npn support OptionalMethod&lt;Socket&gt; getNpnSelectedProtocol = null; OptionalMethod&lt;Socket&gt; setNpnProtocols = null ; //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end // Attempt to find Android 5.0+ APIs. try { Class.forName(&quot;android.net.Network&quot;); // Arbitrary class added in Android 5.0. getAlpnSelectedProtocol = new OptionalMethod&lt;&gt;(byte[].class, &quot;getAlpnSelectedProtocol&quot;); setAlpnProtocols = new OptionalMethod&lt;&gt;(null, &quot;setAlpnProtocols&quot;, byte[].class); } catch (ClassNotFoundException ignored) { } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //to make NPN Support try { getNpnSelectedProtocol = new OptionalMethod&lt;Socket&gt;(byte[].class, &quot;getNpnSelectedProtocol&quot;); setNpnProtocols = new OptionalMethod&lt;Socket&gt;(null, &quot;setNpnProtocols&quot;, byte[].class); } catch (Exception e) { //ignore } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end //&#x4F20;&#x5165;getNpnSelectedProtocol&#x548C;setNpnProtocols return new Android(sslParametersClass, setUseSessionTickets, setHostname, getAlpnSelectedProtocol, setAlpnProtocols, getNpnSelectedProtocol, setNpnProtocols); } catch (ClassNotFoundException ignored) { // This isn&apos;t an Android runtime. } //...... // Probably an Oracle JDK like OpenJDK. return new Platform();}&#x68C0;&#x6D4B;&#x5BA2;&#x6237;&#x7AEF;&#x4F7F;&#x7528;&#x7684;Http&#x534F;&#x8BAE;&#x5982;&#x679C;&#x901A;&#x8FC7;&#x8089;&#x773C;&#x67E5;&#x770B;&#xFF0C;&#x57FA;&#x672C;&#x4E0A;&#x4E0D;&#x53EF;&#x80FD;&#x77E5;&#x9053;&#x5F53;&#x524D;&#x7684;&#x8BF7;&#x6C42;&#x662F;Http/2.0&#x8FD8;&#x662F;Http/1.1&#x6216;&#x8005;&#x8BF4;&#x662F;SPDY/3.1&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;nginx&#x7684;&#x65E5;&#x5FD7;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x662F;&#x4EC0;&#x4E48;&#x534F;&#x8BAE;&#xFF0C;&#x5982;&#x4E0B;:&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x7684;&#x76EE;&#x7684;&#x4E0D;&#x662F;&#x901A;&#x8FC7;nginx&#x65E5;&#x5FD7;&#x6765;&#x770B;&#xFF0C;&#x800C;&#x662F;&#x901A;&#x8FC7;logcat&#x65E5;&#x5FD7;&#x6765;&#x770B;&#xFF0C;&#x90A3;&#x4E48;OkHttp&#x4E2D;&#x6709;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x65B9;&#x6CD5;&#x6765;&#x83B7;&#x5F97;&#x5F53;&#x524D;&#x8BF7;&#x6C42;&#x7684;&#x534F;&#x8BAE;&#x5462;&#xFF0C;&#x5176;&#x5B9E;&#x662F;&#x6709;&#x7684;&#xFF0C;&#x5728;&#x62E6;&#x622A;&#x5668;&#x4E2D;&#x5C31;&#x53EF;&#x4EE5;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x5B98;&#x65B9;&#x7684;logging-interceptor&#x6A21;&#x5757;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x52A0;&#x5165;&#x534F;&#x8BAE;&#x7684;&#x65E5;&#x5FD7;&#x3002;&#x5176;&#x5B9E;&#x5728;HttpLoggingInterceptor&#x4E2D;&#xFF0C;&#x5DF2;&#x7ECF;&#x6709;&#x534F;&#x8BAE;&#x76F8;&#x5173;&#x7684;&#x65E5;&#x5FD7;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x8BE5;&#x65E5;&#x5FD7;&#x5E76;&#x4E0D;&#x51C6;&#x786E;&#xFF0C;&#x5373;&#x4F7F;&#x5728;Http/2.0&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD4;&#x56DE;&#x7684;&#x4E5F;&#x662F;Http/1.1,&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x66F4;&#x52A0;&#x51C6;&#x786E;&#x7684;&#x65B9;&#x5F0F;&#x6253;&#x5370;&#x8FD9;&#x4E2A;&#x534F;&#x8BAE;&#xFF0C;&#x5728;HttpLoggingInterceptor&#x5408;&#x9002;&#x7684;&#x5730;&#x65B9;(&#x8FD4;&#x56DE;response&#x7684;&#x5730;&#x65B9;)&#xFF0C;&#x52A0;&#x5165;&#x4E0B;&#x9762;&#x4E24;&#x884C;&#x4EE3;&#x7801;&#x5373;&#x53EF;&#xFF1A;12Protocol responseProtocol = response.protocol();logger.log(&quot;&lt;-- &quot; +&quot;responseProtocol:&quot;+responseProtocol);&#x6B64;&#x65F6;&#x4F1A;&#x5728;reponse&#x8FD4;&#x56DE;&#x7684;&#x65F6;&#x5019;&#x6253;&#x5370;&#x5BF9;&#x5E94;&#x7684;&#x534F;&#x8BAE;&#x65E5;&#x5FD7;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A;OkHttp&#x4F7F;&#x7528;HttpDNS&#x7684;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;Android&#x4F7F;&#x7528;OkHttp&#x652F;&#x6301;HttpDNS&#xFF08;&#x62E6;&#x622A;&#x5668;&#xFF09;Android OkHttp&#x5B9E;&#x73B0;HttpDns&#x7684;&#x6700;&#x4F73;&#x5B9E;&#x8DF5;&#xFF08;&#x975E;&#x62E6;&#x622A;&#x5668;,Dns&#x63A5;&#x53E3;&#xFF09;&#x8FD9;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x5404;&#x6709;&#x4F18;&#x7F3A;&#x70B9;&#xFF0C;&#x4F7F;&#x7528;Dns&#x63A5;&#x53E3;&#x65B9;&#x5F0F;&#x8FC7;&#x4E8E;&#x5E95;&#x5C42;&#xFF0C;&#x5F02;&#x5E38;&#x4E0D;&#x5BB9;&#x6613;&#x63A7;&#x5236;&#xFF0C;&#x4E0A;&#x5C42;&#x65E0;&#x611F;&#x77E5;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x5341;&#x5206;&#x7CBE;&#x786E;&#x7684;&#x63A7;&#x5236;&#x5F02;&#x5E38;&#xFF0C;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;&#x62E6;&#x622A;&#x5668;&#x65B9;&#x5F0F;&#xFF0C;&#x800C;&#x4F7F;&#x7528;&#x62E6;&#x622A;&#x5668;&#x65B9;&#x5F0F;&#x4E3B;&#x8981;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x4E24;&#x6B65;&#x64CD;&#x4F5C;&#x5BF9;url&#x4E2D;&#x7684;host&#x8FDB;&#x884C;&#x66FF;&#x6362;&#xFF0C;&#x5C06;&#x57DF;&#x540D;&#x66FF;&#x6362;&#x4E3A;ip&#x6DFB;&#x52A0;header&#x8BF7;&#x6C42;&#x5934;&#xFF0C;&#x503C;&#x4E3A;&#x66FF;&#x6362;&#x524D;&#x7684;&#x57DF;&#x540D;&#x5728;Http&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x4E0D;&#x5B58;&#x5728;&#x4EFB;&#x4F55;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x5728;Https&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x9700;&#x8981;&#x4FEE;&#x6539;OkHttp&#x7684;&#x76F8;&#x5173;&#x4EE3;&#x7801;&#xFF0C;&#x89E3;&#x51B3;&#x76F8;&#x5173;&#x95EE;&#x9898;&#xFF0C;&#x5177;&#x4F53;&#x95EE;&#x9898;&#x4E0B;&#x6587;&#x7EC6;&#x8BF4;&#x3002;Https&#x4E0B;&#x4F7F;&#x7528;HttpDNS&#x8BC1;&#x4E66;&#x6821;&#x9A8C;&#x95EE;&#x9898;&#x5728;okhttp3.internal.io.RealConnection&#x7C7B;&#x4E2D;&#x6709;&#x4E2A;&#x65B9;&#x6CD5;&#x53EB;connectTls&#xFF0C;&#x91CC;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263private void connectTls(int readTimeout, int writeTimeout, ConnectionSpecSelector connectionSpecSelector) throws IOException { if (route.requiresTunnel()) { createTunnel(readTimeout, writeTimeout); } Address address = route.address(); SSLSocketFactory sslSocketFactory = address.sslSocketFactory(); boolean success = false; SSLSocket sslSocket = null; try { // Create the wrapper over the connected socket. sslSocket = (SSLSocket) sslSocketFactory.createSocket( rawSocket, address.url().host(), address.url().port(), true /* autoClose */); // Configure the socket&apos;s ciphers, TLS versions, and extensions. ConnectionSpec connectionSpec = connectionSpecSelector.configureSecureSocket(sslSocket); if (connectionSpec.supportsTlsExtensions()) { Platform.get().configureTlsExtensions( sslSocket, address.url().host(), address.protocols()); } // Force handshake. This can throw! sslSocket.startHandshake(); Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession()); // Verify that the socket&apos;s certificates are acceptable for the target host. if (!address.hostnameVerifier().verify(address.url().host(), sslSocket.getSession())) { X509Certificate cert = (X509Certificate) unverifiedHandshake.peerCertificates().get(0); throw new SSLPeerUnverifiedException(&quot;Hostname &quot; + address.url().host() + &quot; not verified:&quot; + &quot;\n certificate: &quot; + CertificatePinner.pin(cert) + &quot;\n DN: &quot; + cert.getSubjectDN().getName() + &quot;\n subjectAltNames: &quot; + OkHostnameVerifier.allSubjectAltNames(cert)); } // Check that the certificate pinner is satisfied by the certificates presented. address.certificatePinner().check(address.url().host(), unverifiedHandshake.peerCertificates()); // Success! Save the handshake and the ALPN protocol. String maybeProtocol = connectionSpec.supportsTlsExtensions() ? Platform.get().getSelectedProtocol(sslSocket) : null; socket = sslSocket; source = Okio.buffer(Okio.source(socket)); sink = Okio.buffer(Okio.sink(socket)); handshake = unverifiedHandshake; protocol = maybeProtocol != null ? Protocol.get(maybeProtocol) : Protocol.HTTP_1_1; success = true; } catch (AssertionError e) { if (Util.isAndroidGetsocknameError(e)) throw new IOException(e); throw e; } finally { if (sslSocket != null) { Platform.get().afterHandshake(sslSocket); } if (!success) { closeQuietly(sslSocket); } } }&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x8C03;&#x7528;Platform.get().configureTlsExtensions()&#x914D;&#x7F6E;SSLSocket&#x5BF9;&#x8C61;&#xFF0C;&#x8FD8;&#x662F;address.hostnameVerifier().verify()&#x8FDB;&#x884C;&#x8BC1;&#x4E66;&#x6821;&#x9A8C;&#xFF0C;&#x4EE5;&#x53CA;address.certificatePinner().check()&#x4E2D;&#xFF0C;&#x4F20;&#x5165;&#x7684;host&#x90FD;&#x662F;address.url().host()&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x503C;&#x5374;&#x6070;&#x6070;&#x662F;&#x6211;&#x4EEC;&#x66FF;&#x6362;&#x4E86;url&#x4E2D;&#x7684;&#x57DF;&#x540D;&#x4E3A;ip&#x7684;host&#xFF0C;&#x6240;&#x4EE5;&#x6B64;&#x65F6;&#x62FF;&#x5230;&#x7684;&#x503C;&#x4E3A;ip&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#xFF0C;&#x5E26;&#x6765;&#x4E86;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;&#x5F53;&#x5BA2;&#x6237;&#x7AEF;&#x4F7F;&#x7528;HttpDNS&#x65F6;&#xFF0C;&#x8BF7;&#x6C42;URL&#x4E2D;&#x7684;host&#x4F1A;&#x88AB;&#x66FF;&#x6362;&#x6210;HttpDNS&#x89E3;&#x6790;&#x51FA;&#x6765;&#x7684;ip&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x8BC1;&#x4E66;&#x9A8C;&#x8BC1;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;domain&#x4E0D;&#x5339;&#x914D;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5BFC;&#x81F4;SSL/TLS&#x63E1;&#x624B;&#x4E0D;&#x6210;&#x529F;&#x3002;&#x5728;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x5B58;&#x5728;&#x591A;&#x5F20;&#x8BC1;&#x4E66;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4F1A;&#x5B58;&#x5728;&#x95EE;&#x9898;&#x800C;&#x5BF9;&#x4E8E;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x5B58;&#x5728;&#x591A;&#x5F20;&#x8BC1;&#x4E66;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x4F1A;&#x5B58;&#x5728;&#x95EE;&#x9898;&#x5462;&#xFF0C;&#x8FD9;&#x91CC;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;&#xFF0C;&#x53EB;SNISNI&#xFF08;Server Name Indication&#xFF09;&#x662F;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x4E00;&#x4E2A;&#x670D;&#x52A1;&#x5668;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x57DF;&#x540D;&#x548C;&#x8BC1;&#x4E66;&#x7684;SSL/TLS&#x6269;&#x5C55;&#x3002;&#x5B83;&#x7684;&#x5DE5;&#x4F5C;&#x539F;&#x7406;&#x5982;&#x4E0B;&#xFF1A;&#x5728;&#x8FDE;&#x63A5;&#x5230;&#x670D;&#x52A1;&#x5668;&#x5EFA;&#x7ACB;SSL&#x94FE;&#x63A5;&#x4E4B;&#x524D;&#x5148;&#x53D1;&#x9001;&#x8981;&#x8BBF;&#x95EE;&#x7AD9;&#x70B9;&#x7684;&#x57DF;&#x540D;&#xFF08;Hostname&#xFF09;&#x3002;&#x670D;&#x52A1;&#x5668;&#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x57DF;&#x540D;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5408;&#x9002;&#x7684;&#x8BC1;&#x4E66;&#x3002;&#x76EE;&#x524D;&#xFF0C;&#x5927;&#x591A;&#x6570;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x548C;&#x6D4F;&#x89C8;&#x5668;&#x90FD;&#x5DF2;&#x7ECF;&#x5F88;&#x597D;&#x5730;&#x652F;&#x6301;SNI&#x6269;&#x5C55;&#xFF0C;OpenSSL 0.9.8&#x4E5F;&#x5DF2;&#x7ECF;&#x5185;&#x7F6E;&#x8FD9;&#x4E00;&#x529F;&#x80FD;&#x3002;&#x4E0A;&#x8FF0;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5F53;&#x5BA2;&#x6237;&#x7AEF;&#x4F7F;&#x7528;HttpDNS&#x65F6;&#xFF0C;&#x8BF7;&#x6C42;URL&#x4E2D;&#x7684;Host&#x4F1A;&#x88AB;&#x66FF;&#x6362;&#x6210;HttpDNS&#x89E3;&#x6790;&#x51FA;&#x6765;&#x7684;IP&#xFF0C;&#x5BFC;&#x81F4;&#x670D;&#x52A1;&#x5668;&#x83B7;&#x53D6;&#x5230;&#x7684;&#x57DF;&#x540D;&#x4E3A;&#x89E3;&#x6790;&#x540E;&#x7684;IP&#xFF0C;&#x65E0;&#x6CD5;&#x627E;&#x5230;&#x5339;&#x914D;&#x7684;&#x8BC1;&#x4E66;&#xFF0C;&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x9ED8;&#x8BA4;&#x7684;&#x8BC1;&#x4E66;&#x6216;&#x8005;&#x4E0D;&#x8FD4;&#x56DE;&#xFF0C;&#x6240;&#x4EE5;&#x4F1A;&#x51FA;&#x73B0;SSL/TLS&#x63E1;&#x624B;&#x4E0D;&#x6210;&#x529F;&#x7684;&#x9519;&#x8BEF;&#x3002;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x4E00;&#x4E2A;&#x573A;&#x666F;&#x5C31;&#x662F;&#xFF1A;&#x6BD4;&#x5982;&#x5F53;&#x4F60;&#x9700;&#x8981;&#x901A;&#x8FC7;https&#x8BBF;&#x95EE;CDN&#x8D44;&#x6E90;&#x65F6;&#xFF0C;CDN&#x7684;&#x7AD9;&#x70B9;&#x5F80;&#x5F80;&#x670D;&#x52A1;&#x4E86;&#x5F88;&#x591A;&#x7684;&#x57DF;&#x540D;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x901A;&#x8FC7;SNI&#x6307;&#x5B9A;&#x5177;&#x4F53;&#x7684;&#x57DF;&#x540D;&#x8BC1;&#x4E66;&#x8FDB;&#x884C;&#x901A;&#x4FE1;&#x3002;&#x5176;&#x5B9E;OkHttp&#x662F;&#x652F;&#x6301;SNI&#x7684;&#xFF0C;&#x5728;Platform.configureTlsExtensions&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x8BBE;&#x7F6E;&#x4E86;SNI&#xFF0C;&#x53EA;&#x662F;&#x4F20;&#x5165;&#x7684;Host&#x53D8;&#x6210;&#x4E86;ip&#xFF0C;&#x6240;&#x4EE5;&#x5BFC;&#x81F4;&#x4E86;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;123456789public void configureTlsExtensions( SSLSocket sslSocket, String hostname, List&lt;Protocol&gt; protocols) { // Enable SNI and session tickets. if (hostname != null) { setUseSessionTickets.invokeOptionalWithoutCheckedException(sslSocket, true); setHostname.invokeOptionalWithoutCheckedException(sslSocket, hostname); } //......}&#x8FD9;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#x5F52;&#x6839;&#x5230;&#x5E95;&#x90FD;&#x662F;&#x66FF;&#x6362;&#x4E86;Host&#x6240;&#x9020;&#x6210;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD8;&#x662F;&#x9700;&#x8981;&#x5BF9;OkHttp&#x5F00;&#x5200;&#xFF0C;&#x4FEE;&#x6539;&#x6E90;&#x7801;&#x3002;&#x5728;okhttp3.internal.http.HttpEngine&#x4E2D;&#x627E;&#x5230;createAddress&#x65B9;&#x6CD5;&#xFF0C;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x5165;&#x53C2;&#xFF0C;&#x4F20;&#x5165;request.url().host()&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x4F20;&#x5165;request.header(&#x201C;host&#x201D;)123456789private static Address createAddress(OkHttpClient client, Request request) { //......some codes return new Address(request.url().host(), request.header(&quot;host&quot;), request.url().port(), client.dns(), client.socketFactory(), sslSocketFactory, hostnameVerifier, certificatePinner, client.proxyAuthenticator(), client.proxy(), client.protocols(), client.connectionSpecs(), client.proxySelector()); }&#x5728;Address&#x4E2D;&#x589E;&#x52A0;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x548C;&#x6210;&#x5458;&#x65B9;&#x6CD5;123456public final class Address { final String headerHost; public String host() { return headerHost; }}&#x5176;&#x4E2D;headerHost&#x7684;&#x503C;&#x901A;&#x8FC7;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x589E;&#x52A0;&#x7684;&#x53D8;&#x91CF;&#x5F97;&#x5230;12345678910public Address(String uriHost, String headerHost, int uriPort, Dns dns, SocketFactory socketFactory, SSLSocketFactory sslSocketFactory, HostnameVerifier hostnameVerifier, CertificatePinner certificatePinner, Authenticator proxyAuthenticator, Proxy proxy, List&lt;Protocol&gt; protocols, List&lt;ConnectionSpec&gt; connectionSpecs, ProxySelector proxySelector) { //.......some codes this.headerHost = headerHost; //.......some codes }&#x56DE;&#x5230;okhttp3.internal.io.RealConnection&#x4E2D;&#x7684;connectTls&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x5C06;&#x8BC1;&#x4E66;&#x9A8C;&#x8BC1;&#xFF0C;&#x8BBE;&#x7F6E;SNI&#x7684;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;&#x4FEE;&#x6539;&#x539F;&#x5219;&#x4E3A;&#xFF1A;&#x5F53;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#x5B58;&#x5728;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#xFF0C;&#x5F53;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#x4E0D;&#x5B58;&#x5728;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;url&#x4E2D;&#x7684;host&#xFF0C;&#x4F46;&#x662F;&#x8FDE;&#x63A5;&#x65F6;&#x4F7F;&#x7528;&#x7684;&#x4F9D;&#x7136;&#x662F;url&#x4E2D;&#x7684;host&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5B58;&#x5728;httpdns&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F7F;&#x7528;&#x7684;&#x662F;ip&#x76F4;&#x8FDE;&#x3002;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172private void connectTls(int readTimeout, int writeTimeout, ConnectionSpecSelector connectionSpecSelector) throws IOException { if (route.requiresTunnel()) { createTunnel(readTimeout, writeTimeout); } Address address = route.address(); SSLSocketFactory sslSocketFactory = address.sslSocketFactory(); boolean success = false; SSLSocket sslSocket = null; try { // Create the wrapper over the connected socket. sslSocket = (SSLSocket) sslSocketFactory.createSocket( rawSocket, address.url().host(), address.url().port(), true /* autoClose */); //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //&#x83B7;&#x53D6;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host String host = address.host(); if (host == null || host.length() == 0) { //&#x5982;&#x679C;&#x8BF7;&#x6C42;&#x4E2D;&#x7684;host&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x4F7F;&#x7528;url&#x4E2D;&#x7684;host host = address.url().host(); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end // Configure the socket&apos;s ciphers, TLS versions, and extensions. ConnectionSpec connectionSpec = connectionSpecSelector.configureSecureSocket(sslSocket); if (connectionSpec.supportsTlsExtensions()) { //&#x8BBE;&#x7F6E;SNI&#x65F6;&#x4F20;&#x5165;&#x7684;host&#x6B64;&#x65F6;&#x4E0D;&#x518D;&#x662F;ip Platform.get().configureTlsExtensions( sslSocket, host, address.protocols()); } // Force handshake. This can throw! sslSocket.startHandshake(); Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession()); // &#x6821;&#x9A8C;&#x65F6;&#x4F20;&#x5165;&#x7684;host&#x6B64;&#x65F6;&#x4E0D;&#x518D;&#x662F;ip // Verify that the socket&apos;s certificates are acceptable for the target host. if (!address.hostnameVerifier().verify(host, sslSocket.getSession())) { X509Certificate cert = (X509Certificate) unverifiedHandshake.peerCertificates().get(0); throw new SSLPeerUnverifiedException(&quot;Hostname &quot; + host + &quot; not verified:&quot; + &quot;\n certificate: &quot; + CertificatePinner.pin(cert) + &quot;\n DN: &quot; + cert.getSubjectDN().getName() + &quot;\n subjectAltNames: &quot; + OkHostnameVerifier.allSubjectAltNames(cert)); } // Check that the certificate pinner is satisfied by the certificates presented. address.certificatePinner().check(host, unverifiedHandshake.peerCertificates()); // Success! Save the handshake and the ALPN protocol. String maybeProtocol = connectionSpec.supportsTlsExtensions() ? Platform.get().getSelectedProtocol(sslSocket) : null; socket = sslSocket; source = Okio.buffer(Okio.source(socket)); sink = Okio.buffer(Okio.sink(socket)); handshake = unverifiedHandshake; protocol = maybeProtocol != null ? Protocol.get(maybeProtocol) : Protocol.HTTP_1_1; success = true; } catch (AssertionError e) { if (Util.isAndroidGetsocknameError(e)) throw new IOException(e); throw e; } finally { if (sslSocket != null) { Platform.get().afterHandshake(sslSocket); } if (!success) { closeQuietly(sslSocket); } } }&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x8FD8;&#x6709;&#x53E6;&#x4E00;&#x4E2A;&#x89E3;&#x51B3;&#x65B9;&#x5F0F;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;OkHttp&#x7684;Dns&#x63A5;&#x53E3;&#x5B9E;&#x73B0;HttpDns&#xFF0C;&#x4E8E;&#x662F;&#x6574;&#x4E2A;&#x4E16;&#x754C;&#x5E73;&#x9759;&#x4E86;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x8FD9;&#x4E48;&#x8BF4;&#x5462;&#xFF0C;&#x89C1;&#x4E0B;&#x6587;&#x3002;Http/2.0 &amp;&amp; SPDY/3.1 &#x4E0E;HttpDNS&#x5F53;&#x4F60;&#x5929;&#x771F;&#x7684;&#x4EE5;&#x4E3A;&#x8FD9;&#x6837;&#x89E3;&#x51B3;&#x4E86;&#x95EE;&#x9898;&#x4E4B;&#x540E;&#xFF0C;&#x90A3;&#x4F60;&#x5C31;&#x5927;&#x9519;&#x7279;&#x9519;&#x4E86;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x4E0A;&#x9762;&#x8BF4;&#x7684;&#xFF0C;&#x76F4;&#x63A5;&#x901A;&#x8FC7;OkHttp&#x7684;Dns&#x63A5;&#x53E3;&#x5B9E;&#x73B0;HttpDns&#x4E00;&#x4E86;&#x767E;&#x4E86;&#x7684;&#x539F;&#x56E0;&#x4E86;&#x3002;&#x5728;SPDY&#x548C;Http2.0&#x4E2D;&#xFF0C;&#x8BF7;&#x6C42;&#x5934;&#x4E2D;&#x7684;host&#x5DF2;&#x4E0D;&#x518D;&#x662F;Http1.1&#x65F6;&#x4EE3;&#x7684;host&#x4E86;&#xFF0C;&#x901A;&#x8FC7;&#x67E5;&#x770B;&#x534F;&#x8BAE;&#x6587;&#x6863; https://tools.ietf.org/html/draft-ietf-httpbis-http2-09#section-8.1.3&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5728;Http2.0&#x4E2D;&#x4F7F;&#x7528;:authority&#x8BF7;&#x6C42;&#x5934;&#x4EE3;&#x66FF;Http1.1&#x4E2D;&#x7684;host&#x9898;&#x5916;&#x8BDD;&#xFF0C;&#x5728;Http2.0&#x4E2D;&#xFF0C;&#x6240;&#x6709;&#x8BF7;&#x6C42;&#x5934;&#x5168;&#x90E8;&#x53D8;&#x6210;&#x5C0F;&#x5199;&#xFF0C;&#x5927;&#x5199;&#x7684;&#x8BF7;&#x6C42;&#x5934;&#x662F;&#x4E0D;&#x7B26;&#x5408;&#x89C4;&#x8303;&#x7684;&#x3002;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x5BFC;&#x81F4;&#x7684;&#x76F4;&#x63A5;&#x7ED3;&#x679C;&#x5C31;&#x662F;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x62FF;&#x5230;&#x7684;host&#x662F;ip&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x57DF;&#x540D;&#xFF0C;&#x5982;&#x679C;&#x670D;&#x52A1;&#x5668;&#x5BF9;host&#x8FDB;&#x884C;&#x6821;&#x9A8C;&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x80FD;&#x5C31;&#x4F1A;&#x51FA;&#x95EE;&#x9898;&#x3002;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x8BE5;&#x600E;&#x4E48;&#x89E3;&#x51B3;&#x5462;&#xFF1F;&#x540C;&#x6837;&#x9700;&#x8981;&#x5BF9;OkHttp&#x5F00;&#x5200;&#x3002;&#x4FEE;&#x6539;okhttp3.internal.http.Http2xStream&#x4E2D;&#x7684;spdy3HeadersList&#x4EE5;&#x53CA;http2HeadersList&#x65B9;&#x6CD5;&#xFF0C;&#x5C06;&#x5BF9;&#x5E94;&#x8BF7;&#x6C42;&#x5934;&#x7684;&#x503C;&#x8BBE;&#x4E3A;&#x57DF;&#x540D;&#x5373;&#x53EF;&#x3002;1234567891011121314151617181920212223242526272829303132333435363738394041424344public static List&lt;Header&gt; spdy3HeadersList(Request request) { Headers headers = request.headers(); //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //&#x5148;&#x53D6;header&#x4E2D;&#x7684;host String host = request.header(&quot;host&quot;); if (host == null || host.length() == 0) { //&#x6CA1;&#x6709;&#x5219;&#x4F7F;&#x7528;&#x539F;&#x59CB;&#x7684;request.url() host = Util.hostHeader(request.url(), false); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end List&lt;Header&gt; result = new ArrayList&lt;&gt;(headers.size() + 5); result.add(new Header(TARGET_METHOD, request.method())); result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url()))); result.add(new Header(VERSION, &quot;HTTP/1.1&quot;)); //&#x4FEE;&#x6539;&#x4E3A;host&#x53D8;&#x91CF; result.add(new Header(TARGET_HOST, host)); result.add(new Header(TARGET_SCHEME, request.url().scheme())); Set&lt;ByteString&gt; names = new LinkedHashSet&lt;&gt;(); for (int i = 0, size = headers.size(); i &lt; size; i++) { // header names must be lowercase. ByteString name = ByteString.encodeUtf8(headers.name(i).toLowerCase(Locale.US)); // Drop headers that are forbidden when layering HTTP over SPDY. if (SPDY_3_SKIPPED_REQUEST_HEADERS.contains(name)) continue; // If we haven&apos;t seen this name before, add the pair to the end of the list... String value = headers.value(i); if (names.add(name)) { result.add(new Header(name, value)); continue; } // ...otherwise concatenate the existing values and this value. for (int j = 0; j &lt; result.size(); j++) { if (result.get(j).name.equals(name)) { String concatenated = joinOnNull(result.get(j).value.utf8(), value); result.set(j, new Header(name, concatenated)); break; } } } return result; }1234567891011121314151617181920212223242526public static List&lt;Header&gt; http2HeadersList(Request request) { Headers headers = request.headers(); //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;start //&#x5148;&#x53D6;header&#x4E2D;&#x7684;host String host = request.header(&quot;host&quot;); if (host == null || host.length() == 0) { //&#x6CA1;&#x6709;&#x5219;&#x4F7F;&#x7528;&#x539F;&#x59CB;&#x7684;request.url() host = Util.hostHeader(request.url(), false); } //&#x52A0;&#x5165;&#x7684;&#x4EE3;&#x7801;end List&lt;Header&gt; result = new ArrayList&lt;&gt;(headers.size() + 4); result.add(new Header(TARGET_METHOD, request.method())); result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url()))); //&#x4FEE;&#x6539;&#x4E3A;host&#x53D8;&#x91CF; result.add(new Header(TARGET_AUTHORITY, host)); // Optional. result.add(new Header(TARGET_SCHEME, request.url().scheme())); for (int i = 0, size = headers.size(); i &lt; size; i++) { // header names must be lowercase. ByteString name = ByteString.encodeUtf8(headers.name(i).toLowerCase(Locale.US)); if (!HTTP_2_SKIPPED_REQUEST_HEADERS.contains(name)) { result.add(new Header(name, headers.value(i))); } } return result; }Content-Length&#x5728;Http2.0&#x4E0B;&#x7684;&#x5751;&#x5982;&#x679C;&#x4F7F;&#x7528;OkHttp&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;&#x4E86;&#x81EA;&#x5B9A;&#x4E49;&#x7684;RequestBody&#xFF0C;&#x5E76;&#x4E14;&#x4F7F;&#x7528;&#x4E86;application/octet-stream&#x8FD9;&#x79CD;&#x7C7B;&#x578B;&#xFF0C;&#x90A3;&#x4E48;&#x5728;Http2.0&#x4E0B;&#x5C31;&#x9700;&#x8981;&#x7279;&#x522B;&#x6CE8;&#x610F;&#x4E86;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718class ByteRequestBody extends RequestBody { final MediaType MEDIA_TYPE = MediaType.parse(&quot;application/octet-stream; charset=utf-8&quot;); byte[] bytes; public ByteRequestBody(byte[] bytes) { this.bytes = bytes; } @Override public MediaType contentType() { return MEDIA_TYPE; } @Override public void writeTo(BufferedSink sink) throws IOException { sink.write(bytes); } }&#x521D;&#x6B65;&#x770B;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x4F60;&#x4F1A;&#x53D1;&#x73B0;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x5B9E;&#x9645;&#x4E0A;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x662F;&#x6709;&#x95EE;&#x9898;&#x7684;&#xFF0C;&#x5C06;&#x76F4;&#x63A5;&#x5BFC;&#x81F4;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#x54CD;&#x5E94;&#x53D8;&#x6162;&#xFF0C;&#x52A0;&#x5FEB;&#x670D;&#x52A1;&#x5668;I/O&#x8BBE;&#x5907;&#x8017;&#x635F;&#x3002;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x4F1A;&#x5BFC;&#x81F4;&#x670D;&#x52A1;&#x5668;&#x5C06;&#x6240;&#x6709;&#x8BF7;&#x6C42;&#x8FDB;&#x884C;&#x786C;&#x76D8;buffer&#x5904;&#x7406;&#xFF0C;nginx&#x4F1A;&#x62A5;&#x4EE5;&#x4E0B;&#x8B66;&#x544A;2016/12/02 16:42:58 [warn] 20479#0: 77176 a client request body is buffered to a temporary file /home/www/tengine/data/client_body/0033902790, client: ...*, server: fucknmb.com, request: &#x201C;POST /apiName/apiVersion HTTP/2.0&#x201D;, host: &#x201C;fucknmb.com&#x201D;, referrer: &#x201C;https://fucknmb.com&#x201C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x5E76;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x6700;&#x7EC8;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x627E;&#x5230;&#x4E86;&#x89E3;&#x51B3;&#x65B9;&#x5F0F;&#xFF0C;&#x5C31;&#x662F;&#x8FD9;&#x4E48;&#x795E;&#x5947;&#x3002;&#x5F53;&#x4F7F;&#x7528;application/octet-stream&#x7C7B;&#x578B;&#x65F6;&#xFF0C;OkHttp&#x4F1A;&#x8FFD;&#x52A0;&#x8BF7;&#x6C42;&#x5934;Transfer-Encoding: chunked&#x8BF7;&#x6C42;&#x5934;&#xFF0C;&#x800C;&#x6B64;&#x65F6;&#x5982;&#x679C;&#x8BF7;&#x6C42;&#x5934;&#x91CC;&#x6709;Content-Length&#xFF0C;&#x5219;&#x95EE;&#x9898;&#x4E0D;&#x4F1A;&#x5B58;&#x5728;&#xFF0C;&#x9519;&#x5C31;&#x9519;&#x5728;&#x4E0A;&#x9762;&#x7684;&#x81EA;&#x5B9A;&#x4E49;RequestBody&#xFF0C;&#x6CA1;&#x6709;&#x91CD;&#x5199;contentLength()&#x65B9;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x91CD;&#x5199;&#xFF0C;OkHttp&#x4F1A;&#x9ED8;&#x8BA4;&#x8FD4;&#x56DE;-1&#xFF0C;&#x5728;&#x8FD4;&#x56DE;-1&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x662F;&#x4E0D;&#x4F1A;&#x8FFD;&#x52A0;Content-Length&#x8FD9;&#x4E2A;&#x8BF7;&#x6C42;&#x5934;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x539F;&#x56E0;&#x5728;&#x4E0E;&#x4F7F;&#x7528;&#x4E86;application/octet-stream&#x7C7B;&#x578B;&#xFF0C;&#x4F46;&#x6CA1;&#x6709;Content-Length&#xFF0C;&#x800C;&#x4E14;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x53EA;&#x6709;Http2.0&#x4E0B;&#x4F1A;&#x6709;&#x3002;Http/1.1&#x548C;SPDY/3.1&#x90FD;&#x4E0D;&#x4F1A;&#x6709;&#xFF0C;&#x521D;&#x6B65;&#x6000;&#x7591;&#x548C;Http/2.0&#x7684;&#x5E27;&#x4F20;&#x8F93;&#x6709;&#x5173;&#xFF0C;&#x90A3;&#x4E48;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x91CD;&#x5199;contentLength()&#x65B9;&#x6CD5;&#x5373;&#x53EF;&#x3002;&#x5982;&#x4E0B;1234567891011121314151617181920212223class ByteRequestBody extends RequestBody { final MediaType MEDIA_TYPE = MediaType.parse(&quot;application/octet-stream; charset=utf-8&quot;); byte[] bytes; public ByteRequestBody(byte[] bytes) { this.bytes = bytes; } //&#x8FD4;&#x56DE;&#x5B57;&#x8282;&#x957F;&#x5EA6; @Override public long contentLength() throws IOException { return bytes.length; } @Override public MediaType contentType() { return MEDIA_TYPE; } @Override public void writeTo(BufferedSink sink) throws IOException { sink.write(bytes); } }&#x5F53;&#x7136;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x4F7F;&#x7528;&#x81EA;&#x5B9A;&#x4E49;RequestBody&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5EFA;&#x8BAE;&#x7528;&#x4EE5;&#x4E0B;&#x65B9;&#x5F0F;&#x521B;&#x5EFA;RequestBody&#xFF0C;&#x907F;&#x514D;&#x6F0F;&#x6389;&#x9700;&#x8981;&#x91CD;&#x5199;&#x7684;&#x65B9;&#x6CD5;1RequestBody.create(MediaType.parse(&quot;application/octet-stream; charset=utf-8&quot;), bytes);&#x5176;&#x4ED6;&#x6CA1;&#x63D0;&#x5230;&#x7684;&#x5751;WebView&#x4E2D;&#x7684;HttpDns&#x573A;&#x666F;&#xFF0C;&#x53C2;&#x8003;WebView&#x4E1A;&#x52A1;&#x573A;&#x666F;&#x201C;IP&#x76F4;&#x8FDE;&#x201D;&#x65B9;&#x6848;&#x8BF4;&#x660E;&#xFF0C;&#x7531;&#x4E8E;WebView&#x62E6;&#x622A;&#x8BF7;&#x6C42;&#x5728;Andriod 5.0&#x4EE5;&#x4E0A;&#x548C;Android 5.0&#x4EE5;&#x4E0B;&#x7565;&#x6709;&#x533A;&#x522B;&#xFF0C;&#x5EFA;&#x8BAE;WebView&#x4E2D;&#x53EA;&#x5904;&#x7406;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x7684;HttpDns&#xFF0C;&#x5E76;&#x4E14;&#x5EFA;&#x8BAE;&#x5728;Android 5.0&#x4EE5;&#x4E0B;&#x4E0D;&#x8981;&#x8FDB;&#x884C;&#x62E6;&#x622A;&#x3002;Cookie&#x7684;&#x573A;&#x666F;&#xFF0C;&#x53C2;&#x8003;HTTPDNS&#x57DF;&#x540D;&#x89E3;&#x6790;&#x573A;&#x666F;&#x4E0B;&#x5982;&#x4F55;&#x4F7F;&#x7528;Cookie&#xFF1F;&#x5B58;&#x5728;&#x4EE3;&#x7406;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x4EE3;&#x7406;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x7531;&#x4E8E;&#x57DF;&#x540D;&#x88AB;&#x66FF;&#x6362;&#x6210;&#x4E86;ip&#xFF0C;&#x6216;&#x591A;&#x6216;&#x5C11;&#x4F1A;&#x5B58;&#x5728;&#x95EE;&#x9898;&#xFF0C;&#x5EFA;&#x8BAE;&#x68C0;&#x6D4B;&#x5230;&#x4EE3;&#x7406;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x76F4;&#x63A5;&#x5173;&#x95ED;HttpDns&#x670D;&#x52A1;&#x3002;&#x9644;&#x4E0A;Android&#x4E2D;&#x68C0;&#x6D4B;&#x662F;&#x5426;&#x5B58;&#x5728;&#x4EE3;&#x7406;&#x7684;&#x6838;&#x5FC3;&#x4EE3;&#x7801;1234567891011121314151617181920public static boolean detectIfProxyExist(Context ctx) { boolean IS_ICS_OR_LATER = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.ICE_CREAM_SANDWICH; String proxyHost; int proxyPort; try { if (IS_ICS_OR_LATER) { proxyHost = System.getProperty(&quot;http.proxyHost&quot;); String port = System.getProperty(&quot;http.proxyPort&quot;); proxyPort = Integer.parseInt(port != null ? port : &quot;-1&quot;); } else { proxyHost = android.net.Proxy.getHost(ctx); proxyPort = android.net.Proxy.getPort(ctx); } return proxyHost != null &amp;&amp; proxyPort != -1; } catch (Exception e) { e.printStackTrace(); } return false; }&#x53C2;&#x8003;&#x6587;&#x7AE0;HTTPS&#xFF08;&#x542B;SNI&#xFF09;&#x4E1A;&#x52A1;&#x573A;&#x666F;&#x201C;IP&#x76F4;&#x8FDE;&#x201D;&#x65B9;&#x6848;&#x8BF4;&#x660E;Http2.0&#x534F;&#x8BAE;&#x6587;&#x6863;&#x4E3A;&#x4EC0;&#x4E48;&#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x5C3D;&#x5FEB;&#x652F;&#x6301; ALPN&#xFF1F;]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Http/2.0</tag>
        <tag>HttpDNS</tag>
        <tag>OkHttp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gradle 函数复用的一点实践]]></title>
    <url>%2F2017%2F01%2F12%2FGradle%E5%87%BD%E6%95%B0%E5%A4%8D%E7%94%A8%E7%9A%84%E4%B8%80%E7%82%B9%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[&#x9605;&#x8BFB;&#x672C;&#x7BC7;&#x6587;&#x7AE0;&#x9700;&#x8981;1~2&#x5206;&#x949F;&#xFF0C;&#x6CA1;&#x6709;&#x6280;&#x672F;&#x542B;&#x91CF;&#xFF0C;&#x53EA;&#x662F;&#x8C08;&#x8C08;&#x7ECF;&#x9A8C;&#x3002;&#x524D;&#x6BB5;&#x65F6;&#x95F4;&#x5728;&#x641E;&#x7EC4;&#x4EF6;&#x5316;&#xFF0C;&#x5176;&#x4E2D;&#x9047;&#x5230;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5404;&#x4E2A;&#x6A21;&#x5757;&#x4E2D;&#x7684;gradle&#x6587;&#x4EF6;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x8F85;&#x52A9;&#x51FD;&#x6570;&#xFF0C;&#x6BD4;&#x5982;&#x7528;&#x4E8E;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x6784;&#x5EFA;&#x7684;&#x4EFB;&#x52A1;&#x662F;&#x5426;&#x5728;jenkins&#x4E0A;&#x6784;&#x5EFA;&#xFF0C;&#x5E76;&#x4E14;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x53EF;&#x80FD;&#x4F1A;&#x88AB;&#x591A;&#x6B21;&#x4F7F;&#x7528;&#x3002;&#x6700;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x53EA;&#x6709;&#x4E00;&#x4E2A;gradle&#x6587;&#x4EF6;&#x7528;&#x5230;&#x4E86;&#xFF0C;&#x5C31;&#x76F4;&#x63A5;&#x5728;&#x7528;&#x5230;&#x7684;gradle&#x6587;&#x4EF6;&#x4E2D;&#x7F16;&#x5199;&#x5BF9;&#x5E94;&#x7684;&#x51FD;&#x6570;&#x3002;&#x540E;&#x6765;&#x53D1;&#x73B0;&#xFF0C;&#x5F88;&#x591A;gradle&#x6587;&#x4EF6;&#x90FD;&#x4F1A;&#x7528;&#x5230;&#xFF0C;&#x4E00;&#x5F00;&#x59CB;&#x5E76;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x592A;&#x591A;&#xFF0C;&#x7528;&#x5230;&#x7684;&#x65F6;&#x5019;&#x5C31;copy&#x4E00;&#x4E0B;&#x5BF9;&#x5E94;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x4E45;&#x800C;&#x4E45;&#x4E4B;&#xFF0C;&#x53D1;&#x73B0;&#x5F88;&#x591A;&#x6587;&#x4EF6;&#x4E2D;&#x5B58;&#x5728;&#x7740;&#x76F8;&#x540C;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5341;&#x5206;&#x4E0D;&#x597D;&#x7EF4;&#x62A4;&#xFF0C;&#x7531;&#x4E8E;&#x73B0;&#x6709;&#x7684;&#x65B9;&#x6CD5;&#x5B9E;&#x5728;&#x662F;&#x592A;&#x8822;&#x4E86;&#x4EE5;&#x81F3;&#x4E8E;&#x81EA;&#x5DF1;&#x90FD;&#x770B;&#x4E0D;&#x4E0B;&#x53BB;&#x4E86;&#xFF0C;&#x4E8E;&#x662F;&#x4E0D;&#x5F97;&#x4E0D;&#x53BB;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x90A3;&#x4E48;&#x5728;gradle&#x4E2D;&#xFF0C;&#x6709;&#x6CA1;&#x6709;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x8BA9;&#x516C;&#x5171;&#x51FD;&#x6570;&#x590D;&#x7528;&#x5462;&#xFF1F;&#x7B54;&#x6848;&#x662F;&#x80AF;&#x5B9A;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x7684;&#x8BDD;&#x4E5F;&#x5C31;&#x6CA1;&#x6709;&#x6B64;&#x6587;&#x4E86;&#x3002;&#x6211;&#x4EEC;&#x56DE;&#x60F3;&#x4E00;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x5982;&#x4F55;&#x5C06;lib&#x5E93;&#x53D1;&#x5E03;&#x5230;maven&#x79C1;&#x670D;&#xFF0C;&#x4E00;&#x822C;&#x4F1A;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A;&#x5E94;&#x7528;maven&#x63D2;&#x4EF6;&#x5B9A;&#x4E49;lib&#x5E93;&#x5750;&#x6807;&#x5229;&#x7528;uploadArchives&#x8FD9;&#x4E2A;Task&#x53D1;&#x5E03;&#x5230;maven&#x79C1;&#x670D;&#x6700;&#x7B80;&#x5355;&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF0C;&#x5C06;lib&#x5E93;&#x53D1;&#x5E03;&#x5230;&#x4E86;&#x672C;&#x5730;&#x7684;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#x3002;12345678910111213141516apply plugin: &apos;maven&apos;ext { PUBLISH_GROUP_ID = &quot;com.fucknmb&quot; PUBLISH_ARTIFACT_ID = &quot;test&quot; PUBLISH_VERSION = &quot;0.0.1&quot;}uploadArchives { repositories { mavenDeployer { pom.groupId = PUBLISH_GROUP_ID pom.artifactId = PUBLISH_ARTIFACT_ID pom.version = PUBLISH_VERSION repository(url: uri(&apos;../repo&apos;)) } }}&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x5C06;groupId,artifactId&#x4EE5;&#x53CA;version&#x5B9A;&#x4E49;&#x5230;project.ext&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x76F4;&#x63A5;&#x901A;&#x8FC7;&#x53D8;&#x91CF;&#x540D;&#x6765;&#x8BBF;&#x95EE;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#xFF0C;&#x8FD9;&#x6837;&#x505A;&#x7684;&#x597D;&#x5904;&#x5C31;&#x662F;&#x4FBF;&#x4E8E;&#x7EDF;&#x4E00;&#x7BA1;&#x7406;&#x5404;&#x4E2A;&#x53D8;&#x91CF;&#x3002;&#x5176;&#x5B9E;&#x8FD9;&#x662F;&#x53D8;&#x91CF;&#x590D;&#x7528;&#x7684;&#x4E00;&#x79CD;&#x4F53;&#x73B0;&#xFF0C;&#x65E2;&#x7136;&#x53D8;&#x91CF;&#x53EF;&#x4EE5;&#x5982;&#x6B64;&#x590D;&#x7528;&#xFF0C;&#x90A3;&#x4E48;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x53D8;&#x91CF;&#x590D;&#x7528;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x6765;&#x590D;&#x7528;&#x51FD;&#x6570;&#x5462;&#xFF1F;&#x5047;&#x8BBE;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x73B0;&#x5728;&#x9700;&#x8981;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x7684;&#x6784;&#x5EFA;&#x73AF;&#x5883;&#x662F;&#x5426;&#x5728;jenkins&#x4E0A;&#xFF0C;&#x4E00;&#x822C;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5B58;&#x5728;JOB_NAME&#x548C;BUILD_NUMBER&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x6709;&#x5982;&#x4E0B;&#x51FD;&#x6570;&#xFF1A;12345678910111213141516/** * &#x662F;&#x5426;&#x5728;Jenkins&#x5E73;&#x53F0;&#x4E0A;&#x6253;&#x5305; * @return */boolean isJenkins() { Map&lt;String, String&gt; map = System.getenv() if (map == null){ return false } boolean hasBuildJob = map.containsKey(&quot;JOB_NAME&quot;) boolean hasBuildNumber = map.containsKey(&quot;BUILD_NUMBER&quot;) if (hasBuildJob &amp;&amp; hasBuildNumber) { return true } return false}&#x8FD9;&#x65F6;&#x5019;A&#x6A21;&#x5757;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x7528;&#x5230;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x4E8E;&#x662F;&#x6BEB;&#x4E0D;&#x72B9;&#x8C6B;&#x7684;&#x628A;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x62F7;&#x8D1D;&#x5230;&#x4E86;A&#x6A21;&#x5757;&#x4E0B;&#x7684;build.gradle&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;OK&#x5B8C;&#x4E8B;&#x3002;&#x8FC7;&#x4E86;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#xFF0C;B&#x6A21;&#x5757;&#x8FC7;&#x6765;&#x95EE;&#xFF0C;&#x6709;&#x6CA1;&#x6709;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5728;Jenkins&#x4E0A;&#xFF0C;OK&#xFF0C;&#x6709;&#xFF0C;&#x53C8;&#x62F7;&#x4E86;&#x4E00;&#x6B21;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x3002;&#x4E45;&#x800C;&#x4E45;&#x4E4B;&#xFF0C;&#x8FD9;&#x79CD;&#x76F8;&#x540C;&#x7684;&#x57FA;&#x7840;&#x51FD;&#x6570;&#xFF0C;&#x4F1A;&#x6563;&#x843D;&#x5728;&#x5404;&#x4E2A;gradle&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x975E;&#x5E38;&#x4E0D;&#x5229;&#x4E8E;&#x7EF4;&#x62A4;&#xFF0C;&#x540E;&#x671F;&#x8981;&#x4FEE;&#x6539;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x6539;&#x4E86;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x5FD8;&#x4E86;&#x90A3;&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x5FC5;&#x987B;&#x8981;&#x5BFB;&#x627E;&#x51FA;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x6765;&#x590D;&#x7528;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x3002;&#x53C2;&#x8003;&#x53D8;&#x91CF;&#x590D;&#x7528;&#xFF0C;&#x6211;&#x4EEC;&#x5728;ext&#x4E2D;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x3002;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;common_function.gradle&#x6587;&#x4EF6;&#xFF0C;&#x7528;&#x4E8E;&#x590D;&#x7528;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x3002;&#x76EE;&#x524D;&#x4E3A;&#x6B62;&#xFF0C;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x4E2D;&#x6682;&#x65F6;&#x8FD8;&#x53EA;&#x6709;isJenkins&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x628A;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x5BFC;&#x51FA;&#x3002;&#x5BFC;&#x51FA;&#x65B9;&#x5F0F;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF1A;1234//&#x5BFC;&#x51FA;&#x51FD;&#x6570;ext { isJenkins = this.&amp;isJenkins}&#x600E;&#x4E48;&#x6837;&#xFF0C;&#x662F;&#x4E0D;&#x662F;&#x6709;&#x70B9;js&#x4E2D;&#x7684;ES6&#x4E2D;&#x7684;export&#x7684;&#x611F;&#x89C9;&#x3002;&#x6CE8;&#x610F;&#x5BFC;&#x51FA;&#x7684;&#x65F6;&#x5019;&#x9700;&#x8981;&#x52A0;&#x4E0A;&amp;&#xFF0C;&#x6709;&#x70B9;&#x50CF;C++&#x4E2D;&#x7684;&#x53D6;&#x5730;&#x5740;&#x3002;&#x6574;&#x4E2A;&#x6587;&#x4EF6;&#x73B0;&#x5728;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A;1234567891011121314151617181920/** * &#x662F;&#x5426;&#x5728;Jenkins&#x5E73;&#x53F0;&#x4E0A;&#x6253;&#x5305; * @return */boolean isJenkins() { Map&lt;String, String&gt; map = System.getenv() if (map == null){ return false } boolean hasBuildJob = map.containsKey(&quot;JOB_NAME&quot;) boolean hasBuildNumber = map.containsKey(&quot;BUILD_NUMBER&quot;) if (hasBuildJob &amp;&amp; hasBuildNumber) { return true } return false}//&#x5BFC;&#x51FA;&#x51FD;&#x6570;ext { isJenkins = this.&amp;isJenkins}&#x76EE;&#x524D;&#x4E3A;&#x6B62;&#xFF0C;&#x516C;&#x5171;&#x51FD;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x4EE5;&#x53CA;&#x5BFC;&#x51FA;&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;&#x4E86;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x5F15;&#x7528;&#x4E86;&#x3002;&#x5F15;&#x7528;&#x5C31;&#x548C;&#x5E94;&#x7528;&#x63D2;&#x4EF6;&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002;&#x76F4;&#x63A5;&#x5E94;&#x7528;&#x8BE5;common_function.gradle&#x6587;&#x4EF6;&#x5373;&#x53EF;&#x3002;12//&#x516C;&#x5171;&#x51FD;&#x6570;apply from: &quot;${project.rootProject.file(&apos;common_function.gradle&apos;)}&quot;&#x4E4B;&#x540E;&#xFF0C;&#x4F60;&#x5C31;&#x53EF;&#x4EE5;&#x5728;&#x5BF9;&#x5E94;&#x5F15;&#x7528;&#x4E86;common_function.gradle&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x968F;&#x610F;&#x4F7F;&#x7528;isJenkins&#x51FD;&#x6570;&#x4E86;&#x3002;&#x6253;&#x4E2A;&#x6BD4;&#x65B9;&#xFF0C;&#x6709;&#x4E2A;&#x6700;&#x7B80;&#x5355;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x6BD4;&#x5982;&#x70ED;&#x4FEE;&#x590D;&#x53EF;&#x80FD;&#x8981;&#x8BB0;&#x5F55;&#x4E00;&#x4E9B;&#x6587;&#x4EF6;&#xFF0C;&#x4F46;&#x662F;&#x8BB0;&#x5F55;&#x7684;&#x7684;&#x540C;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x964D;&#x4F4E;&#x7F16;&#x8BD1;&#x901F;&#x5EA6;&#xFF0C;&#x800C;&#x5728;&#x672C;&#x5730;&#x6253;&#x5305;&#x7684;&#x65F6;&#x5019;&#x53C8;&#x6070;&#x6070;&#x4E0D;&#x9700;&#x8981;&#xFF0C;&#x4E8E;&#x662F;&#x672C;&#x5730;&#x6253;&#x5305;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x5E94;&#x7528;&#x8BE5;&#x63D2;&#x4EF6;&#x3002;&#x6539;&#x9020;&#x540E;&#x7684;&#x811A;&#x672C;&#x5982;&#x4E0B;&#xFF1A;123456789apply plugin: &apos;com.android.application&apos;//hotpatch&#x914D;&#x7F6E;&#xFF0C;&#x53EA;&#x6709;&#x5728;&#x6253;&#x5305;&#x5E73;&#x53F0;&#x4E0A;&#x65F6;&#x624D;&#x5E94;&#x7528;if (isJenkins()) { apply plugin: &quot;com.fucknmb.tinker&quot; tinker { //...&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x914D;&#x7F6E;&#x9879; }}&#x672C;&#x7BC7;&#x6587;&#x7AE0;&#x867D;&#x7136;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#xFF0C;&#x4F46;&#x662F;&#x638C;&#x63E1;&#x4E86;&#x7684;&#x8BDD;&#xFF0C;&#x5BF9;gradle&#x4EE3;&#x7801;&#x7684;&#x53EF;&#x7EF4;&#x62A4;&#x6027;&#x662F;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x63D0;&#x9AD8;&#x3002;]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello 区长]]></title>
    <url>%2F2017%2F01%2F12%2FHello-%E5%8C%BA%E9%95%BF%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
</search>
